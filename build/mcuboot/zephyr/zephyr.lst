
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	c0 23 01 20 39 33 00 00 8f 87 00 00 0d 33 00 00     .#. 93.......3..
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	0d 33 00 00 0d 33 00 00 0d 33 00 00 0d 33 00 00     .3...3...3...3..
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	4d 2e 00 00 0d 33 00 00 00 00 00 00 b9 2d 00 00     M....3.......-..
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	0d 33 00 00                                         .3..

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	f1 2e 00 00 f1 2e 00 00 f1 2e 00 00 f1 2e 00 00     ................
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	f1 2e 00 00 f1 2e 00 00 f1 2e 00 00 f1 2e 00 00     ................
		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
				*(const char **)buf = s;
  60:	f1 2e 00 00 f1 2e 00 00 f1 2e 00 00 f1 2e 00 00     ................
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	f1 2e 00 00 f1 2e 00 00 f1 2e 00 00 f1 2e 00 00     ................
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	f1 2e 00 00 f1 2e 00 00 f1 2e 00 00 f1 2e 00 00     ................
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	f1 2e 00 00 f1 2e 00 00 f1 2e 00 00 f1 2e 00 00     ................
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
					str_ptr_arg[s_idx] = arg_idx;
  a0:	f1 2e 00 00 f1 2e 00 00 f1 2e 00 00 f1 2e 00 00     ................
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	f1 2e 00 00 f1 2e 00 00 f1 2e 00 00 f1 2e 00 00     ................
			switch (*fmt) {
  c0:	f1 2e 00 00 f1 2e 00 00 f1 2e 00 00 f1 2e 00 00     ................
  d0:	f1 2e 00 00 f1 2e 00 00 f1 2e 00 00 f1 2e 00 00     ................
  e0:	f1 2e 00 00 f1 2e 00 00 f1 2e 00 00 f1 2e 00 00     ................
  f0:	f1 2e 00 00 f1 2e 00 00 f1 2e 00 00 f1 2e 00 00     ................
 100:	f1 2e 00 00 f1 2e 00 00 f1 2e 00 00 f1 2e 00 00     ................
 110:	f1 2e 00 00 f1 2e 00 00 f1 2e 00 00 f1 2e 00 00     ................
				align = VA_STACK_ALIGN(void *);
 120:	f1 2e 00 00 f1 2e 00 00 f1 2e 00 00 f1 2e 00 00     ................
			switch (*fmt) {
 130:	f1 2e 00 00 f1 2e 00 00 f1 2e 00 00 f1 2e 00 00     ................
 140:	f1 2e 00 00                                         ....

Disassembly of section text:

00000144 <__aeabi_uldivmod>:
		buf = (void *) ROUND_UP(buf, align);
     144:	b953      	cbnz	r3, 15c <__aeabi_uldivmod+0x18>
     146:	b94a      	cbnz	r2, 15c <__aeabi_uldivmod+0x18>
     148:	2900      	cmp	r1, #0
     14a:	bf08      	it	eq
     14c:	2800      	cmpeq	r0, #0
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     14e:	bf1c      	itt	ne
     150:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     154:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     158:	f000 b80c 	b.w	174 <__aeabi_idiv0>
     15c:	f1ad 0c08 	sub.w	ip, sp, #8
		if (is_str_arg) {
     160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     164:	f000 f808 	bl	178 <__udivmoddi4>
			int v = va_arg(ap, int);
     168:	f8dd e004 	ldr.w	lr, [sp, #4]

			if (buf0 != NULL) {
				*(int *)buf = v;
			}
			buf += sizeof(int);
     16c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     170:	b004      	add	sp, #16
				arg_idx--;
     172:	4770      	bx	lr

00000174 <__aeabi_idiv0>:
     174:	4770      	bx	lr
     176:	bf00      	nop

00000178 <__udivmoddi4>:
				parsing = false;
     178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				continue;
     17c:	4686      	mov	lr, r0
				if (fmt[-1] == 'l') {
     17e:	468c      	mov	ip, r1
     180:	4608      	mov	r0, r1
     182:	9e08      	ldr	r6, [sp, #32]
     184:	4615      	mov	r5, r2
					if (fmt[-2] == 'l') {
     186:	4674      	mov	r4, lr
     188:	4619      	mov	r1, r3
     18a:	2b00      	cmp	r3, #0
				parsing = false;
     18c:	f040 80c1 	bne.w	312 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x12>
					if (fmt[-2] == 'l') {
     190:	4285      	cmp	r5, r0
						align = VA_STACK_ALIGN(long long);
     192:	fab2 f282 	clz	r2, r2
				size = sizeof(void *);
     196:	d945      	bls.n	224 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x24>
     198:	b14a      	cbz	r2, 1ae <__udivmoddi4+0x36>
					v.ld = va_arg(ap, long double);
     19a:	f1c2 0320 	rsb	r3, r2, #32
     19e:	fa00 fc02 	lsl.w	ip, r0, r2
				buf = (void *) ROUND_UP(buf, align);
     1a2:	4095      	lsls	r5, r2
     1a4:	4094      	lsls	r4, r2
     1a6:	fa2e f303 	lsr.w	r3, lr, r3
					v.ld = va_arg(ap, long double);
     1aa:	ea43 0c0c 	orr.w	ip, r3, ip
					if (BUF_OFFSET + size > len) {
     1ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1b2:	b2a8      	uxth	r0, r5
     1b4:	0c23      	lsrs	r3, r4, #16
     1b6:	fbbc f8fe 	udiv	r8, ip, lr
						*(long double *)buf = v.ld;
     1ba:	fb0e cc18 	mls	ip, lr, r8, ip
				parsing = false;
     1be:	fb08 f900 	mul.w	r9, r8, r0
			switch (*fmt) {
     1c2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1c6:	4599      	cmp	r9, r3
			if (*++fmt == '\0') {
     1c8:	d928      	bls.n	21c <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x1c>
     1ca:	18eb      	adds	r3, r5, r3
     1cc:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
			if (!parsing) {
     1d0:	d204      	bcs.n	1dc <CONFIG_BOOT_SERIAL_DETECT_DELAY+0x1a>
     1d2:	4599      	cmp	r9, r3
     1d4:	d902      	bls.n	1dc <CONFIG_BOOT_SERIAL_DETECT_DELAY+0x1a>
     1d6:	f1a8 0702 	sub.w	r7, r8, #2
				if (*fmt == '%') {
     1da:	442b      	add	r3, r5
					parsing = true;
     1dc:	eba3 0309 	sub.w	r3, r3, r9
					arg_idx++;
     1e0:	b2a4      	uxth	r4, r4
     1e2:	fbb3 fcfe 	udiv	ip, r3, lr
				align = VA_STACK_ALIGN(size_t);
     1e6:	fb0e 331c 	mls	r3, lr, ip, r3
     1ea:	fb0c f000 	mul.w	r0, ip, r0
			switch (*fmt) {
     1ee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
				parsing = false;
     1f2:	42a0      	cmp	r0, r4
     1f4:	d914      	bls.n	220 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x20>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1f6:	192c      	adds	r4, r5, r4
     1f8:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
					return -EINVAL;
     1fc:	d204      	bcs.n	208 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x8>
     1fe:	42a0      	cmp	r0, r4
			long long v = va_arg(ap, long long);
     200:	d902      	bls.n	208 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x8>
     202:	f1ac 0302 	sub.w	r3, ip, #2
     206:	442c      	add	r4, r5
     208:	1a24      	subs	r4, r4, r0
     20a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     20e:	b11e      	cbz	r6, 218 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x18>
				}
			}
			buf += sizeof(long long);
     210:	40d4      	lsrs	r4, r2
     212:	2300      	movs	r3, #0
     214:	6034      	str	r4, [r6, #0]
		if (is_str_arg) {
     216:	6073      	str	r3, [r6, #4]
		} else if (size == sizeof(int)) {
     218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			int v = va_arg(ap, int);
     21c:	4647      	mov	r7, r8
     21e:	e7dd      	b.n	1dc <CONFIG_BOOT_SERIAL_DETECT_DELAY+0x1a>
			if (buf0 != NULL) {
     220:	4663      	mov	r3, ip
		} else if (size == sizeof(long long)) {
     222:	e7f1      	b.n	208 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x8>
     224:	bb92      	cbnz	r2, 28c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc>
			long long v = va_arg(ap, long long);
     226:	1b43      	subs	r3, r0, r5
     228:	2101      	movs	r1, #1
     22a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     22e:	b2af      	uxth	r7, r5
     230:	0c20      	lsrs	r0, r4, #16
			if (buf0 != NULL) {
     232:	fbb3 fcfe 	udiv	ip, r3, lr
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     236:	fb0e 331c 	mls	r3, lr, ip, r3
			s = va_arg(ap, char *);
     23a:	fb0c f807 	mul.w	r8, ip, r7
     23e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
			if (is_ro && !do_ro) {
     242:	4598      	cmp	r8, r3
     244:	d961      	bls.n	30a <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xa>
     246:	18eb      	adds	r3, r5, r3
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     248:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     24c:	d204      	bcs.n	258 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x58>
     24e:	4598      	cmp	r8, r3
     250:	d902      	bls.n	258 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x58>
     252:	f1ac 0002 	sub.w	r0, ip, #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     256:	442b      	add	r3, r5
     258:	eba3 0308 	sub.w	r3, r3, r8
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25c:	b2a4      	uxth	r4, r4
				if (buf0 != NULL) {
     25e:	fbb3 fcfe 	udiv	ip, r3, lr
					str_ptr_pos[s_idx] = s_ptr_idx;
     262:	fb0e 331c 	mls	r3, lr, ip, r3
     266:	fb0c f707 	mul.w	r7, ip, r7
     26a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     26e:	42a7      	cmp	r7, r4
					str_ptr_arg[s_idx] = arg_idx;
     270:	d94d      	bls.n	30e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xe>
     272:	192c      	adds	r4, r5, r4
					if (is_ro) {
     274:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     278:	d204      	bcs.n	284 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4>
     27a:	42a7      	cmp	r7, r4
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     27c:	d902      	bls.n	284 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4>
     27e:	f1ac 0302 	sub.w	r3, ip, #2
     282:	442c      	add	r4, r5
						s_ro_cnt++;
     284:	1be4      	subs	r4, r4, r7
     286:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
					if (BUF_OFFSET + size > len) {
     28a:	e7c0      	b.n	20e <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0xe>
     28c:	f1c2 0320 	rsb	r3, r2, #32
			switch (*fmt) {
     290:	4095      	lsls	r5, r2
			buf += sizeof(char *);
     292:	4094      	lsls	r4, r2
					if (BUF_OFFSET + size > len) {
     294:	fa20 f103 	lsr.w	r1, r0, r3
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     298:	fa2e f303 	lsr.w	r3, lr, r3
     29c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
				} else if (is_ro) {
     2a0:	4090      	lsls	r0, r2
     2a2:	b2af      	uxth	r7, r5
					len += 1;
     2a4:	4303      	orrs	r3, r0
     2a6:	fbb1 fcfe 	udiv	ip, r1, lr
					len += 2;
     2aa:	fb0e 101c 	mls	r0, lr, ip, r1
				} else if (rws_pos_en) {
     2ae:	0c19      	lsrs	r1, r3, #16
					len += strlen(s) + 1 + 1;
     2b0:	fb0c f807 	mul.w	r8, ip, r7
     2b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2b8:	4588      	cmp	r8, r1
     2ba:	d922      	bls.n	302 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x2>
     2bc:	1869      	adds	r1, r5, r1
     2be:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2c2:	d204      	bcs.n	2ce <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4e>
     2c4:	4588      	cmp	r8, r1
     2c6:	d902      	bls.n	2ce <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4e>
     2c8:	f1ac 0002 	sub.w	r0, ip, #2
	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2cc:	4429      	add	r1, r5
     2ce:	eba1 0108 	sub.w	r1, r1, r8
     2d2:	b29b      	uxth	r3, r3
     2d4:	fbb1 fcfe 	udiv	ip, r1, lr
     2d8:	fb0e 111c 	mls	r1, lr, ip, r1
	*(char **)buf0 = NULL;

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);

	if (rws_pos_en) {
     2dc:	fb0c f707 	mul.w	r7, ip, r7
	*(char **)buf0 = NULL;
     2e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2e4:	429f      	cmp	r7, r3
     2e6:	d90e      	bls.n	306 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x6>
	if (rws_pos_en) {
     2e8:	18eb      	adds	r3, r5, r3
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2ea:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2ee:	d204      	bcs.n	2fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7a>
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2f0:	429f      	cmp	r7, r3
     2f2:	d902      	bls.n	2fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7a>
     2f4:	f1ac 0102 	sub.w	r1, ip, #2
		for (i = 0; i < s_idx; i++) {
     2f8:	442b      	add	r3, r5
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     2fa:	1bdb      	subs	r3, r3, r7
     2fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
		for (i = 0; i < s_idx; i++) {
     300:	e793      	b.n	22a <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x2a>
			continue;
		}

		if (rws_pos_en) {
			size = 0;
			*buf++ = str_ptr_arg[i];
     302:	4660      	mov	r0, ip
     304:	e7e3      	b.n	2ce <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4e>
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     306:	4661      	mov	r1, ip
     308:	e7f7      	b.n	2fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7a>
     30a:	4660      	mov	r0, ip
     30c:	e7a4      	b.n	258 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x58>
     30e:	4663      	mov	r3, ip
			*buf++ = str_ptr_arg[i];
     310:	e7b8      	b.n	284 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4>
     312:	4283      	cmp	r3, r0
	for (i = 0; i < s_idx; i++) {
     314:	d906      	bls.n	324 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x24>
     316:	b916      	cbnz	r6, 31e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x1e>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     318:	2100      	movs	r1, #0
     31a:	4608      	mov	r0, r1
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     31c:	e77c      	b.n	218 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x18>
		pkg_hdr->desc.rw_str_cnt = 0;
     31e:	e9c6 e000 	strd	lr, r0, [r6]
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     322:	e7f9      	b.n	318 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x18>
     324:	fab3 f783 	clz	r7, r3
			if (BUF_OFFSET + 1 > len) {
     328:	b98f      	cbnz	r7, 34e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x4e>
     32a:	4283      	cmp	r3, r0
     32c:	d301      	bcc.n	332 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x32>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     32e:	4572      	cmp	r2, lr
     330:	d808      	bhi.n	344 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x44>
			if (BUF_OFFSET + 1 > len) {
     332:	ebbe 0402 	subs.w	r4, lr, r2
			*buf++ = pos;
     336:	eb60 0303 	sbc.w	r3, r0, r3
		for (i = 0; i < s_idx; i++) {
     33a:	2001      	movs	r0, #1
     33c:	469c      	mov	ip, r3
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     33e:	b91e      	cbnz	r6, 348 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x48>
     340:	2100      	movs	r1, #0
     342:	e769      	b.n	218 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x18>
     344:	4638      	mov	r0, r7
     346:	e7fa      	b.n	33e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x3e>
     348:	e9c6 4c00 	strd	r4, ip, [r6]
		if (rws_pos_en) {
     34c:	e7f8      	b.n	340 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x40>
     34e:	f1c7 0c20 	rsb	ip, r7, #32
			*buf++ = str_ptr_arg[i];
     352:	40bb      	lsls	r3, r7
     354:	fa0e f507 	lsl.w	r5, lr, r7
			size = 0;
     358:	fa22 f40c 	lsr.w	r4, r2, ip
		if (BUF_OFFSET + 1 + size > len) {
     35c:	fa2e f10c 	lsr.w	r1, lr, ip
     360:	40ba      	lsls	r2, r7
     362:	431c      	orrs	r4, r3
     364:	fa20 f30c 	lsr.w	r3, r0, ip
		*buf++ = str_ptr_pos[i];
     368:	40b8      	lsls	r0, r7
		memcpy(buf, s, size);
     36a:	ea4f 4914 	mov.w	r9, r4, lsr #16
		*buf++ = str_ptr_pos[i];
     36e:	4301      	orrs	r1, r0
		memcpy(buf, s, size);
     370:	fa1f fe84 	uxth.w	lr, r4
     374:	fbb3 f8f9 	udiv	r8, r3, r9
		buf += size;
     378:	fb09 3018 	mls	r0, r9, r8, r3
	for (i = 0; i < s_idx; i++) {
     37c:	0c0b      	lsrs	r3, r1, #16
     37e:	fb08 fa0e 	mul.w	sl, r8, lr
     382:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     386:	459a      	cmp	sl, r3
     388:	d940      	bls.n	40c <CONFIG_BOOT_SERIAL_MAX_RECEIVE_SIZE+0xc>
     38a:	18e3      	adds	r3, r4, r3
     38c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     390:	d204      	bcs.n	39c <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x9c>
			size = strlen(s) + 1;
     392:	459a      	cmp	sl, r3
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     394:	d902      	bls.n	39c <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x9c>
     396:	f1a8 0002 	sub.w	r0, r8, #2
			size = strlen(s) + 1;
     39a:	4423      	add	r3, r4
     39c:	eba3 030a 	sub.w	r3, r3, sl
		return -EFAULT;
     3a0:	b289      	uxth	r1, r1
     3a2:	fbb3 f8f9 	udiv	r8, r3, r9
     3a6:	fb09 3318 	mls	r3, r9, r8, r3
     3aa:	fb08 fe0e 	mul.w	lr, r8, lr
     3ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3b2:	458e      	cmp	lr, r1
     3b4:	d92c      	bls.n	410 <CONFIG_BOOT_SERIAL_MAX_RECEIVE_SIZE+0x10>
     3b6:	1861      	adds	r1, r4, r1
     3b8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     3bc:	d204      	bcs.n	3c8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xc8>
     3be:	458e      	cmp	lr, r1
     3c0:	d902      	bls.n	3c8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xc8>
     3c2:	f1a8 0302 	sub.w	r3, r8, #2
     3c6:	4421      	add	r1, r4
     3c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3cc:	eba1 010e 	sub.w	r1, r1, lr
     3d0:	fba0 9802 	umull	r9, r8, r0, r2
     3d4:	4541      	cmp	r1, r8
     3d6:	46ce      	mov	lr, r9
     3d8:	4643      	mov	r3, r8
     3da:	d302      	bcc.n	3e2 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xe2>
     3dc:	d106      	bne.n	3ec <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xec>
     3de:	454d      	cmp	r5, r9
     3e0:	d204      	bcs.n	3ec <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xec>
     3e2:	3801      	subs	r0, #1
     3e4:	ebb9 0e02 	subs.w	lr, r9, r2
     3e8:	eb68 0304 	sbc.w	r3, r8, r4
     3ec:	2e00      	cmp	r6, #0
     3ee:	d0a7      	beq.n	340 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x40>
     3f0:	ebb5 020e 	subs.w	r2, r5, lr
     3f4:	eb61 0103 	sbc.w	r1, r1, r3
     3f8:	fa01 fc0c 	lsl.w	ip, r1, ip
     3fc:	fa22 f307 	lsr.w	r3, r2, r7
     400:	40f9      	lsrs	r1, r7
     402:	ea4c 0303 	orr.w	r3, ip, r3
     406:	e9c6 3100 	strd	r3, r1, [r6]
     40a:	e799      	b.n	340 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x40>
     40c:	4640      	mov	r0, r8
     40e:	e7c5      	b.n	39c <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x9c>
     410:	4643      	mov	r3, r8
     412:	e7d9      	b.n	3c8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xc8>

00000414 <led_init>:
/* A build error here means your board isn't set up to drive an LED. */
#error "Unsupported board: led0 devicetree alias is not defined"
#endif

void led_init(void)
{
     414:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     416:	480b      	ldr	r0, [pc, #44]	; (444 <led_init+0x30>)
     418:	f008 fec4 	bl	91a4 <z_device_is_ready>
    if (!device_is_ready(led0.port)) {
     41c:	b928      	cbnz	r0, 42a <led_init+0x16>
        return;
    }

    gpio_pin_configure_dt(&led0, GPIO_OUTPUT);
    gpio_pin_set_dt(&led0, 0);
}
     41e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BOOT_LOG_ERR("Didn't find LED device referred by the LED0_NODE\n");
     422:	2145      	movs	r1, #69	; 0x45
     424:	4808      	ldr	r0, [pc, #32]	; (448 <led_init+0x34>)
     426:	f007 be77 	b.w	8118 <z_log_minimal_printk>
    gpio_pin_configure_dt(&led0, GPIO_OUTPUT);
     42a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
     42e:	4807      	ldr	r0, [pc, #28]	; (44c <led_init+0x38>)
     430:	f007 f9b1 	bl	7796 <gpio_pin_configure_dt.isra.0>
}
     434:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
     438:	2200      	movs	r2, #0
     43a:	2103      	movs	r1, #3
     43c:	4801      	ldr	r0, [pc, #4]	; (444 <led_init+0x30>)
     43e:	f007 b99a 	b.w	7776 <gpio_pin_set.isra.0>
     442:	bf00      	nop
     444:	00009538 	.word	0x00009538
     448:	00009c0c 	.word	0x00009c0c
     44c:	00009840 	.word	0x00009840

00000450 <main>:
    return (bool)pin_active;
}
#endif

void main(void)
{
     450:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     454:	4b59      	ldr	r3, [pc, #356]	; (5bc <FIH_LABEL_FIH_CALL_END_1137+0x86>)
     456:	4a5a      	ldr	r2, [pc, #360]	; (5c0 <FIH_LABEL_FIH_CALL_END_1137+0x8a>)
    fih_int fih_rc = FIH_FAILURE;

    MCUBOOT_WATCHDOG_FEED();

#if !defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Starting bootloader");
     458:	2149      	movs	r1, #73	; 0x49
     45a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
     45e:	4859      	ldr	r0, [pc, #356]	; (5c4 <FIH_LABEL_FIH_CALL_END_1137+0x8e>)
     460:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
     464:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
     468:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
     46c:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
     470:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
     474:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
     478:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
     47c:	f007 fe4c 	bl	8118 <z_log_minimal_printk>
    BOOT_LOG_INF("Starting Direct-XIP bootloader");
#endif

#ifdef CONFIG_MCUBOOT_INDICATION_LED
    /* LED init */
    led_init();
     480:	f7ff ffc8 	bl	414 <led_init>
#endif

    os_heap_init();
     484:	f007 f9a7 	bl	77d6 <os_heap_init>
     488:	484f      	ldr	r0, [pc, #316]	; (5c8 <FIH_LABEL_FIH_CALL_END_1137+0x92>)
     48a:	f008 fe8b 	bl	91a4 <z_device_is_ready>
    if (!device_is_ready(button0.port)) {
     48e:	2800      	cmp	r0, #0
     490:	d04e      	beq.n	530 <FIH_LABEL_FIH_CALL_START_1125>
    rc = gpio_pin_configure_dt(&button0, GPIO_INPUT);
     492:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     496:	484d      	ldr	r0, [pc, #308]	; (5cc <FIH_LABEL_FIH_CALL_END_1137+0x96>)
     498:	f007 f97d 	bl	7796 <gpio_pin_configure_dt.isra.0>
	return gpio_pin_get(spec->port, spec->pin);
     49c:	210c      	movs	r1, #12
     49e:	484a      	ldr	r0, [pc, #296]	; (5c8 <FIH_LABEL_FIH_CALL_END_1137+0x92>)
     4a0:	f007 f955 	bl	774e <gpio_pin_get>
    if (pin_active) {
     4a4:	2800      	cmp	r0, #0
     4a6:	d043      	beq.n	530 <FIH_LABEL_FIH_CALL_START_1125>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     4a8:	2100      	movs	r1, #0
     4aa:	f240 6067 	movw	r0, #1639	; 0x667
     4ae:	f005 fb6b 	bl	5b88 <z_impl_k_sleep>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
     4b2:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
		(void) arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t) ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
     4b6:	f008 ffd4 	bl	9462 <z_impl_k_uptime_ticks>
     4ba:	463d      	mov	r5, r7
     4bc:	fba0 0307 	umull	r0, r3, r0, r7
     4c0:	fb07 3301 	mla	r3, r7, r1, r3
     4c4:	0bc4      	lsrs	r4, r0, #15
     4c6:	4e40      	ldr	r6, [pc, #256]	; (5c8 <FIH_LABEL_FIH_CALL_END_1137+0x92>)
     4c8:	ea44 4443 	orr.w	r4, r4, r3, lsl #17
     4cc:	210c      	movs	r1, #12
     4ce:	4630      	mov	r0, r6
     4d0:	f007 f93d 	bl	774e <gpio_pin_get>
     4d4:	4680      	mov	r8, r0
     4d6:	f008 ffc4 	bl	9462 <z_impl_k_uptime_ticks>
     4da:	fba0 3205 	umull	r3, r2, r0, r5
     4de:	fb07 2201 	mla	r2, r7, r1, r2
     4e2:	0bdb      	lsrs	r3, r3, #15
     4e4:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
                uint32_t delta = k_uptime_get() -  timestamp;
     4e8:	1b1b      	subs	r3, r3, r4
                if (delta >= BUTTON_0_DETECT_DELAY || !pin_active) {
     4ea:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
     4ee:	d207      	bcs.n	500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>
     4f0:	f1b8 0f00 	cmp.w	r8, #0
     4f4:	d01c      	beq.n	530 <FIH_LABEL_FIH_CALL_START_1125>
	return z_impl_k_sleep(timeout);
     4f6:	2100      	movs	r1, #0
     4f8:	2021      	movs	r0, #33	; 0x21
     4fa:	f005 fb45 	bl	5b88 <z_impl_k_sleep>
            for(;;) {
     4fe:	e7e5      	b.n	4cc <main+0x7c>
    (void)rc;

    mcuboot_status_change(MCUBOOT_STATUS_STARTUP);

#ifdef CONFIG_MCUBOOT_SERIAL
    if (detect_pin() &&
     500:	f1b8 0f00 	cmp.w	r8, #0
     504:	d014      	beq.n	530 <FIH_LABEL_FIH_CALL_START_1125>
#endif // defined(DPPI_PRESENT)

#if NRF_POWER_HAS_RESETREAS
NRF_STATIC_INLINE uint32_t nrf_power_resetreas_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->RESETREAS;
     506:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     50a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return !(rr == 0 || (rr & NRFX_RESET_REASON_RESETPIN_MASK));
     50e:	b10b      	cbz	r3, 514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>
     510:	07db      	lsls	r3, r3, #31
     512:	d50d      	bpl.n	530 <FIH_LABEL_FIH_CALL_START_1125>
	return gpio_pin_set(spec->port, spec->pin, value);
     514:	2201      	movs	r2, #1
     516:	2103      	movs	r1, #3
     518:	482b      	ldr	r0, [pc, #172]	; (5c8 <FIH_LABEL_FIH_CALL_END_1137+0x92>)
     51a:	f007 f92c 	bl	7776 <gpio_pin_set.isra.0>
        gpio_pin_set_dt(&led0, 1);
#endif

        mcuboot_status_change(MCUBOOT_STATUS_SERIAL_DFU_ENTERED);

        BOOT_LOG_INF("Enter the serial recovery mode");
     51e:	2149      	movs	r1, #73	; 0x49
     520:	482b      	ldr	r0, [pc, #172]	; (5d0 <FIH_LABEL_FIH_CALL_END_1137+0x9a>)
     522:	f007 fdf9 	bl	8118 <z_log_minimal_printk>
        rc = boot_console_init();
     526:	f001 fe5d 	bl	21e4 <boot_console_init>
        __ASSERT(rc == 0, "Error initializing boot console.\n");
        boot_serial_start(&boot_funcs);
     52a:	482a      	ldr	r0, [pc, #168]	; (5d4 <FIH_LABEL_FIH_CALL_END_1137+0x9e>)
     52c:	f002 f9c6 	bl	28bc <boot_serial_start>

00000530 <FIH_LABEL_FIH_CALL_START_1125>:
    rc = boot_console_init();
    int timeout_in_ms = CONFIG_BOOT_SERIAL_WAIT_FOR_DFU_TIMEOUT;
    uint32_t start = k_uptime_get_32();
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     530:	a801      	add	r0, sp, #4
     532:	f000 fc87 	bl	e44 <boot_go>

00000536 <FIH_LABEL_FIH_CALL_END_1137>:
        timeout_in_ms = 1;
    }
    boot_serial_check_start(&boot_funcs,timeout_in_ms);
#endif

    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     536:	4b28      	ldr	r3, [pc, #160]	; (5d8 <FIH_LABEL_FIH_CALL_END_1137+0xa2>)
     538:	681b      	ldr	r3, [r3, #0]
     53a:	4283      	cmp	r3, r0
     53c:	d004      	beq.n	548 <FIH_LABEL_FIH_CALL_END_1137+0x12>
        BOOT_LOG_ERR("Unable to find bootable image");
     53e:	2145      	movs	r1, #69	; 0x45
     540:	4826      	ldr	r0, [pc, #152]	; (5dc <FIH_LABEL_FIH_CALL_END_1137+0xa6>)
     542:	f007 fde9 	bl	8118 <z_log_minimal_printk>

        mcuboot_status_change(MCUBOOT_STATUS_NO_BOOTABLE_IMAGE_FOUND);

        FIH_PANIC;
     546:	e7fe      	b.n	546 <FIH_LABEL_FIH_CALL_END_1137+0x10>
    }

    BOOT_LOG_INF("Bootloader chainload address offset: 0x%x",
     548:	9a03      	ldr	r2, [sp, #12]
     54a:	2149      	movs	r1, #73	; 0x49
     54c:	4824      	ldr	r0, [pc, #144]	; (5e0 <FIH_LABEL_FIH_CALL_END_1137+0xaa>)
     54e:	f007 fde3 	bl	8118 <z_log_minimal_printk>
                 rsp.br_image_off);

#if defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Jumping to the image slot");
#else
    BOOT_LOG_INF("Jumping to the first image slot");
     552:	2149      	movs	r1, #73	; 0x49
     554:	4823      	ldr	r0, [pc, #140]	; (5e4 <FIH_LABEL_FIH_CALL_END_1137+0xae>)
     556:	f007 fddf 	bl	8118 <z_log_minimal_printk>
/* There is only one instance of MCUBoot */
#define PROTECT_SIZE (PM_MCUBOOT_PRIMARY_ADDRESS - PM_MCUBOOT_ADDRESS)
#define PROTECT_ADDR PM_MCUBOOT_ADDRESS
#endif

    rc = fprotect_area(PROTECT_ADDR, PROTECT_SIZE);
     55a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     55e:	2000      	movs	r0, #0
     560:	f003 ff66 	bl	4430 <fprotect_area>

    if (rc != 0) {
     564:	4604      	mov	r4, r0
     566:	b120      	cbz	r0, 572 <FIH_LABEL_FIH_CALL_END_1137+0x3c>
        BOOT_LOG_ERR("Protect mcuboot flash failed, cancel startup.");
     568:	2145      	movs	r1, #69	; 0x45
     56a:	481f      	ldr	r0, [pc, #124]	; (5e8 <FIH_LABEL_FIH_CALL_END_1137+0xb2>)
     56c:	f007 fdd4 	bl	8118 <z_log_minimal_printk>
        while (1)
     570:	e7fe      	b.n	570 <FIH_LABEL_FIH_CALL_END_1137+0x3a>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     572:	4669      	mov	r1, sp
     574:	f89d 0008 	ldrb.w	r0, [sp, #8]
     578:	f000 f83a 	bl	5f0 <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     57c:	9b00      	ldr	r3, [sp, #0]
     57e:	9d03      	ldr	r5, [sp, #12]
     580:	441d      	add	r5, r3
                                     rsp->br_hdr->ih_hdr_size);
     582:	9b01      	ldr	r3, [sp, #4]
     584:	891e      	ldrh	r6, [r3, #8]
    nrf_cleanup_peripheral();
     586:	f000 ff65 	bl	1454 <nrf_cleanup_peripheral>
                                     rsp->br_image_off +
     58a:	19af      	adds	r7, r5, r6
    cleanup_arm_nvic(); /* cleanup NVIC registers */
     58c:	f000 ff46 	bl	141c <cleanup_arm_nvic>
    z_arm_clear_arm_mpu_config();
     590:	f002 ff14 	bl	33bc <z_arm_clear_arm_mpu_config>
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
     594:	f384 880b 	msr	PSPLIM, r4
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
     598:	f384 880a 	msr	MSPLIM, r4
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     59c:	59ab      	ldr	r3, [r5, r6]
     59e:	f383 8808 	msr	MSP, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
     5a2:	f384 8814 	msr	CONTROL, r4
  __ASM volatile ("isb 0xF":::"memory");
     5a6:	f3bf 8f6f 	isb	sy
     5aa:	f3bf 8f6f 	isb	sy
    ((void (*)(void))vt->reset)();
     5ae:	687b      	ldr	r3, [r7, #4]
     5b0:	4798      	blx	r3

    do_boot(&rsp);

    mcuboot_status_change(MCUBOOT_STATUS_BOOT_FAILED);

    BOOT_LOG_ERR("Never should get here");
     5b2:	2145      	movs	r1, #69	; 0x45
     5b4:	480d      	ldr	r0, [pc, #52]	; (5ec <FIH_LABEL_FIH_CALL_END_1137+0xb6>)
     5b6:	f007 fdaf 	bl	8118 <z_log_minimal_printk>
    while (1)
     5ba:	e7fe      	b.n	5ba <FIH_LABEL_FIH_CALL_END_1137+0x84>
     5bc:	50018000 	.word	0x50018000
     5c0:	6e524635 	.word	0x6e524635
     5c4:	00009c43 	.word	0x00009c43
     5c8:	00009538 	.word	0x00009538
     5cc:	00009838 	.word	0x00009838
     5d0:	00009c5c 	.word	0x00009c5c
     5d4:	00009848 	.word	0x00009848
     5d8:	2000c820 	.word	0x2000c820
     5dc:	00009c80 	.word	0x00009c80
     5e0:	00009ca3 	.word	0x00009ca3
     5e4:	00009cd2 	.word	0x00009cd2
     5e8:	00009cf7 	.word	0x00009cf7
     5ec:	00009d2a 	.word	0x00009d2a

000005f0 <flash_device_base>:

static const struct device *flash_dev = DEVICE_DT_GET(FLASH_DEVICE_NODE);

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
    if (fd_id != FLASH_DEVICE_ID) {
     5f0:	4602      	mov	r2, r0
{
     5f2:	b508      	push	{r3, lr}
    if (fd_id != FLASH_DEVICE_ID) {
     5f4:	b138      	cbz	r0, 606 <flash_device_base+0x16>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
     5f6:	4805      	ldr	r0, [pc, #20]	; (60c <flash_device_base+0x1c>)
     5f8:	2300      	movs	r3, #0
     5fa:	2145      	movs	r1, #69	; 0x45
     5fc:	f007 fd8c 	bl	8118 <z_log_minimal_printk>
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
     600:	f06f 0015 	mvn.w	r0, #21
    }
    *ret = FLASH_DEVICE_BASE;
    return 0;
}
     604:	bd08      	pop	{r3, pc}
    *ret = FLASH_DEVICE_BASE;
     606:	6008      	str	r0, [r1, #0]
    return 0;
     608:	e7fc      	b.n	604 <flash_device_base+0x14>
     60a:	bf00      	nop
     60c:	00009d4d 	.word	0x00009d4d

00000610 <flash_area_sector_from_off>:
    return -EINVAL;
}
#endif

int flash_area_sector_from_off(off_t off, struct flash_sector *sector)
{
     610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     612:	460c      	mov	r4, r1
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
     614:	4601      	mov	r1, r0
     616:	aa01      	add	r2, sp, #4
     618:	4804      	ldr	r0, [pc, #16]	; (62c <flash_area_sector_from_off+0x1c>)
     61a:	f008 fa87 	bl	8b2c <z_impl_flash_get_page_info_by_offs>
    int rc;
    struct flash_pages_info page;

    rc = flash_get_page_info_by_offs(flash_dev, off, &page);
    if (rc) {
     61e:	b918      	cbnz	r0, 628 <flash_area_sector_from_off+0x18>
        return rc;
    }

    sector->fs_off = page.start_offset;
     620:	9b01      	ldr	r3, [sp, #4]
     622:	6023      	str	r3, [r4, #0]
    sector->fs_size = page.size;
     624:	9b02      	ldr	r3, [sp, #8]
     626:	6063      	str	r3, [r4, #4]

    return rc;
}
     628:	b004      	add	sp, #16
     62a:	bd10      	pop	{r4, pc}
     62c:	00009568 	.word	0x00009568

00000630 <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     634:	461e      	mov	r6, r3
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    fih_int valid_signature = FIH_FAILURE;
     636:	4b83      	ldr	r3, [pc, #524]	; (844 <FIH_LABEL_FIH_CALL_END_1023+0x20>)
{
     638:	b0db      	sub	sp, #364	; 0x16c
     63a:	4614      	mov	r4, r2
     63c:	e9dd 5766 	ldrd	r5, r7, [sp, #408]	; 0x198
    fih_int valid_signature = FIH_FAILURE;
     640:	f8d3 8000 	ldr.w	r8, [r3]
{
     644:	f8dd b1a0 	ldr.w	fp, [sp, #416]	; 0x1a0
}

/* Enable and disable cc310 to reduce power consumption */
static inline void cc310_sha256_init(nrf_cc310_bl_hash_context_sha256_t * ctx)
{
    cc310_init();
     648:	f000 feb2 	bl	13b0 <cc310_init>
    NRF_CRYPTOCELL->ENABLE=1;
     64c:	2201      	movs	r2, #1
     64e:	4b7e      	ldr	r3, [pc, #504]	; (848 <FIH_LABEL_FIH_CALL_END_1023+0x24>)
    nrf_cc310_enable();
    nrf_cc310_bl_hash_sha256_init(ctx);
     650:	a83a      	add	r0, sp, #232	; 0xe8
    NRF_CRYPTOCELL->ENABLE=1;
     652:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    nrf_cc310_bl_hash_sha256_init(ctx);
     656:	f005 ffb3 	bl	65c0 <nrf_cc310_bl_hash_sha256_init>
    if (seed && (seed_len > 0)) {
     65a:	b135      	cbz	r5, 66a <bootutil_img_validate+0x3a>
     65c:	2f00      	cmp	r7, #0
     65e:	dd04      	ble.n	66a <bootutil_img_validate+0x3a>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    cc310_sha256_update(ctx, data, data_len);
     660:	463a      	mov	r2, r7
     662:	4629      	mov	r1, r5
     664:	a83a      	add	r0, sp, #232	; 0xe8
     666:	f007 fc09 	bl	7e7c <cc310_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     66a:	f04f 0900 	mov.w	r9, #0
    size += hdr->ih_protect_tlv_size;
     66e:	8963      	ldrh	r3, [r4, #10]
    size = hdr_size = hdr->ih_hdr_size;
     670:	8927      	ldrh	r7, [r4, #8]
     672:	441f      	add	r7, r3
    size += hdr->ih_protect_tlv_size;
     674:	68e3      	ldr	r3, [r4, #12]
     676:	441f      	add	r7, r3
    for (off = 0; off < size; off += blk_sz) {
     678:	454f      	cmp	r7, r9
     67a:	d825      	bhi.n	6c8 <bootutil_img_validate+0x98>
}

static inline void cc310_sha256_finalize(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    nrf_cc310_bl_hash_sha256_finalize(ctx,
     67c:	a90d      	add	r1, sp, #52	; 0x34
     67e:	a83a      	add	r0, sp, #232	; 0xe8
     680:	f006 f810 	bl	66a4 <nrf_cc310_bl_hash_sha256_finalize>
    NRF_CRYPTOCELL->ENABLE=0;
     684:	2200      	movs	r2, #0
     686:	4b70      	ldr	r3, [pc, #448]	; (848 <FIH_LABEL_FIH_CALL_END_1023+0x24>)
     688:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
     68c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     690:	f1bb 0f00 	cmp.w	fp, #0
     694:	d004      	beq.n	6a0 <bootutil_img_validate+0x70>
        memcpy(out_hash, hash, 32);
     696:	2220      	movs	r2, #32
     698:	4658      	mov	r0, fp
     69a:	a90d      	add	r1, sp, #52	; 0x34
     69c:	f008 f8b0 	bl	8800 <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     6a0:	2300      	movs	r3, #0
     6a2:	4632      	mov	r2, r6
     6a4:	9300      	str	r3, [sp, #0]
     6a6:	4621      	mov	r1, r4
     6a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
     6ac:	a807      	add	r0, sp, #28
     6ae:	f007 f893 	bl	77d8 <bootutil_tlv_iter_begin>
    if (rc) {
     6b2:	4605      	mov	r5, r0
     6b4:	b9d0      	cbnz	r0, 6ec <bootutil_img_validate+0xbc>
        goto out;
    }

    if (it.tlv_end > bootutil_max_image_size(fap)) {
     6b6:	4630      	mov	r0, r6
     6b8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
     6ba:	f000 f983 	bl	9c4 <bootutil_max_image_size>
     6be:	4284      	cmp	r4, r0
     6c0:	d91f      	bls.n	702 <bootutil_img_validate+0xd2>
        rc = -1;
     6c2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
     6c6:	e011      	b.n	6ec <bootutil_img_validate+0xbc>
        if (blk_sz > tmp_buf_sz) {
     6c8:	9b65      	ldr	r3, [sp, #404]	; 0x194
        blk_sz = size - off;
     6ca:	eba7 0a09 	sub.w	sl, r7, r9
     6ce:	459a      	cmp	sl, r3
     6d0:	bf28      	it	cs
     6d2:	469a      	movcs	sl, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     6d4:	4649      	mov	r1, r9
     6d6:	4653      	mov	r3, sl
     6d8:	4630      	mov	r0, r6
     6da:	9a64      	ldr	r2, [sp, #400]	; 0x190
     6dc:	f007 fd2a 	bl	8134 <flash_area_read>
        if (rc) {
     6e0:	4605      	mov	r5, r0
     6e2:	b138      	cbz	r0, 6f4 <bootutil_img_validate+0xc4>
     6e4:	2200      	movs	r2, #0
     6e6:	4b58      	ldr	r3, [pc, #352]	; (848 <FIH_LABEL_FIH_CALL_END_1023+0x24>)
     6e8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     6ec:	4628      	mov	r0, r5
     6ee:	b05b      	add	sp, #364	; 0x16c
     6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     6f4:	4652      	mov	r2, sl
     6f6:	9964      	ldr	r1, [sp, #400]	; 0x190
     6f8:	a83a      	add	r0, sp, #232	; 0xe8
     6fa:	f007 fbbf 	bl	7e7c <cc310_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     6fe:	44d1      	add	r9, sl
     700:	e7ba      	b.n	678 <bootutil_img_validate+0x48>
    int key_id = -1;
     702:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     706:	f8df b14c 	ldr.w	fp, [pc, #332]	; 854 <FIH_LABEL_FIH_CALL_END_1023+0x30>
     70a:	f8df 913c 	ldr.w	r9, [pc, #316]	; 848 <FIH_LABEL_FIH_CALL_END_1023+0x24>
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     70e:	f10d 0316 	add.w	r3, sp, #22
     712:	aa05      	add	r2, sp, #20
     714:	a906      	add	r1, sp, #24
     716:	a807      	add	r0, sp, #28
     718:	f007 f8ac 	bl	7874 <bootutil_tlv_iter_next>
        if (rc < 0) {
     71c:	1e04      	subs	r4, r0, #0
     71e:	f2c0 808f 	blt.w	840 <FIH_LABEL_FIH_CALL_END_1023+0x1c>
        } else if (rc > 0) {
     722:	f040 8082 	bne.w	82a <FIH_LABEL_FIH_CALL_END_1023+0x6>
        if (type == IMAGE_TLV_SHA256) {
     726:	f8bd a016 	ldrh.w	sl, [sp, #22]
     72a:	f1ba 0f10 	cmp.w	sl, #16
     72e:	d118      	bne.n	762 <FIH_LABEL_FIH_CALL_END_703+0xc>
            if (len != sizeof(hash)) {
     730:	f8bd 5014 	ldrh.w	r5, [sp, #20]
     734:	2d20      	cmp	r5, #32
     736:	d1c4      	bne.n	6c2 <bootutil_img_validate+0x92>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     738:	462b      	mov	r3, r5
     73a:	4630      	mov	r0, r6
     73c:	9906      	ldr	r1, [sp, #24]
     73e:	aa3a      	add	r2, sp, #232	; 0xe8
     740:	f007 fcf8 	bl	8134 <flash_area_read>
            if (rc) {
     744:	4604      	mov	r4, r0
     746:	2800      	cmp	r0, #0
     748:	d17a      	bne.n	840 <FIH_LABEL_FIH_CALL_END_1023+0x1c>

0000074a <FIH_LABEL_FIH_CALL_START_686>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     74a:	462a      	mov	r2, r5
     74c:	a93a      	add	r1, sp, #232	; 0xe8
     74e:	a80d      	add	r0, sp, #52	; 0x34
     750:	f007 f908 	bl	7964 <boot_fih_memequal>
     754:	4605      	mov	r5, r0

00000756 <FIH_LABEL_FIH_CALL_END_703>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     756:	4b3d      	ldr	r3, [pc, #244]	; (84c <FIH_LABEL_FIH_CALL_END_1023+0x28>)
     758:	681b      	ldr	r3, [r3, #0]
     75a:	4283      	cmp	r3, r0
     75c:	d1c6      	bne.n	6ec <bootutil_img_validate+0xbc>
            sha256_valid = 1;
     75e:	2501      	movs	r5, #1
     760:	e7d5      	b.n	70e <bootutil_img_validate+0xde>
        } else if (type == IMAGE_TLV_KEYHASH) {
     762:	f1ba 0f01 	cmp.w	sl, #1
     766:	d13e      	bne.n	7e6 <FIH_LABEL_FIH_CALL_END_703+0x90>
            if (len > 32) {
     768:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     76c:	2b20      	cmp	r3, #32
     76e:	d8a8      	bhi.n	6c2 <bootutil_img_validate+0x92>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     770:	4630      	mov	r0, r6
     772:	9906      	ldr	r1, [sp, #24]
     774:	aa3a      	add	r2, sp, #232	; 0xe8
     776:	f007 fcdd 	bl	8134 <flash_area_read>
            if (rc) {
     77a:	4604      	mov	r4, r0
     77c:	2800      	cmp	r0, #0
     77e:	d15f      	bne.n	840 <FIH_LABEL_FIH_CALL_END_1023+0x1c>
            key_id = bootutil_find_key(buf, len);
     780:	f89d 3014 	ldrb.w	r3, [sp, #20]
    if (keyhash_len > 32) {
     784:	2b20      	cmp	r3, #32
            key_id = bootutil_find_key(buf, len);
     786:	9302      	str	r3, [sp, #8]
    if (keyhash_len > 32) {
     788:	d809      	bhi.n	79e <FIH_LABEL_FIH_CALL_END_703+0x48>
    for (i = 0; i < bootutil_key_cnt; i++) {
     78a:	f8db 3000 	ldr.w	r3, [fp]
     78e:	4f30      	ldr	r7, [pc, #192]	; (850 <FIH_LABEL_FIH_CALL_END_1023+0x2c>)
     790:	9303      	str	r3, [sp, #12]
     792:	9b03      	ldr	r3, [sp, #12]
     794:	429c      	cmp	r4, r3
     796:	db05      	blt.n	7a4 <FIH_LABEL_FIH_CALL_END_703+0x4e>
     798:	2300      	movs	r3, #0
     79a:	f8c9 3500 	str.w	r3, [r9, #1280]	; 0x500
        return -1;
     79e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     7a2:	e01c      	b.n	7de <FIH_LABEL_FIH_CALL_END_703+0x88>
    cc310_init();
     7a4:	f000 fe04 	bl	13b0 <cc310_init>
    NRF_CRYPTOCELL->ENABLE=1;
     7a8:	f8c9 a500 	str.w	sl, [r9, #1280]	; 0x500
    nrf_cc310_bl_hash_sha256_init(ctx);
     7ac:	a81d      	add	r0, sp, #116	; 0x74
     7ae:	f005 ff07 	bl	65c0 <nrf_cc310_bl_hash_sha256_init>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     7b2:	687a      	ldr	r2, [r7, #4]
     7b4:	a81d      	add	r0, sp, #116	; 0x74
     7b6:	6812      	ldr	r2, [r2, #0]
     7b8:	f857 1b08 	ldr.w	r1, [r7], #8
     7bc:	f007 fb5e 	bl	7e7c <cc310_sha256_update>
    nrf_cc310_bl_hash_sha256_finalize(ctx,
     7c0:	a915      	add	r1, sp, #84	; 0x54
     7c2:	a81d      	add	r0, sp, #116	; 0x74
     7c4:	f005 ff6e 	bl	66a4 <nrf_cc310_bl_hash_sha256_finalize>
    NRF_CRYPTOCELL->ENABLE=0;
     7c8:	2200      	movs	r2, #0
     7ca:	f8c9 2500 	str.w	r2, [r9, #1280]	; 0x500
        if (!memcmp(hash, keyhash, keyhash_len)) {
     7ce:	9a02      	ldr	r2, [sp, #8]
     7d0:	a93a      	add	r1, sp, #232	; 0xe8
     7d2:	a815      	add	r0, sp, #84	; 0x54
     7d4:	f007 ffed 	bl	87b2 <memcmp>
     7d8:	b918      	cbnz	r0, 7e2 <FIH_LABEL_FIH_CALL_END_703+0x8c>
     7da:	f8c9 0500 	str.w	r0, [r9, #1280]	; 0x500
            key_id = bootutil_find_key(buf, len);
     7de:	4627      	mov	r7, r4
     7e0:	e795      	b.n	70e <bootutil_img_validate+0xde>
    for (i = 0; i < bootutil_key_cnt; i++) {
     7e2:	3401      	adds	r4, #1
     7e4:	e7d5      	b.n	792 <FIH_LABEL_FIH_CALL_END_703+0x3c>
        } else if (type == EXPECTED_SIG_TLV) {
     7e6:	f1ba 0f22 	cmp.w	sl, #34	; 0x22
     7ea:	d190      	bne.n	70e <bootutil_img_validate+0xde>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     7ec:	1c7b      	adds	r3, r7, #1
     7ee:	d08e      	beq.n	70e <bootutil_img_validate+0xde>
     7f0:	f8db 3000 	ldr.w	r3, [fp]
     7f4:	42bb      	cmp	r3, r7
     7f6:	dd15      	ble.n	824 <FIH_LABEL_FIH_CALL_END_1023>
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     7f8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     7fc:	2b80      	cmp	r3, #128	; 0x80
     7fe:	f63f af60 	bhi.w	6c2 <bootutil_img_validate+0x92>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     802:	4630      	mov	r0, r6
     804:	9906      	ldr	r1, [sp, #24]
     806:	aa3a      	add	r2, sp, #232	; 0xe8
     808:	f007 fc94 	bl	8134 <flash_area_read>
            if (rc) {
     80c:	4604      	mov	r4, r0
     80e:	b9b8      	cbnz	r0, 840 <FIH_LABEL_FIH_CALL_END_1023+0x1c>

00000810 <FIH_LABEL_FIH_CALL_START_1002>:
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     810:	b2ff      	uxtb	r7, r7
     812:	2120      	movs	r1, #32
     814:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     818:	9700      	str	r7, [sp, #0]
     81a:	aa3a      	add	r2, sp, #232	; 0xe8
     81c:	a80d      	add	r0, sp, #52	; 0x34
     81e:	f000 f81b 	bl	858 <bootutil_verify_sig>
     822:	4680      	mov	r8, r0

00000824 <FIH_LABEL_FIH_CALL_END_1023>:
            key_id = -1;
     824:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
     828:	e771      	b.n	70e <bootutil_img_validate+0xde>
    if (rc) {
     82a:	b145      	cbz	r5, 83e <FIH_LABEL_FIH_CALL_END_1023+0x1a>
    fih_rc = fih_int_encode_zero_equality(fih_not_eq(valid_signature,
     82c:	4b07      	ldr	r3, [pc, #28]	; (84c <FIH_LABEL_FIH_CALL_END_1023+0x28>)
 * value that is not FIH_SUCCESS
 */
__attribute__((always_inline)) inline
fih_int fih_int_encode_zero_equality(int x)
{
    if (x) {
     82e:	681b      	ldr	r3, [r3, #0]
     830:	4543      	cmp	r3, r8
        return FIH_FAILURE;
     832:	bf1c      	itt	ne
     834:	4b03      	ldrne	r3, [pc, #12]	; (844 <FIH_LABEL_FIH_CALL_END_1023+0x20>)
     836:	f8d3 8000 	ldrne.w	r8, [r3]
        return -1;
     83a:	4645      	mov	r5, r8
     83c:	e756      	b.n	6ec <bootutil_img_validate+0xbc>
    rc = !sha256_valid;
     83e:	2401      	movs	r4, #1
        return -1;
     840:	4625      	mov	r5, r4
     842:	e753      	b.n	6ec <bootutil_img_validate+0xbc>
     844:	2000c4e8 	.word	0x2000c4e8
     848:	50840000 	.word	0x50840000
     84c:	2000c820 	.word	0x2000c820
     850:	00009854 	.word	0x00009854
     854:	00009850 	.word	0x00009850

00000858 <bootutil_verify_sig>:
#endif /* not MCUBOOT_ECDSA_NEED_ASN1_SIG */

int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     85c:	b096      	sub	sp, #88	; 0x58
     85e:	4617      	mov	r7, r2
     860:	461d      	mov	r5, r3
     862:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70

#ifndef MCUBOOT_ECDSA_NEED_ASN1_SIG
    uint8_t signature[2 * NUM_ECC_BYTES];
#endif

    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     866:	4b35      	ldr	r3, [pc, #212]	; (93c <bootutil_verify_sig+0xe4>)
{
     868:	460e      	mov	r6, r1
    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     86a:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
    end = pubkey + *bootutil_keys[key_id].len;
     86e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
     872:	685b      	ldr	r3, [r3, #4]
    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     874:	9101      	str	r1, [sp, #4]
{
     876:	4680      	mov	r8, r0
    end = pubkey + *bootutil_keys[key_id].len;
     878:	6818      	ldr	r0, [r3, #0]
    if (mbedtls_asn1_get_tag(cp, end, &len,
     87a:	aa02      	add	r2, sp, #8
     87c:	4401      	add	r1, r0
     87e:	2330      	movs	r3, #48	; 0x30
     880:	a801      	add	r0, sp, #4
     882:	f007 fa89 	bl	7d98 <mbedtls_asn1_get_tag>
     886:	b120      	cbz	r0, 892 <bootutil_verify_sig+0x3a>
    rc = bootutil_parse_eckey(&ctx, &pubkey, end);
#else
    rc = bootutil_import_key(&pubkey, end);
#endif
    if (rc) {
        return -1;
     888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif /* CY_MBEDTLS_HW_ACCELERATION */

    bootutil_ecdsa_p256_drop(&ctx);

    return rc;
}
     88c:	b016      	add	sp, #88	; 0x58
     88e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    end = *cp + len;
     892:	e9dd 4301 	ldrd	r4, r3, [sp, #4]
     896:	441c      	add	r4, r3
    if (mbedtls_asn1_get_alg(cp, end, &alg, &param)) {
     898:	4621      	mov	r1, r4
     89a:	ab06      	add	r3, sp, #24
     89c:	aa03      	add	r2, sp, #12
     89e:	a801      	add	r0, sp, #4
     8a0:	f007 faa2 	bl	7de8 <mbedtls_asn1_get_alg>
     8a4:	2800      	cmp	r0, #0
     8a6:	d1ef      	bne.n	888 <bootutil_verify_sig+0x30>
    if (alg.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_pubkey_oid) - 1 ||
     8a8:	9a04      	ldr	r2, [sp, #16]
     8aa:	2a07      	cmp	r2, #7
     8ac:	d1ec      	bne.n	888 <bootutil_verify_sig+0x30>
        memcmp(alg.MBEDTLS_CONTEXT_MEMBER(p), ec_pubkey_oid, sizeof(ec_pubkey_oid) - 1)) {
     8ae:	4924      	ldr	r1, [pc, #144]	; (940 <bootutil_verify_sig+0xe8>)
     8b0:	9805      	ldr	r0, [sp, #20]
     8b2:	f007 ff7e 	bl	87b2 <memcmp>
    if (alg.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_pubkey_oid) - 1 ||
     8b6:	2800      	cmp	r0, #0
     8b8:	d1e6      	bne.n	888 <bootutil_verify_sig+0x30>
    if (param.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_secp256r1_oid) - 1 ||
     8ba:	9a07      	ldr	r2, [sp, #28]
     8bc:	2a08      	cmp	r2, #8
     8be:	d1e3      	bne.n	888 <bootutil_verify_sig+0x30>
        memcmp(param.MBEDTLS_CONTEXT_MEMBER(p), ec_secp256r1_oid, sizeof(ec_secp256r1_oid) - 1)) {
     8c0:	4920      	ldr	r1, [pc, #128]	; (944 <bootutil_verify_sig+0xec>)
     8c2:	9808      	ldr	r0, [sp, #32]
     8c4:	f007 ff75 	bl	87b2 <memcmp>
    if (param.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_secp256r1_oid) - 1 ||
     8c8:	2800      	cmp	r0, #0
     8ca:	d1dd      	bne.n	888 <bootutil_verify_sig+0x30>
    if (mbedtls_asn1_get_bitstring_null(cp, end, &len)) {
     8cc:	4621      	mov	r1, r4
     8ce:	aa02      	add	r2, sp, #8
     8d0:	a801      	add	r0, sp, #4
     8d2:	f007 fa75 	bl	7dc0 <mbedtls_asn1_get_bitstring_null>
     8d6:	2800      	cmp	r0, #0
     8d8:	d1d6      	bne.n	888 <bootutil_verify_sig+0x30>
    if (*cp + len != end) {
     8da:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
     8de:	4413      	add	r3, r2
     8e0:	429c      	cmp	r4, r3
     8e2:	d1d1      	bne.n	888 <bootutil_verify_sig+0x30>
    if (len != 2 * NUM_ECC_BYTES + 1) {
     8e4:	2a41      	cmp	r2, #65	; 0x41
     8e6:	d1cf      	bne.n	888 <bootutil_verify_sig+0x30>
    rc = bootutil_decode_sig(signature, sig, sig + slen);
     8e8:	443d      	add	r5, r7
    rc = mbedtls_asn1_get_tag(&cp, end, &len,
     8ea:	2330      	movs	r3, #48	; 0x30
     8ec:	4629      	mov	r1, r5
     8ee:	aa03      	add	r2, sp, #12
     8f0:	a802      	add	r0, sp, #8
     8f2:	9702      	str	r7, [sp, #8]
     8f4:	f007 fa50 	bl	7d98 <mbedtls_asn1_get_tag>
    if (rc) {
     8f8:	2800      	cmp	r0, #0
     8fa:	d1c5      	bne.n	888 <bootutil_verify_sig+0x30>
    if (cp + len > end) {
     8fc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
     900:	4413      	add	r3, r2
     902:	429d      	cmp	r5, r3
     904:	d3c0      	bcc.n	888 <bootutil_verify_sig+0x30>
    rc = bootutil_read_bigint(signature, &cp, end);
     906:	462a      	mov	r2, r5
     908:	a902      	add	r1, sp, #8
     90a:	a806      	add	r0, sp, #24
     90c:	f006 fffe 	bl	790c <bootutil_read_bigint>
    if (rc) {
     910:	2800      	cmp	r0, #0
     912:	d1b9      	bne.n	888 <bootutil_verify_sig+0x30>
    rc = bootutil_read_bigint(signature + NUM_ECC_BYTES, &cp, end);
     914:	462a      	mov	r2, r5
     916:	a902      	add	r1, sp, #8
     918:	a80e      	add	r0, sp, #56	; 0x38
     91a:	f006 fff7 	bl	790c <bootutil_read_bigint>
    if (rc) {
     91e:	2800      	cmp	r0, #0
     920:	d1b2      	bne.n	888 <bootutil_verify_sig+0x30>
    if (hlen != NUM_ECC_BYTES) {
     922:	2e20      	cmp	r6, #32
     924:	d1b0      	bne.n	888 <bootutil_verify_sig+0x30>
    rc = bootutil_ecdsa_p256_verify(&ctx, pubkey, end - pubkey, hash, signature,
     926:	9901      	ldr	r1, [sp, #4]
    (void)ctx;
    (void)pk_len;
    (void)sig_len;

    /* Only support uncompressed keys. */
    if (pk[0] != 0x04) {
     928:	780b      	ldrb	r3, [r1, #0]
     92a:	2b04      	cmp	r3, #4
     92c:	d1ac      	bne.n	888 <bootutil_verify_sig+0x30>
        return -1;
    }
    pk++;

    return cc310_ecdsa_verify_secp256r1(hash, pk, sig, BOOTUTIL_CRYPTO_ECDSA_P256_HASH_SIZE);
     92e:	4633      	mov	r3, r6
     930:	4640      	mov	r0, r8
     932:	aa06      	add	r2, sp, #24
     934:	3101      	adds	r1, #1
     936:	f000 fd53 	bl	13e0 <cc310_ecdsa_verify_secp256r1>
     93a:	e7a7      	b.n	88c <bootutil_verify_sig+0x34>
     93c:	00009854 	.word	0x00009854
     940:	00009d7c 	.word	0x00009d7c
     944:	00009d73 	.word	0x00009d73

00000948 <boot_read_swap_size>:
    return -1;
}

int
boot_read_swap_size(int image_index, uint32_t *swap_size)
{
     948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t areas[2] = {
     94c:	2303      	movs	r3, #3
{
     94e:	b086      	sub	sp, #24
     950:	460d      	mov	r5, r1
     952:	466f      	mov	r7, sp
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     954:	2600      	movs	r6, #0
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
     956:	f8df 8068 	ldr.w	r8, [pc, #104]	; 9c0 <boot_read_swap_size+0x78>
    uint8_t areas[2] = {
     95a:	f8ad 3000 	strh.w	r3, [sp]
        rc = flash_area_open(areas[i], fap);
     95e:	f817 0b01 	ldrb.w	r0, [r7], #1
     962:	a901      	add	r1, sp, #4
     964:	f001 fa52 	bl	1e0c <flash_area_open>
        if (rc != 0) {
     968:	4604      	mov	r4, r0
     96a:	b9a0      	cbnz	r0, 996 <boot_read_swap_size+0x4e>
        off = boot_magic_off(*fap);
     96c:	9801      	ldr	r0, [sp, #4]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     96e:	2310      	movs	r3, #16
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
     970:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     972:	aa02      	add	r2, sp, #8
     974:	3910      	subs	r1, #16
     976:	f007 fbdd 	bl	8134 <flash_area_read>
     97a:	4604      	mov	r4, r0
        flash_area_close(*fap);
     97c:	9801      	ldr	r0, [sp, #4]
     97e:	f007 fbd8 	bl	8132 <flash_area_close>
        if (rc != 0) {
     982:	b944      	cbnz	r4, 996 <boot_read_swap_size+0x4e>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
     984:	2210      	movs	r2, #16
     986:	4641      	mov	r1, r8
     988:	a802      	add	r0, sp, #8
     98a:	f007 ff12 	bl	87b2 <memcmp>
     98e:	b140      	cbz	r0, 9a2 <boot_read_swap_size+0x5a>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     990:	b12e      	cbz	r6, 99e <boot_read_swap_size+0x56>
    return -1;
     992:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
        flash_area_close(fap);
    }

    return rc;
}
     996:	4620      	mov	r0, r4
     998:	b006      	add	sp, #24
     99a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     99e:	2601      	movs	r6, #1
     9a0:	e7dd      	b.n	95e <boot_read_swap_size+0x16>
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
     9a2:	9801      	ldr	r0, [sp, #4]
     9a4:	f008 fa8c 	bl	8ec0 <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
     9a8:	2304      	movs	r3, #4
     9aa:	f1a0 0108 	sub.w	r1, r0, #8
     9ae:	462a      	mov	r2, r5
     9b0:	9801      	ldr	r0, [sp, #4]
     9b2:	f007 fbbf 	bl	8134 <flash_area_read>
     9b6:	4604      	mov	r4, r0
        flash_area_close(fap);
     9b8:	9801      	ldr	r0, [sp, #4]
     9ba:	f007 fbba 	bl	8132 <flash_area_close>
     9be:	e7ea      	b.n	996 <boot_read_swap_size+0x4e>
     9c0:	00009bfc 	.word	0x00009bfc

000009c4 <bootutil_max_image_size>:
    return 0;
}
#endif

uint32_t bootutil_max_image_size(const struct flash_area *fap)
{
     9c4:	b507      	push	{r0, r1, r2, lr}
#if defined(MCUBOOT_SWAP_USING_SCRATCH)
    return boot_status_off(fap);
#elif defined(MCUBOOT_SWAP_USING_MOVE)
    struct flash_sector sector;
    /* get the last sector offset */
    int rc = flash_area_sector_from_off(boot_status_off(fap), &sector);
     9c6:	f006 ffe1 	bl	798c <boot_status_off>
     9ca:	4669      	mov	r1, sp
     9cc:	f7ff fe20 	bl	610 <flash_area_sector_from_off>
    if (rc) {
     9d0:	b138      	cbz	r0, 9e2 <bootutil_max_image_size+0x1e>
        BOOT_LOG_ERR("Unable to determine flash sector of the image trailer");
     9d2:	4805      	ldr	r0, [pc, #20]	; (9e8 <bootutil_max_image_size+0x24>)
     9d4:	2145      	movs	r1, #69	; 0x45
     9d6:	f007 fb9f 	bl	8118 <z_log_minimal_printk>
        return 0; /* Returning of zero here should cause any check which uses
     9da:	2000      	movs	r0, #0
#elif defined(MCUBOOT_DIRECT_XIP)
    return boot_swap_info_off(fap);
#elif defined(MCUBOOT_RAM_LOAD)
    return boot_swap_info_off(fap);
#endif
}
     9dc:	b003      	add	sp, #12
     9de:	f85d fb04 	ldr.w	pc, [sp], #4
 */
uint8_t flash_area_erased_val(const struct flash_area *fap);

static inline uint32_t flash_sector_get_off(const struct flash_sector *fs)
{
	return fs->fs_off;
     9e2:	9800      	ldr	r0, [sp, #0]
    return flash_sector_get_off(&sector);
     9e4:	e7fa      	b.n	9dc <bootutil_max_image_size+0x18>
     9e6:	bf00      	nop
     9e8:	00009d84 	.word	0x00009d84

000009ec <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         1 (or its fih_int encoded form)  if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
     9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
     9f0:	4b35      	ldr	r3, [pc, #212]	; (ac8 <FIH_LABEL_FIH_CALL_END_437+0x76>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     9f2:	b088      	sub	sp, #32
     9f4:	4606      	mov	r6, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9f6:	2000      	movs	r0, #0
boot_validate_slot(struct boot_loader_state *state, int slot,
     9f8:	460c      	mov	r4, r1
    fih_int fih_rc = FIH_FAILURE;
     9fa:	681d      	ldr	r5, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9fc:	f006 fee0 	bl	77c0 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     a00:	a906      	add	r1, sp, #24
     a02:	b2c0      	uxtb	r0, r0
     a04:	f001 fa02 	bl	1e0c <flash_area_open>
    if (rc != 0) {
     a08:	2800      	cmp	r0, #0
     a0a:	d157      	bne.n	abc <FIH_LABEL_FIH_CALL_END_437+0x6a>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     a0c:	4621      	mov	r1, r4
     a0e:	f006 fed7 	bl	77c0 <flash_area_id_from_multi_image_slot>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     a12:	252c      	movs	r5, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     a14:	a907      	add	r1, sp, #28
     a16:	b2c0      	uxtb	r0, r0
     a18:	fb05 6504 	mla	r5, r5, r4, r6
     a1c:	f001 f9f6 	bl	1e0c <flash_area_open>
    if (rc != 0) {
     a20:	2800      	cmp	r0, #0
     a22:	d033      	beq.n	a8c <FIH_LABEL_FIH_CALL_END_437+0x3a>
        FIH_RET(fih_rc);
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     a24:	272c      	movs	r7, #44	; 0x2c
     a26:	4367      	muls	r7, r4
     a28:	eb06 0807 	add.w	r8, r6, r7
     a2c:	f8d8 1010 	ldr.w	r1, [r8, #16]
#endif
    BOOT_HOOK_CALL_FIH(boot_image_check_hook, fih_int_encode(BOOT_HOOK_REGULAR),
                       fih_rc, BOOT_CURR_IMG(state), slot);
    if (fih_eq(fih_rc, fih_int_encode(BOOT_HOOK_REGULAR)))
    {
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
     a30:	9b06      	ldr	r3, [sp, #24]
    if (boot_check_header_erased(state, slot) == 0 ||
     a32:	f011 0110 	ands.w	r1, r1, #16
     a36:	d138      	bne.n	aaa <FIH_LABEL_FIH_CALL_END_437+0x58>

00000a38 <FIH_LABEL_FIH_CALL_START_388>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     a38:	f44f 7280 	mov.w	r2, #256	; 0x100
     a3c:	9201      	str	r2, [sp, #4]
     a3e:	4a23      	ldr	r2, [pc, #140]	; (acc <FIH_LABEL_FIH_CALL_END_437+0x7a>)
     a40:	4608      	mov	r0, r1
     a42:	9200      	str	r2, [sp, #0]
     a44:	e9cd 1103 	strd	r1, r1, [sp, #12]
     a48:	462a      	mov	r2, r5
     a4a:	9102      	str	r1, [sp, #8]
     a4c:	f7ff fdf0 	bl	630 <bootutil_img_validate>
     a50:	4605      	mov	r5, r0

00000a52 <FIH_LABEL_FIH_CALL_END_437>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     a52:	4b1f      	ldr	r3, [pc, #124]	; (ad0 <FIH_LABEL_FIH_CALL_END_437+0x7e>)
     a54:	59f2      	ldr	r2, [r6, r7]
    }
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     a56:	9806      	ldr	r0, [sp, #24]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     a58:	429a      	cmp	r2, r3
     a5a:	d10c      	bne.n	a76 <FIH_LABEL_FIH_CALL_END_437+0x24>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     a5c:	f8d8 200c 	ldr.w	r2, [r8, #12]
     a60:	f8b8 3008 	ldrh.w	r3, [r8, #8]
    if (a > UINT32_MAX - b) {
     a64:	189b      	adds	r3, r3, r2
     a66:	d206      	bcs.n	a76 <FIH_LABEL_FIH_CALL_END_437+0x24>
    if (size >= flash_area_get_size(fap)) {
     a68:	6882      	ldr	r2, [r0, #8]
     a6a:	4293      	cmp	r3, r2
     a6c:	d203      	bcs.n	a76 <FIH_LABEL_FIH_CALL_END_437+0x24>
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     a6e:	4b19      	ldr	r3, [pc, #100]	; (ad4 <FIH_LABEL_FIH_CALL_END_437+0x82>)
     a70:	681b      	ldr	r3, [r3, #0]
     a72:	42ab      	cmp	r3, r5
     a74:	d01f      	beq.n	ab6 <FIH_LABEL_FIH_CALL_END_437+0x64>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     a76:	b32c      	cbz	r4, ac4 <FIH_LABEL_FIH_CALL_END_437+0x72>
            flash_area_erase(fap, 0, flash_area_get_size(fap));
     a78:	6882      	ldr	r2, [r0, #8]
     a7a:	2100      	movs	r1, #0
     a7c:	f007 fb84 	bl	8188 <flash_area_erase>
            /* Image is invalid, erase it to prevent further unnecessary
             * attempts to validate and boot it.
             */
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     a80:	4a15      	ldr	r2, [pc, #84]	; (ad8 <FIH_LABEL_FIH_CALL_END_437+0x86>)
     a82:	2145      	movs	r1, #69	; 0x45
     a84:	4815      	ldr	r0, [pc, #84]	; (adc <FIH_LABEL_FIH_CALL_END_437+0x8a>)
     a86:	f007 fb47 	bl	8118 <z_log_minimal_printk>
                     (slot == BOOT_PRIMARY_SLOT) ? "primary" : "secondary");
#endif
        fih_rc = fih_int_encode(1);
        goto out;
     a8a:	e013      	b.n	ab4 <FIH_LABEL_FIH_CALL_END_437+0x62>
    erased_val = flash_area_erased_val(fap);
     a8c:	9807      	ldr	r0, [sp, #28]
     a8e:	f007 fb98 	bl	81c2 <flash_area_erased_val>
     a92:	4607      	mov	r7, r0
    flash_area_close(fap);
     a94:	9807      	ldr	r0, [sp, #28]
     a96:	f007 fb4c 	bl	8132 <flash_area_close>
    for (i = 0; i < len; i++) {
     a9a:	1e6b      	subs	r3, r5, #1
     a9c:	1cea      	adds	r2, r5, #3
        if (val != p[i]) {
     a9e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     aa2:	42b9      	cmp	r1, r7
     aa4:	d1be      	bne.n	a24 <boot_validate_slot.isra.0+0x38>
    for (i = 0; i < len; i++) {
     aa6:	4293      	cmp	r3, r2
     aa8:	d1f9      	bne.n	a9e <FIH_LABEL_FIH_CALL_END_437+0x4c>
        if (slot != BOOT_PRIMARY_SLOT) {
     aaa:	b11c      	cbz	r4, ab4 <FIH_LABEL_FIH_CALL_END_437+0x62>
            swap_erase_trailer_sectors(state, fap);
     aac:	4630      	mov	r0, r6
     aae:	9906      	ldr	r1, [sp, #24]
     ab0:	f007 f851 	bl	7b56 <swap_erase_trailer_sectors>
        fih_rc = fih_int_encode(1);
     ab4:	2501      	movs	r5, #1
        }
    }
#endif

out:
    flash_area_close(fap);
     ab6:	9806      	ldr	r0, [sp, #24]
     ab8:	f007 fb3b 	bl	8132 <flash_area_close>

    FIH_RET(fih_rc);
}
     abc:	4628      	mov	r0, r5
     abe:	b008      	add	sp, #32
     ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     ac4:	4a06      	ldr	r2, [pc, #24]	; (ae0 <FIH_LABEL_FIH_CALL_END_437+0x8e>)
     ac6:	e7dc      	b.n	a82 <FIH_LABEL_FIH_CALL_END_437+0x30>
     ac8:	2000c4e8 	.word	0x2000c4e8
     acc:	2000e8d6 	.word	0x2000e8d6
     ad0:	96f3b83d 	.word	0x96f3b83d
     ad4:	2000c820 	.word	0x2000c820
     ad8:	00009dc7 	.word	0x00009dc7
     adc:	00009dd1 	.word	0x00009dd1
     ae0:	00009dbf 	.word	0x00009dbf

00000ae4 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
     ae4:	b573      	push	{r0, r1, r4, r5, r6, lr}
     ae6:	460d      	mov	r5, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     ae8:	2100      	movs	r1, #0
{
     aea:	4604      	mov	r4, r0
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
     aec:	4628      	mov	r0, r5
    size = copy_size = 0;
     aee:	e9cd 1100 	strd	r1, r1, [sp]
    if (boot_status_is_reset(bs)) {
     af2:	f006 ffef 	bl	7ad4 <boot_status_is_reset>
     af6:	b330      	cbz	r0, b46 <boot_swap_image+0x62>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     af8:	4e16      	ldr	r6, [pc, #88]	; (b54 <boot_swap_image+0x70>)
     afa:	6823      	ldr	r3, [r4, #0]
     afc:	42b3      	cmp	r3, r6
     afe:	d103      	bne.n	b08 <boot_swap_image+0x24>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     b00:	4620      	mov	r0, r4
     b02:	aa01      	add	r2, sp, #4
     b04:	f006 ff7a 	bl	79fc <boot_read_image_size.constprop.0.isra.0>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_ALIGN_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     b08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     b0a:	42b3      	cmp	r3, r6
     b0c:	d104      	bne.n	b18 <boot_swap_image+0x34>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     b0e:	466a      	mov	r2, sp
     b10:	2101      	movs	r1, #1
     b12:	4620      	mov	r0, r4
     b14:	f006 ff72 	bl	79fc <boot_read_image_size.constprop.0.isra.0>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_ALIGN_SIZE);
        }
#endif

        if (size > copy_size) {
     b18:	e9dd 3200 	ldrd	r3, r2, [sp]
     b1c:	4293      	cmp	r3, r2
            copy_size = size;
     b1e:	bf88      	it	hi
     b20:	9301      	strhi	r3, [sp, #4]
        }

        bs->swap_size = copy_size;
     b22:	9b01      	ldr	r3, [sp, #4]
     b24:	60ab      	str	r3, [r5, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
     b26:	9a01      	ldr	r2, [sp, #4]
     b28:	4629      	mov	r1, r5
     b2a:	4620      	mov	r0, r4
     b2c:	f000 fb36 	bl	119c <swap_run>

#ifdef MCUBOOT_VALIDATE_PRIMARY_SLOT
    extern int boot_status_fails;
    if (boot_status_fails > 0) {
     b30:	4b09      	ldr	r3, [pc, #36]	; (b58 <boot_swap_image+0x74>)
     b32:	681a      	ldr	r2, [r3, #0]
     b34:	2a00      	cmp	r2, #0
     b36:	dd03      	ble.n	b40 <boot_swap_image+0x5c>
        BOOT_LOG_WRN("%d status write fails performing the swap",
     b38:	2157      	movs	r1, #87	; 0x57
     b3a:	4808      	ldr	r0, [pc, #32]	; (b5c <boot_swap_image+0x78>)
     b3c:	f007 faec 	bl	8118 <z_log_minimal_printk>
#endif
    rc = BOOT_HOOK_CALL(boot_copy_region_post_hook, 0, BOOT_CURR_IMG(state),
                        BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT), size);

    return 0;
}
     b40:	2000      	movs	r0, #0
     b42:	b002      	add	sp, #8
     b44:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_size(image_index, &bs->swap_size);
     b46:	f105 0108 	add.w	r1, r5, #8
     b4a:	f7ff fefd 	bl	948 <boot_read_swap_size>
        copy_size = bs->swap_size;
     b4e:	68ab      	ldr	r3, [r5, #8]
     b50:	9301      	str	r3, [sp, #4]
     b52:	e7e8      	b.n	b26 <boot_swap_image+0x42>
     b54:	96f3b83d 	.word	0x96f3b83d
     b58:	2000dc84 	.word	0x2000dc84
     b5c:	00009df9 	.word	0x00009df9

00000b60 <boot_copy_region>:
{
     b60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b64:	4688      	mov	r8, r1
     b66:	4691      	mov	r9, r2
     b68:	469a      	mov	sl, r3
    bytes_copied = 0;
     b6a:	2600      	movs	r6, #0
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b6c:	f8df b070 	ldr.w	fp, [pc, #112]	; be0 <boot_copy_region+0x80>
     b70:	4c19      	ldr	r4, [pc, #100]	; (bd8 <boot_copy_region+0x78>)
     b72:	4d1a      	ldr	r5, [pc, #104]	; (bdc <boot_copy_region+0x7c>)
    while (bytes_copied < sz) {
     b74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     b76:	429e      	cmp	r6, r3
     b78:	d301      	bcc.n	b7e <boot_copy_region+0x1e>
    return 0;
     b7a:	2000      	movs	r0, #0
     b7c:	e00f      	b.n	b9e <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     b7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b80:	4640      	mov	r0, r8
        if (sz - bytes_copied > sizeof buf) {
     b82:	1b9f      	subs	r7, r3, r6
     b84:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     b88:	bf28      	it	cs
     b8a:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b8e:	4a14      	ldr	r2, [pc, #80]	; (be0 <boot_copy_region+0x80>)
     b90:	463b      	mov	r3, r7
     b92:	eb06 010a 	add.w	r1, r6, sl
     b96:	f007 facd 	bl	8134 <flash_area_read>
        if (rc != 0) {
     b9a:	b110      	cbz	r0, ba2 <boot_copy_region+0x42>
            return BOOT_EFLASH;
     b9c:	2001      	movs	r0, #1
}
     b9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     ba2:	990a      	ldr	r1, [sp, #40]	; 0x28
     ba4:	463b      	mov	r3, r7
     ba6:	465a      	mov	r2, fp
     ba8:	4648      	mov	r0, r9
     baa:	1871      	adds	r1, r6, r1
     bac:	f007 fad7 	bl	815e <flash_area_write>
        if (rc != 0) {
     bb0:	2800      	cmp	r0, #0
     bb2:	d1f3      	bne.n	b9c <boot_copy_region+0x3c>
     bb4:	f8c4 5600 	str.w	r5, [r4, #1536]	; 0x600
        bytes_copied += chunk_sz;
     bb8:	443e      	add	r6, r7
     bba:	f8c4 5604 	str.w	r5, [r4, #1540]	; 0x604
     bbe:	f8c4 5608 	str.w	r5, [r4, #1544]	; 0x608
     bc2:	f8c4 560c 	str.w	r5, [r4, #1548]	; 0x60c
     bc6:	f8c4 5610 	str.w	r5, [r4, #1552]	; 0x610
     bca:	f8c4 5614 	str.w	r5, [r4, #1556]	; 0x614
     bce:	f8c4 5618 	str.w	r5, [r4, #1560]	; 0x618
     bd2:	f8c4 561c 	str.w	r5, [r4, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     bd6:	e7cd      	b.n	b74 <boot_copy_region+0x14>
     bd8:	50018000 	.word	0x50018000
     bdc:	6e524635 	.word	0x6e524635
     be0:	2000d824 	.word	0x2000d824

00000be4 <context_boot_go>:
#endif
}

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     be4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
     be8:	460e      	mov	r6, r1

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     bea:	2100      	movs	r1, #0
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     bec:	4b8e      	ldr	r3, [pc, #568]	; (e28 <FIH_LABEL_FIH_CALL_END_2283+0x40>)
{
     bee:	4604      	mov	r4, r0
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     bf0:	6243      	str	r3, [r0, #36]	; 0x24
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     bf2:	4b8e      	ldr	r3, [pc, #568]	; (e2c <FIH_LABEL_FIH_CALL_END_2283+0x44>)
     bf4:	6503      	str	r3, [r0, #80]	; 0x50
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     bf6:	4608      	mov	r0, r1
     bf8:	f006 fde2 	bl	77c0 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     bfc:	f104 0120 	add.w	r1, r4, #32
     c00:	b2c0      	uxtb	r0, r0
     c02:	f001 f903 	bl	1e0c <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     c06:	2101      	movs	r1, #1
     c08:	2000      	movs	r0, #0
     c0a:	f006 fdd9 	bl	77c0 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     c0e:	f104 014c 	add.w	r1, r4, #76	; 0x4c
     c12:	b2c0      	uxtb	r0, r0
     c14:	f001 f8fa 	bl	1e0c <flash_area_open>
     c18:	4605      	mov	r5, r0
    rc = boot_read_sectors(state);
     c1a:	4620      	mov	r0, r4
     c1c:	f006 ff2f 	bl	7a7e <boot_read_sectors>
    if (rc != 0) {
     c20:	4607      	mov	r7, r0
     c22:	b968      	cbnz	r0, c40 <context_boot_go+0x5c>
    rc = boot_read_image_headers(state, false, NULL);
     c24:	2200      	movs	r2, #0
     c26:	4620      	mov	r0, r4
     c28:	4611      	mov	r1, r2
     c2a:	f006 fed1 	bl	79d0 <boot_read_image_headers>
    if (rc != 0) {
     c2e:	4607      	mov	r7, r0
     c30:	b308      	cbz	r0, c76 <context_boot_go+0x92>
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     c32:	2200      	movs	r2, #0
     c34:	2157      	movs	r1, #87	; 0x57
     c36:	487e      	ldr	r0, [pc, #504]	; (e30 <FIH_LABEL_FIH_CALL_END_2283+0x48>)
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     c38:	f007 fa6e 	bl	8118 <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c3c:	2301      	movs	r3, #1
     c3e:	e090      	b.n	d62 <FIH_LABEL_FIH_CALL_END_2032+0xe>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
     c40:	f44f 7280 	mov.w	r2, #256	; 0x100
     c44:	2157      	movs	r1, #87	; 0x57
     c46:	487b      	ldr	r0, [pc, #492]	; (e34 <FIH_LABEL_FIH_CALL_END_2283+0x4c>)
     c48:	f007 fa66 	bl	8118 <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c4c:	2301      	movs	r3, #1
        if (rc == BOOT_EFLASH)
     c4e:	429f      	cmp	r7, r3
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c50:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (rc == BOOT_EFLASH)
     c54:	d1e6      	bne.n	c24 <context_boot_go+0x40>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     c56:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);

        switch (BOOT_SWAP_TYPE(state)) {
     c5a:	2b04      	cmp	r3, #4
        bs.swap_type = BOOT_SWAP_TYPE(state);
     c5c:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (BOOT_SWAP_TYPE(state)) {
     c60:	f200 8082 	bhi.w	d68 <FIH_LABEL_FIH_CALL_END_2032+0x14>
     c64:	2b01      	cmp	r3, #1
     c66:	f200 8085 	bhi.w	d74 <FIH_LABEL_FIH_CALL_END_2032+0x20>
     c6a:	f000 809c 	beq.w	da6 <FIH_LABEL_FIH_CALL_END_2032+0x52>
            }
#endif /* !MCUBOOT_OVERWRITE_ONLY */
            break;

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     c6e:	23ff      	movs	r3, #255	; 0xff
     c70:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     c74:	e097      	b.n	da6 <FIH_LABEL_FIH_CALL_END_2032+0x52>
    if (boot_slots_compatible(state)) {
     c76:	4620      	mov	r0, r4
     c78:	f000 f9a6 	bl	fc8 <boot_slots_compatible>
     c7c:	2800      	cmp	r0, #0
     c7e:	d0dd      	beq.n	c3c <context_boot_go+0x58>
        boot_status_reset(bs);
     c80:	4668      	mov	r0, sp
     c82:	f006 ff1e 	bl	7ac2 <boot_status_reset>
        rc = swap_read_status(state, bs);
     c86:	4669      	mov	r1, sp
     c88:	4620      	mov	r0, r4
     c8a:	f006 ffb9 	bl	7c00 <swap_read_status>
        if (rc != 0) {
     c8e:	b118      	cbz	r0, c98 <context_boot_go+0xb4>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     c90:	463a      	mov	r2, r7
     c92:	2157      	movs	r1, #87	; 0x57
     c94:	4868      	ldr	r0, [pc, #416]	; (e38 <FIH_LABEL_FIH_CALL_END_2283+0x50>)
     c96:	e7cf      	b.n	c38 <context_boot_go+0x54>
        rc = boot_read_image_headers(state, !boot_status_is_reset(bs), bs);
     c98:	4668      	mov	r0, sp
     c9a:	f006 ff1b 	bl	7ad4 <boot_status_is_reset>
     c9e:	f080 0101 	eor.w	r1, r0, #1
     ca2:	466a      	mov	r2, sp
     ca4:	4620      	mov	r0, r4
     ca6:	b2c9      	uxtb	r1, r1
     ca8:	f006 fe92 	bl	79d0 <boot_read_image_headers>
        if (rc != 0) {
     cac:	4602      	mov	r2, r0
     cae:	2800      	cmp	r0, #0
     cb0:	d1bf      	bne.n	c32 <context_boot_go+0x4e>
        if (!boot_status_is_reset(bs)) {
     cb2:	4668      	mov	r0, sp
     cb4:	f006 ff0e 	bl	7ad4 <boot_status_is_reset>
     cb8:	4607      	mov	r7, r0
     cba:	bb60      	cbnz	r0, d16 <context_boot_go+0x132>
    rc = boot_swap_image(state, bs);
     cbc:	4669      	mov	r1, sp
     cbe:	4620      	mov	r0, r4
     cc0:	f7ff ff10 	bl	ae4 <boot_swap_image>
    BOOT_SWAP_TYPE(state) = bs->swap_type;
     cc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cc8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     ccc:	3b03      	subs	r3, #3
     cce:	2b01      	cmp	r3, #1
     cd0:	d806      	bhi.n	ce0 <context_boot_go+0xfc>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     cd2:	4638      	mov	r0, r7
     cd4:	f006 ffe3 	bl	7c9e <swap_set_image_ok>
        if (rc != 0) {
     cd8:	b110      	cbz	r0, ce0 <context_boot_go+0xfc>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     cda:	23ff      	movs	r3, #255	; 0xff
     cdc:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     ce0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ce4:	3b02      	subs	r3, #2
     ce6:	2b02      	cmp	r3, #2
     ce8:	d80b      	bhi.n	d02 <context_boot_go+0x11e>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     cea:	2000      	movs	r0, #0
     cec:	f006 ffc5 	bl	7c7a <swap_set_copy_done>
        if (rc != 0) {
     cf0:	b138      	cbz	r0, d02 <context_boot_go+0x11e>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     cf2:	23ff      	movs	r3, #255	; 0xff
     cf4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        BOOT_LOG_ERR("panic!");
     cf8:	2145      	movs	r1, #69	; 0x45
     cfa:	4850      	ldr	r0, [pc, #320]	; (e3c <FIH_LABEL_FIH_CALL_END_2283+0x54>)
     cfc:	f007 fa0c 	bl	8118 <z_log_minimal_printk>
        while (1) {}
     d00:	e7fe      	b.n	d00 <context_boot_go+0x11c>
    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     d02:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     d06:	2bff      	cmp	r3, #255	; 0xff
     d08:	d0f6      	beq.n	cf8 <context_boot_go+0x114>
            rc = boot_read_image_headers(state, false, bs);
     d0a:	466a      	mov	r2, sp
     d0c:	2100      	movs	r1, #0
     d0e:	4620      	mov	r0, r4
     d10:	f006 fe5e 	bl	79d0 <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     d14:	e792      	b.n	c3c <context_boot_go+0x58>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     d16:	f89d 8007 	ldrb.w	r8, [sp, #7]
     d1a:	f1b8 0f01 	cmp.w	r8, #1
     d1e:	d115      	bne.n	d4c <FIH_LABEL_FIH_CALL_START_2017>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     d20:	4610      	mov	r0, r2
     d22:	f003 fc23 	bl	456c <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     d26:	1e83      	subs	r3, r0, #2
     d28:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     d2a:	4607      	mov	r7, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     d2c:	d80b      	bhi.n	d46 <FIH_LABEL_FIH_CALL_END_1981+0x10>

00000d2e <FIH_LABEL_FIH_CALL_START_1966>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     d2e:	4641      	mov	r1, r8
     d30:	4620      	mov	r0, r4
     d32:	f7ff fe5b 	bl	9ec <boot_validate_slot.isra.0>

00000d36 <FIH_LABEL_FIH_CALL_END_1981>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     d36:	4b42      	ldr	r3, [pc, #264]	; (e40 <FIH_LABEL_FIH_CALL_END_2283+0x58>)
     d38:	681b      	ldr	r3, [r3, #0]
     d3a:	4298      	cmp	r0, r3
     d3c:	d003      	beq.n	d46 <FIH_LABEL_FIH_CALL_END_1981+0x10>
                swap_type = BOOT_SWAP_TYPE_NONE;
     d3e:	2801      	cmp	r0, #1
     d40:	bf14      	ite	ne
     d42:	2705      	movne	r7, #5
     d44:	2701      	moveq	r7, #1
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     d46:	f884 7058 	strb.w	r7, [r4, #88]	; 0x58
     d4a:	e784      	b.n	c56 <context_boot_go+0x72>

00000d4c <FIH_LABEL_FIH_CALL_START_2017>:
                FIH_CALL(boot_validate_slot, fih_rc,
     d4c:	2101      	movs	r1, #1
     d4e:	4620      	mov	r0, r4
     d50:	f7ff fe4c 	bl	9ec <boot_validate_slot.isra.0>

00000d54 <FIH_LABEL_FIH_CALL_END_2032>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     d54:	4b3a      	ldr	r3, [pc, #232]	; (e40 <FIH_LABEL_FIH_CALL_END_2283+0x58>)
     d56:	681b      	ldr	r3, [r3, #0]
     d58:	4298      	cmp	r0, r3
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     d5a:	bf14      	ite	ne
     d5c:	2305      	movne	r3, #5
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     d5e:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     d62:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     d66:	e776      	b.n	c56 <context_boot_go+0x72>
        switch (BOOT_SWAP_TYPE(state)) {
     d68:	2b05      	cmp	r3, #5
     d6a:	d180      	bne.n	c6e <context_boot_go+0x8a>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     d6c:	2000      	movs	r0, #0
     d6e:	f006 ff96 	bl	7c9e <swap_set_image_ok>
     d72:	e013      	b.n	d9c <FIH_LABEL_FIH_CALL_END_2032+0x48>
        rc = boot_swap_image(state, bs);
     d74:	4669      	mov	r1, sp
     d76:	4620      	mov	r0, r4
     d78:	f7ff feb4 	bl	ae4 <boot_swap_image>
    swap_type = BOOT_SWAP_TYPE(state);
     d7c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
        rc = boot_swap_image(state, bs);
     d80:	4605      	mov	r5, r0
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     d82:	1eda      	subs	r2, r3, #3
     d84:	2a01      	cmp	r2, #1
     d86:	d80c      	bhi.n	da2 <FIH_LABEL_FIH_CALL_END_2032+0x4e>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     d88:	2000      	movs	r0, #0
     d8a:	f006 ff88 	bl	7c9e <swap_set_image_ok>
        if (rc != 0) {
     d8e:	4605      	mov	r5, r0
     d90:	2800      	cmp	r0, #0
     d92:	f47f af6c 	bne.w	c6e <context_boot_go+0x8a>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     d96:	2000      	movs	r0, #0
     d98:	f006 ff6f 	bl	7c7a <swap_set_copy_done>
            if (rc != 0) {
     d9c:	4605      	mov	r5, r0
     d9e:	b110      	cbz	r0, da6 <FIH_LABEL_FIH_CALL_END_2032+0x52>
     da0:	e765      	b.n	c6e <context_boot_go+0x8a>
    if (BOOT_IS_UPGRADE(swap_type)) {
     da2:	2b02      	cmp	r3, #2
     da4:	d0f7      	beq.n	d96 <FIH_LABEL_FIH_CALL_END_2032+0x42>
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     da6:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     daa:	2bff      	cmp	r3, #255	; 0xff
     dac:	d104      	bne.n	db8 <FIH_LABEL_FIH_CALL_END_2032+0x64>
            BOOT_LOG_ERR("panic!");
     dae:	2145      	movs	r1, #69	; 0x45
     db0:	4822      	ldr	r0, [pc, #136]	; (e3c <FIH_LABEL_FIH_CALL_END_2283+0x54>)
     db2:	f007 f9b1 	bl	8118 <z_log_minimal_printk>
            assert(0);

            /* Loop forever... */
            FIH_PANIC;
     db6:	e7fe      	b.n	db6 <FIH_LABEL_FIH_CALL_END_2032+0x62>
#if BOOT_IMAGE_NUMBER > 1
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
            continue;
        }
#endif
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     db8:	2b01      	cmp	r3, #1
     dba:	d010      	beq.n	dde <FIH_LABEL_FIH_CALL_START_2268>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
     dbc:	466a      	mov	r2, sp
     dbe:	2100      	movs	r1, #0
     dc0:	4620      	mov	r0, r4
     dc2:	f006 fe05 	bl	79d0 <boot_read_image_headers>
            if (rc != 0) {
     dc6:	4605      	mov	r5, r0
     dc8:	b148      	cbz	r0, dde <FIH_LABEL_FIH_CALL_START_2268>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     dca:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     dcc:	f007 f9b1 	bl	8132 <flash_area_close>
     dd0:	6a20      	ldr	r0, [r4, #32]
     dd2:	f007 f9ae 	bl	8132 <flash_area_close>
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     dd6:	4628      	mov	r0, r5
     dd8:	b004      	add	sp, #16
     dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00000dde <FIH_LABEL_FIH_CALL_START_2268>:
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
     dde:	2100      	movs	r1, #0
     de0:	4620      	mov	r0, r4
     de2:	f7ff fe03 	bl	9ec <boot_validate_slot.isra.0>
     de6:	4607      	mov	r7, r0

00000de8 <FIH_LABEL_FIH_CALL_END_2283>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     de8:	f8df 8054 	ldr.w	r8, [pc, #84]	; e40 <FIH_LABEL_FIH_CALL_END_2283+0x58>
     dec:	f8d8 3000 	ldr.w	r3, [r8]
     df0:	4298      	cmp	r0, r3
     df2:	d10f      	bne.n	e14 <FIH_LABEL_FIH_CALL_END_2283+0x2c>
    memset(&bs, 0, sizeof(struct boot_status));
     df4:	2210      	movs	r2, #16
     df6:	2100      	movs	r1, #0
     df8:	4668      	mov	r0, sp
     dfa:	f007 fd0c 	bl	8816 <memset>
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
     dfe:	6a20      	ldr	r0, [r4, #32]
     e00:	f006 fce7 	bl	77d2 <flash_area_get_device_id>
     e04:	7130      	strb	r0, [r6, #4]
	return (uint32_t)fa->fa_off;
     e06:	6a23      	ldr	r3, [r4, #32]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     e08:	685b      	ldr	r3, [r3, #4]
    rsp->br_hdr = boot_img_hdr(state, active_slot);
     e0a:	6034      	str	r4, [r6, #0]
    fih_rc = FIH_SUCCESS;
     e0c:	f8d8 5000 	ldr.w	r5, [r8]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     e10:	60b3      	str	r3, [r6, #8]
    fih_rc = FIH_SUCCESS;
     e12:	e7da      	b.n	dca <FIH_LABEL_FIH_CALL_END_2032+0x76>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     e14:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     e16:	f007 f98c 	bl	8132 <flash_area_close>
     e1a:	6a20      	ldr	r0, [r4, #32]
     e1c:	f007 f989 	bl	8132 <flash_area_close>
    if (rc) {
     e20:	2d00      	cmp	r5, #0
     e22:	bf08      	it	eq
     e24:	463d      	moveq	r5, r7
     e26:	e7d6      	b.n	dd6 <FIH_LABEL_FIH_CALL_END_2032+0x82>
     e28:	2000d024 	.word	0x2000d024
     e2c:	2000c824 	.word	0x2000c824
     e30:	00009e6a 	.word	0x00009e6a
     e34:	00009e28 	.word	0x00009e28
     e38:	00009e96 	.word	0x00009e96
     e3c:	00009ec0 	.word	0x00009ec0
     e40:	2000c820 	.word	0x2000c820

00000e44 <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
     e44:	b538      	push	{r3, r4, r5, lr}
void boot_state_clear(struct boot_loader_state *state)
{
    if (state != NULL) {
        memset(state, 0, sizeof(struct boot_loader_state));
    } else {
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     e46:	4d06      	ldr	r5, [pc, #24]	; (e60 <FIH_LABEL_FIH_CALL_END_2905+0x4>)
{
     e48:	4604      	mov	r4, r0
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     e4a:	2260      	movs	r2, #96	; 0x60
     e4c:	2100      	movs	r1, #0
     e4e:	4628      	mov	r0, r5
     e50:	f007 fce1 	bl	8816 <memset>

00000e54 <FIH_LABEL_FIH_CALL_START_2891>:
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
     e54:	4621      	mov	r1, r4
     e56:	4628      	mov	r0, r5
     e58:	f7ff fec4 	bl	be4 <context_boot_go>

00000e5c <FIH_LABEL_FIH_CALL_END_2905>:
}
     e5c:	bd38      	pop	{r3, r4, r5, pc}
     e5e:	bf00      	nop
     e60:	2000dc24 	.word	0x2000dc24

00000e64 <boot_read_image_header>:
static uint32_t g_last_idx = UINT32_MAX;

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
     e64:	b573      	push	{r0, r1, r4, r5, r6, lr}
     e66:	4616      	mov	r6, r2
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    off = 0;
    if (bs) {
     e68:	461d      	mov	r5, r3
     e6a:	b143      	cbz	r3, e7e <boot_read_image_header+0x1a>
        sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
        if (bs->op == BOOT_STATUS_OP_MOVE) {
     e6c:	795b      	ldrb	r3, [r3, #5]
     e6e:	2b01      	cmp	r3, #1
     e70:	d107      	bne.n	e82 <boot_read_image_header+0x1e>
            if (slot == 0 && bs->idx > g_last_idx) {
     e72:	b921      	cbnz	r1, e7e <boot_read_image_header+0x1a>
     e74:	4b20      	ldr	r3, [pc, #128]	; (ef8 <boot_read_image_header+0x94>)
     e76:	682a      	ldr	r2, [r5, #0]
     e78:	681b      	ldr	r3, [r3, #0]
     e7a:	429a      	cmp	r2, r3
     e7c:	d817      	bhi.n	eae <boot_read_image_header+0x4a>
    off = 0;
     e7e:	2400      	movs	r4, #0
     e80:	e018      	b.n	eb4 <boot_read_image_header+0x50>
                /* second sector */
                off = sz;
            }
        } else if (bs->op == BOOT_STATUS_OP_SWAP) {
     e82:	2b02      	cmp	r3, #2
     e84:	d1fb      	bne.n	e7e <boot_read_image_header+0x1a>
            if (bs->idx > 1 && bs->idx <= g_last_idx) {
     e86:	682b      	ldr	r3, [r5, #0]
     e88:	2b01      	cmp	r3, #1
     e8a:	d907      	bls.n	e9c <boot_read_image_header+0x38>
     e8c:	4a1a      	ldr	r2, [pc, #104]	; (ef8 <boot_read_image_header+0x94>)
     e8e:	6812      	ldr	r2, [r2, #0]
     e90:	4293      	cmp	r3, r2
     e92:	d8f4      	bhi.n	e7e <boot_read_image_header+0x1a>
                if (slot == 0) {
     e94:	fab1 f181 	clz	r1, r1
     e98:	0949      	lsrs	r1, r1, #5
     e9a:	e7f0      	b.n	e7e <boot_read_image_header+0x1a>
                    slot = 1;
                } else {
                    slot = 0;
                }
            } else if (bs->idx == 1) {
     e9c:	d1ef      	bne.n	e7e <boot_read_image_header+0x1a>
                if (slot == 0) {
     e9e:	b131      	cbz	r1, eae <boot_read_image_header+0x4a>
                    off = sz;
                }
                if (slot == 1 && bs->state == 2) {
     ea0:	2901      	cmp	r1, #1
     ea2:	d1ec      	bne.n	e7e <boot_read_image_header+0x1a>
     ea4:	7929      	ldrb	r1, [r5, #4]
     ea6:	3902      	subs	r1, #2
     ea8:	bf18      	it	ne
     eaa:	2101      	movne	r1, #1
     eac:	e7e7      	b.n	e7e <boot_read_image_header+0x1a>
}

static inline uint32_t flash_sector_get_size(const struct flash_sector *fs)
{
	return fs->fs_size;
     eae:	2100      	movs	r1, #0
     eb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
     eb2:	685c      	ldr	r4, [r3, #4]
                }
            }
        }
    }

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     eb4:	2000      	movs	r0, #0
     eb6:	f006 fc83 	bl	77c0 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     eba:	a901      	add	r1, sp, #4
     ebc:	b2c0      	uxtb	r0, r0
     ebe:	f000 ffa5 	bl	1e0c <flash_area_open>
    if (rc != 0) {
     ec2:	b130      	cbz	r0, ed2 <boot_read_image_header+0x6e>
        rc = BOOT_EFLASH;
     ec4:	2401      	movs	r4, #1
    }

    rc = 0;

done:
    flash_area_close(fap);
     ec6:	9801      	ldr	r0, [sp, #4]
     ec8:	f007 f933 	bl	8132 <flash_area_close>
    return rc;
}
     ecc:	4620      	mov	r0, r4
     ece:	b002      	add	sp, #8
     ed0:	bd70      	pop	{r4, r5, r6, pc}
    rc = flash_area_read(fap, off, out_hdr, sizeof *out_hdr);
     ed2:	4621      	mov	r1, r4
     ed4:	2320      	movs	r3, #32
     ed6:	4632      	mov	r2, r6
     ed8:	9801      	ldr	r0, [sp, #4]
     eda:	f007 f92b 	bl	8134 <flash_area_read>
    if (rc != 0) {
     ede:	4604      	mov	r4, r0
     ee0:	2800      	cmp	r0, #0
     ee2:	d1ef      	bne.n	ec4 <boot_read_image_header+0x60>
    if (bs != NULL && out_hdr->ih_magic != IMAGE_MAGIC) {
     ee4:	2d00      	cmp	r5, #0
     ee6:	d0ee      	beq.n	ec6 <boot_read_image_header+0x62>
     ee8:	6834      	ldr	r4, [r6, #0]
     eea:	4b04      	ldr	r3, [pc, #16]	; (efc <boot_read_image_header+0x98>)
     eec:	1ae4      	subs	r4, r4, r3
     eee:	bf18      	it	ne
     ef0:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
     ef4:	e7e7      	b.n	ec6 <boot_read_image_header+0x62>
     ef6:	bf00      	nop
     ef8:	2000c4ec 	.word	0x2000c4ec
     efc:	96f3b83d 	.word	0x96f3b83d

00000f00 <swap_read_status_bytes>:

int
swap_read_status_bytes(const struct flash_area *fap,
        struct boot_loader_state *state, struct boot_status *bs)
{
     f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f04:	4607      	mov	r7, r0
     f06:	460c      	mov	r4, r1
     f08:	b085      	sub	sp, #20
    int rc;
    int last_rc;
    int erased_sections;
    int i;

    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     f0a:	4601      	mov	r1, r0
     f0c:	2000      	movs	r0, #0
{
     f0e:	4616      	mov	r6, r2
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     f10:	f006 fd2f 	bl	7972 <boot_status_entries>
    if (max_entries < 0) {
     f14:	1e05      	subs	r5, r0, #0
     f16:	db51      	blt.n	fbc <swap_read_status_bytes+0xbc>
    erased_sections = 0;
    found_idx = -1;
    /* skip erased sectors at the end */
    last_rc = 1;
    write_sz = BOOT_WRITE_SZ(state);
    off = boot_status_off(fap);
     f18:	4638      	mov	r0, r7
    write_sz = BOOT_WRITE_SZ(state);
     f1a:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    off = boot_status_off(fap);
     f1c:	f006 fd36 	bl	798c <boot_status_off>
    for (i = max_entries; i > 0; i--) {
     f20:	fa5f f984 	uxtb.w	r9, r4
    erased_sections = 0;
     f24:	f04f 0a00 	mov.w	sl, #0
    last_rc = 1;
     f28:	f04f 0b01 	mov.w	fp, #1
    found_idx = -1;
     f2c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     f30:	1e6b      	subs	r3, r5, #1
     f32:	fb09 0803 	mla	r8, r9, r3, r0
    for (i = max_entries; i > 0; i--) {
     f36:	b99d      	cbnz	r5, f60 <swap_read_status_bytes+0x60>
            }
        }
        last_rc = rc;
    }

    if (erased_sections > 1) {
     f38:	f1ba 0f01 	cmp.w	sl, #1
     f3c:	dd03      	ble.n	f46 <swap_read_status_bytes+0x46>
        /* This means there was an error writing status on the last
         * swap. Tell user and move on to validation!
         */
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Detected inconsistent status!");
     f3e:	2145      	movs	r1, #69	; 0x45
     f40:	4820      	ldr	r0, [pc, #128]	; (fc4 <swap_read_status_bytes+0xc4>)
     f42:	f007 f8e9 	bl	8118 <z_log_minimal_printk>
        assert(0);
#endif
    }

    move_entries = BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT;
    if (found_idx == -1) {
     f46:	1c63      	adds	r3, r4, #1
     f48:	d006      	beq.n	f58 <swap_read_status_bytes+0x58>
        /* no swap status found; nothing to do */
    } else if (found_idx < move_entries) {
     f4a:	2cff      	cmp	r4, #255	; 0xff
     f4c:	dc2a      	bgt.n	fa4 <swap_read_status_bytes+0xa4>
        bs->op = BOOT_STATUS_OP_MOVE;
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     f4e:	f240 1301 	movw	r3, #257	; 0x101
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
     f52:	3401      	adds	r4, #1
     f54:	6034      	str	r4, [r6, #0]
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     f56:	80b3      	strh	r3, [r6, #4]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    }

    return 0;
}
     f58:	4628      	mov	r0, r5
     f5a:	b005      	add	sp, #20
     f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_read(fap, off + (i - 1) * write_sz, &status, 1);
     f60:	1e6b      	subs	r3, r5, #1
     f62:	9300      	str	r3, [sp, #0]
     f64:	4641      	mov	r1, r8
     f66:	2301      	movs	r3, #1
     f68:	4638      	mov	r0, r7
     f6a:	f10d 020f 	add.w	r2, sp, #15
     f6e:	f007 f8e1 	bl	8134 <flash_area_read>
        if (rc < 0) {
     f72:	1e03      	subs	r3, r0, #0
     f74:	9301      	str	r3, [sp, #4]
     f76:	db23      	blt.n	fc0 <swap_read_status_bytes+0xc0>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
     f78:	2201      	movs	r2, #1
     f7a:	4638      	mov	r0, r7
     f7c:	f10d 010f 	add.w	r1, sp, #15
     f80:	f007 ffb2 	bl	8ee8 <bootutil_buffer_is_erased>
     f84:	9b01      	ldr	r3, [sp, #4]
     f86:	b140      	cbz	r0, f9a <swap_read_status_bytes+0x9a>
            if (rc != last_rc) {
     f88:	455b      	cmp	r3, fp
     f8a:	d001      	beq.n	f90 <swap_read_status_bytes+0x90>
                erased_sections++;
     f8c:	f10a 0a01 	add.w	sl, sl, #1
            if (found_idx == -1) {
     f90:	469b      	mov	fp, r3
     f92:	9d00      	ldr	r5, [sp, #0]
     f94:	eba8 0809 	sub.w	r8, r8, r9
     f98:	e7cd      	b.n	f36 <swap_read_status_bytes+0x36>
     f9a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
     f9e:	bf08      	it	eq
     fa0:	462c      	moveq	r4, r5
     fa2:	e7f5      	b.n	f90 <swap_read_status_bytes+0x90>
        bs->op = BOOT_STATUS_OP_SWAP;
     fa4:	2302      	movs	r3, #2
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     fa6:	f5a4 7480 	sub.w	r4, r4, #256	; 0x100
        bs->op = BOOT_STATUS_OP_SWAP;
     faa:	7173      	strb	r3, [r6, #5]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     fac:	1063      	asrs	r3, r4, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     fae:	f004 0401 	and.w	r4, r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     fb2:	3301      	adds	r3, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     fb4:	3401      	adds	r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     fb6:	6033      	str	r3, [r6, #0]
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     fb8:	7134      	strb	r4, [r6, #4]
     fba:	e7cd      	b.n	f58 <swap_read_status_bytes+0x58>
        return BOOT_EBADARGS;
     fbc:	2507      	movs	r5, #7
     fbe:	e7cb      	b.n	f58 <swap_read_status_bytes+0x58>
            return BOOT_EFLASH;
     fc0:	2501      	movs	r5, #1
     fc2:	e7c9      	b.n	f58 <swap_read_status_bytes+0x58>
     fc4:	00009ecc 	.word	0x00009ecc

00000fc8 <boot_slots_compatible>:
    return off;
}

int
boot_slots_compatible(struct boot_loader_state *state)
{
     fc8:	b538      	push	{r3, r4, r5, lr}
}

static inline size_t
boot_img_num_sectors(const struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).num_sectors;
     fca:	6a81      	ldr	r1, [r0, #40]	; 0x28
     fcc:	6d42      	ldr	r2, [r0, #84]	; 0x54
    size_t sector_sz_sec = 0;
    size_t i;

    num_sectors_pri = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_sec = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_pri != num_sectors_sec) &&
     fce:	4291      	cmp	r1, r2
     fd0:	d008      	beq.n	fe4 <boot_slots_compatible+0x1c>
            (num_sectors_pri != (num_sectors_sec + 1))) {
     fd2:	1c53      	adds	r3, r2, #1
    if ((num_sectors_pri != num_sectors_sec) &&
     fd4:	428b      	cmp	r3, r1
     fd6:	d005      	beq.n	fe4 <boot_slots_compatible+0x1c>
        BOOT_LOG_WRN("Cannot upgrade: not a compatible amount of sectors");
     fd8:	2157      	movs	r1, #87	; 0x57
     fda:	4814      	ldr	r0, [pc, #80]	; (102c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2c>)
        return 0;
    }

    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
     fdc:	f007 f89c 	bl	8118 <z_log_minimal_printk>
        return 0;
     fe0:	2000      	movs	r0, #0
        }
    }

    return 1;
#endif /* PM_S1_ADDRESS */
}
     fe2:	bd38      	pop	{r3, r4, r5, pc}
    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
     fe4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
     fe8:	d91c      	bls.n	1024 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x24>
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
     fea:	2157      	movs	r1, #87	; 0x57
     fec:	4810      	ldr	r0, [pc, #64]	; (1030 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x30>)
     fee:	e7f5      	b.n	fdc <boot_slots_compatible+0x14>
     ff0:	6a44      	ldr	r4, [r0, #36]	; 0x24
     ff2:	6d05      	ldr	r5, [r0, #80]	; 0x50
     ff4:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
     ff8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
     ffc:	6864      	ldr	r4, [r4, #4]
        if (sector_sz_pri != sector_sz_sec) {
     ffe:	686d      	ldr	r5, [r5, #4]
    1000:	42ac      	cmp	r4, r5
    1002:	d002      	beq.n	100a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xa>
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
    1004:	2157      	movs	r1, #87	; 0x57
    1006:	480b      	ldr	r0, [pc, #44]	; (1034 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x34>)
    1008:	e7e8      	b.n	fdc <boot_slots_compatible+0x14>
    for (i = 0; i < num_sectors_sec; i++) {
    100a:	3301      	adds	r3, #1
    100c:	429a      	cmp	r2, r3
    100e:	d1ef      	bne.n	ff0 <boot_slots_compatible+0x28>
    if (num_sectors_pri > num_sectors_sec) {
    1010:	4291      	cmp	r1, r2
    1012:	d905      	bls.n	1020 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x20>
    1014:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1016:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
        if (sector_sz_pri != boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i)) {
    101a:	685b      	ldr	r3, [r3, #4]
    101c:	42a3      	cmp	r3, r4
    101e:	d1f1      	bne.n	1004 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4>
    return 1;
    1020:	2001      	movs	r0, #1
    1022:	e7de      	b.n	fe2 <boot_slots_compatible+0x1a>
    for (i = 0; i < num_sectors_sec; i++) {
    1024:	2300      	movs	r3, #0
    size_t sector_sz_pri = 0;
    1026:	461c      	mov	r4, r3
    1028:	e7f0      	b.n	100c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xc>
    102a:	bf00      	nop
    102c:	00009eef 	.word	0x00009eef
    1030:	00009f27 	.word	0x00009f27
    1034:	00009f56 	.word	0x00009f56

00001038 <swap_status_source>:
                 (state)->copy_done,                                \
                 (state)->image_ok)

int
swap_status_source(struct boot_loader_state *state)
{
    1038:	b500      	push	{lr}
    103a:	b089      	sub	sp, #36	; 0x24
    (void)state;
#endif

    image_index = BOOT_CURR_IMG(state);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    103c:	2003      	movs	r0, #3
    103e:	a904      	add	r1, sp, #16
    1040:	f007 ffc4 	bl	8fcc <boot_read_swap_state_by_id>
            &state_primary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    1044:	f89d 2010 	ldrb.w	r2, [sp, #16]
    1048:	2a01      	cmp	r2, #1
    104a:	d041      	beq.n	10d0 <swap_status_source+0x98>
    104c:	4b25      	ldr	r3, [pc, #148]	; (10e4 <swap_status_source+0xac>)
    104e:	4926      	ldr	r1, [pc, #152]	; (10e8 <swap_status_source+0xb0>)
    1050:	2a03      	cmp	r2, #3
    1052:	bf08      	it	eq
    1054:	460b      	moveq	r3, r1
    1056:	f89d 2013 	ldrb.w	r2, [sp, #19]
    105a:	2149      	movs	r1, #73	; 0x49
    105c:	9202      	str	r2, [sp, #8]
    105e:	f89d 2012 	ldrb.w	r2, [sp, #18]
    1062:	4822      	ldr	r0, [pc, #136]	; (10ec <swap_status_source+0xb4>)
    1064:	9201      	str	r2, [sp, #4]
    1066:	f89d 2011 	ldrb.w	r2, [sp, #17]
    106a:	9200      	str	r2, [sp, #0]
    106c:	4a20      	ldr	r2, [pc, #128]	; (10f0 <swap_status_source+0xb8>)
    106e:	f007 f853 	bl	8118 <z_log_minimal_printk>

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    1072:	2009      	movs	r0, #9
    1074:	a906      	add	r1, sp, #24
    1076:	f007 ffa9 	bl	8fcc <boot_read_swap_state_by_id>
            &state_secondary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
    107a:	f89d 2018 	ldrb.w	r2, [sp, #24]
    107e:	2a01      	cmp	r2, #1
    1080:	d028      	beq.n	10d4 <swap_status_source+0x9c>
    1082:	4b18      	ldr	r3, [pc, #96]	; (10e4 <swap_status_source+0xac>)
    1084:	4918      	ldr	r1, [pc, #96]	; (10e8 <swap_status_source+0xb0>)
    1086:	2a03      	cmp	r2, #3
    1088:	bf08      	it	eq
    108a:	460b      	moveq	r3, r1
    108c:	f89d 201b 	ldrb.w	r2, [sp, #27]
    1090:	2149      	movs	r1, #73	; 0x49
    1092:	9202      	str	r2, [sp, #8]
    1094:	f89d 201a 	ldrb.w	r2, [sp, #26]
    1098:	4814      	ldr	r0, [pc, #80]	; (10ec <swap_status_source+0xb4>)
    109a:	9201      	str	r2, [sp, #4]
    109c:	f89d 2019 	ldrb.w	r2, [sp, #25]
    10a0:	9200      	str	r2, [sp, #0]
    10a2:	4a14      	ldr	r2, [pc, #80]	; (10f4 <swap_status_source+0xbc>)
    10a4:	f007 f838 	bl	8118 <z_log_minimal_printk>

    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
    10a8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    10ac:	2b01      	cmp	r3, #1
    10ae:	d113      	bne.n	10d8 <swap_status_source+0xa0>
    10b0:	f89d 3012 	ldrb.w	r3, [sp, #18]
    10b4:	2b03      	cmp	r3, #3
    10b6:	d10f      	bne.n	10d8 <swap_status_source+0xa0>
            state_primary_slot.copy_done == BOOT_FLAG_UNSET &&
    10b8:	f89d 3018 	ldrb.w	r3, [sp, #24]
    10bc:	2b01      	cmp	r3, #1
    10be:	d00b      	beq.n	10d8 <swap_status_source+0xa0>
            state_secondary_slot.magic != BOOT_MAGIC_GOOD) {

        source = BOOT_STATUS_SOURCE_PRIMARY_SLOT;

        BOOT_LOG_INF("Boot source: primary slot");
    10c0:	480d      	ldr	r0, [pc, #52]	; (10f8 <swap_status_source+0xc0>)
    10c2:	2149      	movs	r1, #73	; 0x49
    10c4:	f007 f828 	bl	8118 <z_log_minimal_printk>
        return source;
    10c8:	2002      	movs	r0, #2
    }

    BOOT_LOG_INF("Boot source: none");
    return BOOT_STATUS_SOURCE_NONE;
}
    10ca:	b009      	add	sp, #36	; 0x24
    10cc:	f85d fb04 	ldr.w	pc, [sp], #4
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    10d0:	4b0a      	ldr	r3, [pc, #40]	; (10fc <swap_status_source+0xc4>)
    10d2:	e7c0      	b.n	1056 <swap_status_source+0x1e>
    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
    10d4:	4b09      	ldr	r3, [pc, #36]	; (10fc <swap_status_source+0xc4>)
    10d6:	e7d9      	b.n	108c <swap_status_source+0x54>
    BOOT_LOG_INF("Boot source: none");
    10d8:	4809      	ldr	r0, [pc, #36]	; (1100 <swap_status_source+0xc8>)
    10da:	2149      	movs	r1, #73	; 0x49
    10dc:	f007 f81c 	bl	8118 <z_log_minimal_printk>
    return BOOT_STATUS_SOURCE_NONE;
    10e0:	2000      	movs	r0, #0
    10e2:	e7f2      	b.n	10ca <swap_status_source+0x92>
    10e4:	00009f82 	.word	0x00009f82
    10e8:	00009f8b 	.word	0x00009f8b
    10ec:	00009f9f 	.word	0x00009f9f
    10f0:	00009f91 	.word	0x00009f91
    10f4:	00009fe0 	.word	0x00009fe0
    10f8:	00009ff0 	.word	0x00009ff0
    10fc:	00009f86 	.word	0x00009f86
    1100:	0000a00f 	.word	0x0000a00f

00001104 <fixup_revert>:
 * upgrade (by initializing the secondary slot).
 */
void
fixup_revert(const struct boot_loader_state *state, struct boot_status *bs,
        const struct flash_area *fap_sec)
{
    1104:	b570      	push	{r4, r5, r6, lr}
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    /* No fixup required */
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    1106:	684b      	ldr	r3, [r1, #4]
{
    1108:	4614      	mov	r4, r2
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    110a:	4a1e      	ldr	r2, [pc, #120]	; (1184 <fixup_revert+0x80>)
    110c:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
    1110:	4293      	cmp	r3, r2
{
    1112:	4606      	mov	r6, r0
    1114:	460d      	mov	r5, r1
    1116:	b086      	sub	sp, #24
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    1118:	d12f      	bne.n	117a <fixup_revert+0x76>
        bs->op != BOOT_STATUS_OP_MOVE ||
    111a:	680b      	ldr	r3, [r1, #0]
    111c:	2b01      	cmp	r3, #1
    111e:	d12c      	bne.n	117a <fixup_revert+0x76>
        bs->idx != BOOT_STATUS_IDX_0) {
        return;
    }

    rc = boot_read_swap_state(fap_sec, &swap_state);
    1120:	4620      	mov	r0, r4
    1122:	a904      	add	r1, sp, #16
    1124:	f003 f9cc 	bl	44c0 <boot_read_swap_state>
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    1128:	f89d 2010 	ldrb.w	r2, [sp, #16]
    112c:	2a01      	cmp	r2, #1
    112e:	d026      	beq.n	117e <fixup_revert+0x7a>
    1130:	4b15      	ldr	r3, [pc, #84]	; (1188 <fixup_revert+0x84>)
    1132:	4916      	ldr	r1, [pc, #88]	; (118c <fixup_revert+0x88>)
    1134:	2a03      	cmp	r2, #3
    1136:	bf08      	it	eq
    1138:	460b      	moveq	r3, r1
    113a:	f89d 2013 	ldrb.w	r2, [sp, #19]
    113e:	2149      	movs	r1, #73	; 0x49
    1140:	9202      	str	r2, [sp, #8]
    1142:	f89d 2012 	ldrb.w	r2, [sp, #18]
    1146:	4812      	ldr	r0, [pc, #72]	; (1190 <fixup_revert+0x8c>)
    1148:	9201      	str	r2, [sp, #4]
    114a:	f89d 2011 	ldrb.w	r2, [sp, #17]
    114e:	9200      	str	r2, [sp, #0]
    1150:	4a10      	ldr	r2, [pc, #64]	; (1194 <fixup_revert+0x90>)
    1152:	f006 ffe1 	bl	8118 <z_log_minimal_printk>

    if (swap_state.magic == BOOT_MAGIC_UNSET) {
    1156:	f89d 3010 	ldrb.w	r3, [sp, #16]
    115a:	2b03      	cmp	r3, #3
    115c:	d10d      	bne.n	117a <fixup_revert+0x76>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    115e:	4621      	mov	r1, r4
    1160:	4630      	mov	r0, r6
    1162:	f006 fcf8 	bl	7b56 <swap_erase_trailer_sectors>
        assert(rc == 0);

        rc = boot_write_image_ok(fap_sec);
    1166:	4620      	mov	r0, r4
    1168:	f007 ff23 	bl	8fb2 <boot_write_image_ok>
        assert(rc == 0);

        rc = boot_write_swap_size(fap_sec, bs->swap_size);
    116c:	4620      	mov	r0, r4
    116e:	68a9      	ldr	r1, [r5, #8]
    1170:	f006 fc1f 	bl	79b2 <boot_write_swap_size>
        assert(rc == 0);

        rc = boot_write_magic(fap_sec);
    1174:	4620      	mov	r0, r4
    1176:	f003 f983 	bl	4480 <boot_write_magic>
        assert(rc == 0);
    }
}
    117a:	b006      	add	sp, #24
    117c:	bd70      	pop	{r4, r5, r6, pc}
    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    117e:	4b06      	ldr	r3, [pc, #24]	; (1198 <fixup_revert+0x94>)
    1180:	e7db      	b.n	113a <fixup_revert+0x36>
    1182:	bf00      	nop
    1184:	04000100 	.word	0x04000100
    1188:	00009f82 	.word	0x00009f82
    118c:	00009f8b 	.word	0x00009f8b
    1190:	00009f9f 	.word	0x00009f9f
    1194:	00009fe0 	.word	0x00009fe0
    1198:	00009f86 	.word	0x00009f86

0000119c <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    119c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11a0:	4605      	mov	r5, r0
    11a2:	460c      	mov	r4, r1
    uint8_t image_index;
    const struct flash_area *fap_pri;
    const struct flash_area *fap_sec;
    int rc;

    BOOT_LOG_INF("Starting swap using move algorithm.");
    11a4:	487d      	ldr	r0, [pc, #500]	; (139c <swap_run+0x200>)
    11a6:	2149      	movs	r1, #73	; 0x49
{
    11a8:	b089      	sub	sp, #36	; 0x24
    11aa:	4617      	mov	r7, r2
    BOOT_LOG_INF("Starting swap using move algorithm.");
    11ac:	f006 ffb4 	bl	8118 <z_log_minimal_printk>
    11b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    11b2:	2201      	movs	r2, #1
    11b4:	685e      	ldr	r6, [r3, #4]

    sz = 0;
    11b6:	2300      	movs	r3, #0
    g_last_idx = 0;

    sector_sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
    while (1) {
        sz += sector_sz;
    11b8:	4433      	add	r3, r6
        /* Skip to next sector because all sectors will be moved up. */
        g_last_idx++;
        if (sz >= copy_size) {
    11ba:	42bb      	cmp	r3, r7
    11bc:	4611      	mov	r1, r2
    11be:	f102 0201 	add.w	r2, r2, #1
    11c2:	d3f9      	bcc.n	11b8 <swap_run+0x1c>
    11c4:	4f76      	ldr	r7, [pc, #472]	; (13a0 <swap_run+0x204>)
    }

    /*
     * When starting a new swap upgrade, check that there is enough space.
     */
    if (boot_status_is_reset(bs)) {
    11c6:	4620      	mov	r0, r4
    11c8:	6039      	str	r1, [r7, #0]
    11ca:	f006 fc83 	bl	7ad4 <boot_status_is_reset>
    11ce:	b308      	cbz	r0, 1214 <swap_run+0x78>
        sz = 0;
        trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    11d0:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    11d2:	f006 fbc9 	bl	7968 <boot_trailer_sz>
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    11d6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    11d8:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
        sz = 0;
    11dc:	2300      	movs	r3, #0

        while (1) {
            sz += sector_sz;
    11de:	4433      	add	r3, r6
            if  (sz >= trailer_sz) {
    11e0:	4283      	cmp	r3, r0
    11e2:	d202      	bcs.n	11ea <swap_run+0x4e>
                break;
            }
            first_trailer_idx--;
    11e4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
            sz += sector_sz;
    11e8:	e7f9      	b.n	11de <swap_run+0x42>
        }

        if (g_last_idx >= first_trailer_idx) {
    11ea:	683b      	ldr	r3, [r7, #0]
    11ec:	4543      	cmp	r3, r8
    11ee:	d311      	bcc.n	1214 <swap_run+0x78>
            BOOT_LOG_WRN("Not enough free space to run swap upgrade");
    11f0:	2157      	movs	r1, #87	; 0x57
    11f2:	486c      	ldr	r0, [pc, #432]	; (13a4 <swap_run+0x208>)
    11f4:	f006 ff90 	bl	8118 <z_log_minimal_printk>
            BOOT_LOG_WRN("required %d bytes but only %d are available",
    11f8:	683a      	ldr	r2, [r7, #0]
    11fa:	fb08 f306 	mul.w	r3, r8, r6
    11fe:	2157      	movs	r1, #87	; 0x57
    1200:	fb02 6206 	mla	r2, r2, r6, r6
    1204:	4868      	ldr	r0, [pc, #416]	; (13a8 <swap_run+0x20c>)
    1206:	f006 ff87 	bl	8118 <z_log_minimal_printk>
                         (g_last_idx + 1) * sector_sz ,
                         first_trailer_idx * sector_sz);
            bs->swap_type = BOOT_SWAP_TYPE_NONE;
    120a:	2301      	movs	r3, #1
    120c:	71e3      	strb	r3, [r4, #7]
        idx++;
    }

    flash_area_close(fap_pri);
    flash_area_close(fap_sec);
}
    120e:	b009      	add	sp, #36	; 0x24
    1210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap_pri);
    1214:	a906      	add	r1, sp, #24
    1216:	2003      	movs	r0, #3
    1218:	f000 fdf8 	bl	1e0c <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap_sec);
    121c:	a907      	add	r1, sp, #28
    121e:	2009      	movs	r0, #9
    1220:	f000 fdf4 	bl	1e0c <flash_area_open>
    fixup_revert(state, bs, fap_sec);
    1224:	4621      	mov	r1, r4
    1226:	4628      	mov	r0, r5
    1228:	9a07      	ldr	r2, [sp, #28]
    122a:	f7ff ff6b 	bl	1104 <fixup_revert>
    if (bs->op == BOOT_STATUS_OP_MOVE) {
    122e:	7963      	ldrb	r3, [r4, #5]
    1230:	2b01      	cmp	r3, #1
    1232:	d10b      	bne.n	124c <swap_run+0xb0>
        idx = g_last_idx;
    1234:	f8d7 8000 	ldr.w	r8, [r7]
    BOOT_STATUS_ASSERT(rc == 0);
    1238:	f8df b170 	ldr.w	fp, [pc, #368]	; 13ac <swap_run+0x210>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    123c:	683b      	ldr	r3, [r7, #0]
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    123e:	f8dd 9018 	ldr.w	r9, [sp, #24]
        while (idx > 0) {
    1242:	f1b8 0f00 	cmp.w	r8, #0
    1246:	d111      	bne.n	126c <swap_run+0xd0>
        bs->idx = BOOT_STATUS_IDX_0;
    1248:	2301      	movs	r3, #1
    124a:	6023      	str	r3, [r4, #0]
    bs->op = BOOT_STATUS_OP_SWAP;
    124c:	2302      	movs	r3, #2
    idx = 1;
    124e:	f04f 0801 	mov.w	r8, #1
    bs->op = BOOT_STATUS_OP_SWAP;
    1252:	7163      	strb	r3, [r4, #5]
    while (idx <= g_last_idx) {
    1254:	683b      	ldr	r3, [r7, #0]
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    1256:	f8dd a018 	ldr.w	sl, [sp, #24]
    while (idx <= g_last_idx) {
    125a:	4598      	cmp	r8, r3
    125c:	d949      	bls.n	12f2 <swap_run+0x156>
    flash_area_close(fap_pri);
    125e:	4650      	mov	r0, sl
    1260:	f006 ff67 	bl	8132 <flash_area_close>
    flash_area_close(fap_sec);
    1264:	9807      	ldr	r0, [sp, #28]
    1266:	f006 ff64 	bl	8132 <flash_area_close>
    126a:	e7d0      	b.n	120e <swap_run+0x72>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    126c:	6822      	ldr	r2, [r4, #0]
    126e:	3301      	adds	r3, #1
    1270:	1a9b      	subs	r3, r3, r2
    1272:	4598      	cmp	r8, r3
    1274:	d83a      	bhi.n	12ec <swap_run+0x150>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    1276:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    if (bs->idx == BOOT_STATUS_IDX_0) {
    1278:	2a01      	cmp	r2, #1
	return fs->fs_off;
    127a:	6819      	ldr	r1, [r3, #0]
    127c:	f853 0038 	ldr.w	r0, [r3, r8, lsl #3]
    1280:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
    1284:	f853 3c08 	ldr.w	r3, [r3, #-8]
    1288:	eba0 0a01 	sub.w	sl, r0, r1
    128c:	eba3 0301 	sub.w	r3, r3, r1
    1290:	9304      	str	r3, [sp, #16]
    1292:	d111      	bne.n	12b8 <swap_run+0x11c>
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    1294:	9b07      	ldr	r3, [sp, #28]
    1296:	9303      	str	r3, [sp, #12]
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    1298:	68e3      	ldr	r3, [r4, #12]
    129a:	2b02      	cmp	r3, #2
    129c:	d008      	beq.n	12b0 <swap_run+0x114>
            rc = swap_erase_trailer_sectors(state, fap_pri);
    129e:	4649      	mov	r1, r9
    12a0:	4628      	mov	r0, r5
    12a2:	f006 fc58 	bl	7b56 <swap_erase_trailer_sectors>
            rc = swap_status_init(state, fap_pri, bs);
    12a6:	4622      	mov	r2, r4
    12a8:	4649      	mov	r1, r9
    12aa:	4628      	mov	r0, r5
    12ac:	f006 fc89 	bl	7bc2 <swap_status_init>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    12b0:	4628      	mov	r0, r5
    12b2:	9903      	ldr	r1, [sp, #12]
    12b4:	f006 fc4f 	bl	7b56 <swap_erase_trailer_sectors>
    rc = boot_erase_region(fap_pri, new_off, sz);
    12b8:	4632      	mov	r2, r6
    12ba:	4651      	mov	r1, sl
    12bc:	4648      	mov	r0, r9
    12be:	f006 fc48 	bl	7b52 <boot_erase_region>
    rc = boot_copy_region(state, fap_pri, fap_pri, old_off, new_off, sz);
    12c2:	9b04      	ldr	r3, [sp, #16]
    12c4:	464a      	mov	r2, r9
    12c6:	4649      	mov	r1, r9
    12c8:	4628      	mov	r0, r5
    12ca:	e9cd a600 	strd	sl, r6, [sp]
    12ce:	f7ff fc47 	bl	b60 <boot_copy_region>
    rc = boot_write_status(state, bs);
    12d2:	4621      	mov	r1, r4
    12d4:	4628      	mov	r0, r5
    12d6:	f006 fc0a 	bl	7aee <boot_write_status>
    bs->idx++;
    12da:	6823      	ldr	r3, [r4, #0]
    12dc:	3301      	adds	r3, #1
    12de:	6023      	str	r3, [r4, #0]
    BOOT_STATUS_ASSERT(rc == 0);
    12e0:	b120      	cbz	r0, 12ec <swap_run+0x150>
    12e2:	f8db 3000 	ldr.w	r3, [fp]
    12e6:	3301      	adds	r3, #1
    12e8:	f8cb 3000 	str.w	r3, [fp]
            idx--;
    12ec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    12f0:	e7a4      	b.n	123c <swap_run+0xa0>
        if (idx >= bs->idx) {
    12f2:	6823      	ldr	r3, [r4, #0]
    12f4:	4598      	cmp	r8, r3
    12f6:	d34e      	bcc.n	1396 <swap_run+0x1fa>
    12f8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    12fa:	ea4f 03c8 	mov.w	r3, r8, lsl #3
    12fe:	f852 1038 	ldr.w	r1, [r2, r8, lsl #3]
    1302:	3b08      	subs	r3, #8
    1304:	9104      	str	r1, [sp, #16]
    1306:	6811      	ldr	r1, [r2, #0]
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    1308:	f8dd b01c 	ldr.w	fp, [sp, #28]
    130c:	9103      	str	r1, [sp, #12]
    130e:	58d1      	ldr	r1, [r2, r3]
    1310:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    1312:	58d0      	ldr	r0, [r2, r3]
    1314:	6813      	ldr	r3, [r2, #0]
    1316:	eba0 0903 	sub.w	r9, r0, r3
    if (bs->state == BOOT_STATUS_STATE_0) {
    131a:	7923      	ldrb	r3, [r4, #4]
    131c:	2b01      	cmp	r3, #1
    131e:	d138      	bne.n	1392 <swap_run+0x1f6>
    1320:	9b03      	ldr	r3, [sp, #12]
        rc = boot_erase_region(fap_pri, pri_off, sz);
    1322:	4632      	mov	r2, r6
    1324:	1ac9      	subs	r1, r1, r3
    1326:	4650      	mov	r0, sl
    1328:	9105      	str	r1, [sp, #20]
    132a:	f006 fc12 	bl	7b52 <boot_erase_region>
        rc = boot_copy_region(state, fap_sec, fap_pri, sec_off, pri_off, sz);
    132e:	9905      	ldr	r1, [sp, #20]
    1330:	464b      	mov	r3, r9
    1332:	4652      	mov	r2, sl
    1334:	9100      	str	r1, [sp, #0]
    1336:	4628      	mov	r0, r5
    1338:	4659      	mov	r1, fp
    133a:	9601      	str	r6, [sp, #4]
    133c:	f7ff fc10 	bl	b60 <boot_copy_region>
        rc = boot_write_status(state, bs);
    1340:	4621      	mov	r1, r4
    1342:	4628      	mov	r0, r5
    1344:	f006 fbd3 	bl	7aee <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    1348:	2302      	movs	r3, #2
    134a:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    134c:	b118      	cbz	r0, 1356 <swap_run+0x1ba>
    134e:	4a17      	ldr	r2, [pc, #92]	; (13ac <swap_run+0x210>)
    1350:	6813      	ldr	r3, [r2, #0]
    1352:	3301      	adds	r3, #1
    1354:	6013      	str	r3, [r2, #0]
        rc = boot_erase_region(fap_sec, sec_off, sz);
    1356:	4632      	mov	r2, r6
    1358:	4649      	mov	r1, r9
    135a:	4658      	mov	r0, fp
    135c:	f006 fbf9 	bl	7b52 <boot_erase_region>
        rc = boot_copy_region(state, fap_pri, fap_sec, pri_up_off, sec_off, sz);
    1360:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    1364:	4651      	mov	r1, sl
    1366:	1a9b      	subs	r3, r3, r2
    1368:	4628      	mov	r0, r5
    136a:	465a      	mov	r2, fp
    136c:	e9cd 9600 	strd	r9, r6, [sp]
    1370:	f7ff fbf6 	bl	b60 <boot_copy_region>
        rc = boot_write_status(state, bs);
    1374:	4621      	mov	r1, r4
    1376:	4628      	mov	r0, r5
    1378:	f006 fbb9 	bl	7aee <boot_write_status>
        bs->idx++;
    137c:	6823      	ldr	r3, [r4, #0]
    137e:	3301      	adds	r3, #1
    1380:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    1382:	2301      	movs	r3, #1
    1384:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    1386:	b130      	cbz	r0, 1396 <swap_run+0x1fa>
    1388:	4a08      	ldr	r2, [pc, #32]	; (13ac <swap_run+0x210>)
    138a:	6813      	ldr	r3, [r2, #0]
    138c:	3301      	adds	r3, #1
    138e:	6013      	str	r3, [r2, #0]
    1390:	e001      	b.n	1396 <swap_run+0x1fa>
    if (bs->state == BOOT_STATUS_STATE_1) {
    1392:	2b02      	cmp	r3, #2
    1394:	d0df      	beq.n	1356 <swap_run+0x1ba>
        idx++;
    1396:	f108 0801 	add.w	r8, r8, #1
    139a:	e75b      	b.n	1254 <swap_run+0xb8>
    139c:	0000a026 	.word	0x0000a026
    13a0:	2000c4ec 	.word	0x2000c4ec
    13a4:	0000a04f 	.word	0x0000a04f
    13a8:	0000a07e 	.word	0x0000a07e
    13ac:	2000dc84 	.word	0x2000dc84

000013b0 <cc310_init>:
 */

#include "cc310_glue.h"

int cc310_init(void)
{
    13b0:	b570      	push	{r4, r5, r6, lr}
    /* Only initialize once */
    static bool initialized;

    if (!initialized) {
    13b2:	4d09      	ldr	r5, [pc, #36]	; (13d8 <cc310_init+0x28>)
    13b4:	782b      	ldrb	r3, [r5, #0]
    13b6:	b10b      	cbz	r3, 13bc <cc310_init+0xc>
        }
        initialized = true;
        nrf_cc310_disable();
    }

    return 0;
    13b8:	2000      	movs	r0, #0
}
    13ba:	bd70      	pop	{r4, r5, r6, pc}
    NRF_CRYPTOCELL->ENABLE=1;
    13bc:	2601      	movs	r6, #1
    13be:	4c07      	ldr	r4, [pc, #28]	; (13dc <cc310_init+0x2c>)
    13c0:	f8c4 6500 	str.w	r6, [r4, #1280]	; 0x500
        if (nrf_cc310_bl_init() != 0) {
    13c4:	f005 f99e 	bl	6704 <nrf_cc310_bl_init>
    13c8:	b918      	cbnz	r0, 13d2 <cc310_init+0x22>
        initialized = true;
    13ca:	702e      	strb	r6, [r5, #0]
    NRF_CRYPTOCELL->ENABLE=0;
    13cc:	f8c4 0500 	str.w	r0, [r4, #1280]	; 0x500
}
    13d0:	e7f2      	b.n	13b8 <cc310_init+0x8>
            return -1;
    13d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    13d6:	e7f0      	b.n	13ba <cc310_init+0xa>
    13d8:	2000e9d6 	.word	0x2000e9d6
    13dc:	50840000 	.word	0x50840000

000013e0 <cc310_ecdsa_verify_secp256r1>:

int cc310_ecdsa_verify_secp256r1(uint8_t *hash,
                                 uint8_t *public_key,
                                 uint8_t *signature,
                                 size_t hash_len)
{
    13e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    13e4:	b0ac      	sub	sp, #176	; 0xb0
    13e6:	461f      	mov	r7, r3
    13e8:	4606      	mov	r6, r0
    13ea:	460c      	mov	r4, r1
    13ec:	4615      	mov	r5, r2
        int rc;
        nrf_cc310_bl_ecdsa_verify_context_secp256r1_t ctx;
        cc310_init();
    13ee:	f7ff ffdf 	bl	13b0 <cc310_init>
    NRF_CRYPTOCELL->ENABLE=1;
    13f2:	2301      	movs	r3, #1
    13f4:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1418 <cc310_ecdsa_verify_secp256r1+0x38>
        nrf_cc310_enable();
        rc = nrf_cc310_bl_ecdsa_verify_secp256r1(&ctx,
    13f8:	462a      	mov	r2, r5
    13fa:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
    13fe:	4621      	mov	r1, r4
    1400:	4633      	mov	r3, r6
    1402:	9700      	str	r7, [sp, #0]
    1404:	a803      	add	r0, sp, #12
    1406:	f008 f832 	bl	946e <nrf_cc310_bl_ecdsa_verify_secp256r1>
    NRF_CRYPTOCELL->ENABLE=0;
    140a:	2300      	movs	r3, #0
    140c:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
                                                 (nrf_cc310_bl_ecc_signature_secp256r1_t  *) signature,
                                                 hash,
                                                 hash_len);
        nrf_cc310_disable();
        return rc;
}
    1410:	b02c      	add	sp, #176	; 0xb0
    1412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1416:	bf00      	nop
    1418:	50840000 	.word	0x50840000

0000141c <cleanup_arm_nvic>:
    141c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsid i" : : : "memory");
    1420:	b672      	cpsid	i
    1422:	2300      	movs	r3, #0
	__ISB();
	__disable_irq();

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1428:	4a09      	ldr	r2, [pc, #36]	; (1450 <cleanup_arm_nvic+0x34>)
    142a:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    142e:	3301      	adds	r3, #1
    1430:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    1432:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1436:	d1f8      	bne.n	142a <cleanup_arm_nvic+0xe>
    1438:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    143a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    143e:	4a04      	ldr	r2, [pc, #16]	; (1450 <cleanup_arm_nvic+0x34>)
    1440:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1444:	3301      	adds	r3, #1
    1446:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1448:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    144c:	d1f8      	bne.n	1440 <cleanup_arm_nvic+0x24>
	}
}
    144e:	4770      	bx	lr
    1450:	e000e100 	.word	0xe000e100

00001454 <nrf_cleanup_peripheral>:
{
    nrf_clock_int_disable(NRF_CLOCK, 0xFFFFFFFF);
}

void nrf_cleanup_peripheral(void)
{
    1454:	b538      	push	{r3, r4, r5, lr}
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1456:	2201      	movs	r2, #1
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    1458:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    145c:	2500      	movs	r5, #0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    145e:	4b1a      	ldr	r3, [pc, #104]	; (14c8 <nrf_cleanup_peripheral+0x74>)
#if defined(NRF_UARTE0)
    nrf_uarte_disable(NRF_UARTE0);
    nrf_uarte_int_disable(NRF_UARTE0, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    1460:	4629      	mov	r1, r5
    1462:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    1464:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1468:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    146c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    1470:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    1472:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1476:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    147a:	f5a3 4350 	sub.w	r3, r3, #53248	; 0xd000
    147e:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    1482:	2280      	movs	r2, #128	; 0x80
    p_reg->INTENCLR = mask;
    1484:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    1488:	4810      	ldr	r0, [pc, #64]	; (14cc <nrf_cleanup_peripheral+0x78>)
    148a:	f007 f9c4 	bl	8816 <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    148e:	2280      	movs	r2, #128	; 0x80
    1490:	4629      	mov	r1, r5
    1492:	480f      	ldr	r0, [pc, #60]	; (14d0 <nrf_cleanup_peripheral+0x7c>)
    1494:	f007 f9bf 	bl	8816 <memset>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1498:	4b0e      	ldr	r3, [pc, #56]	; (14d4 <nrf_cleanup_peripheral+0x80>)
#if defined(NRF_UARTE1)
    nrf_uarte_disable(NRF_UARTE1);
    nrf_uarte_int_disable(NRF_UARTE1, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    149a:	2280      	movs	r2, #128	; 0x80
    149c:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    14a0:	4629      	mov	r1, r5
    p_reg->INTENCLR = mask;
    14a2:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    14a6:	480c      	ldr	r0, [pc, #48]	; (14d8 <nrf_cleanup_peripheral+0x84>)
    14a8:	f007 f9b5 	bl	8816 <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    14ac:	2280      	movs	r2, #128	; 0x80
    14ae:	4629      	mov	r1, r5
    14b0:	480a      	ldr	r0, [pc, #40]	; (14dc <nrf_cleanup_peripheral+0x88>)
    14b2:	f007 f9b0 	bl	8816 <memset>
    return ((p_reg->CHEN & (DPPIC_CHEN_CH0_Enabled << (DPPIC_CHEN_CH0_Pos + channel))) != 0);
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable_all(NRF_DPPIC_Type * p_reg)
{
    p_reg->CHENCLR = 0xFFFFFFFFuL;
    14b6:	4b0a      	ldr	r3, [pc, #40]	; (14e0 <nrf_cleanup_peripheral+0x8c>)
    14b8:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    14bc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    14c0:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
#endif
#if defined(NRF_DPPIC)
    nrf_dppi_channels_disable_all(NRF_DPPIC);
#endif
    nrf_cleanup_clock();
}
    14c4:	bd38      	pop	{r3, r4, r5, pc}
    14c6:	bf00      	nop
    14c8:	50014000 	.word	0x50014000
    14cc:	50008080 	.word	0x50008080
    14d0:	50008180 	.word	0x50008180
    14d4:	50009000 	.word	0x50009000
    14d8:	50009080 	.word	0x50009080
    14dc:	50009180 	.word	0x50009180
    14e0:	50017000 	.word	0x50017000

000014e4 <base64_encode>:
/*
 * Encode a buffer into base64 format
 */
int base64_encode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    14e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    14e8:	9d07      	ldr	r5, [sp, #28]
	size_t i, n;
	int C1, C2, C3;
	uint8_t *p;

	if (slen == 0) {
    14ea:	b915      	cbnz	r5, 14f2 <base64_encode+0xe>
		*olen = 0;
    14ec:	6015      	str	r5, [r2, #0]
		return 0;
    14ee:	2000      	movs	r0, #0
    14f0:	e012      	b.n	1518 <base64_encode+0x34>
	}

	n = slen / 3 + (slen % 3 != 0);
    14f2:	2403      	movs	r4, #3
    14f4:	fbb5 f4f4 	udiv	r4, r5, r4
    14f8:	eb04 0744 	add.w	r7, r4, r4, lsl #1
    14fc:	42bd      	cmp	r5, r7
    14fe:	bf18      	it	ne
    1500:	3401      	addne	r4, #1

	if (n > (BASE64_SIZE_T_MAX - 1) / 4) {
    1502:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    1506:	d209      	bcs.n	151c <base64_encode+0x38>
		*olen = BASE64_SIZE_T_MAX;
		return -ENOMEM;
	}

	n *= 4;
    1508:	00a4      	lsls	r4, r4, #2

	if ((dlen < n + 1) || (!dst)) {
    150a:	3401      	adds	r4, #1
    150c:	428c      	cmp	r4, r1
    150e:	d800      	bhi.n	1512 <base64_encode+0x2e>
    1510:	b938      	cbnz	r0, 1522 <base64_encode+0x3e>
		return -ENOMEM;
    1512:	f06f 000b 	mvn.w	r0, #11
		*olen = n + 1;
    1516:	6014      	str	r4, [r2, #0]

	*olen = p - dst;
	*p = 0U;

	return 0;
}
    1518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    151c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    1520:	e7f7      	b.n	1512 <base64_encode+0x2e>
	for (i = 0, p = dst; i < n; i += 3) {
    1522:	4604      	mov	r4, r0
    1524:	2100      	movs	r1, #0
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1526:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 15dc <base64_encode+0xf8>
	for (i = 0, p = dst; i < n; i += 3) {
    152a:	42b9      	cmp	r1, r7
    152c:	f103 0c03 	add.w	ip, r3, #3
    1530:	f104 0604 	add.w	r6, r4, #4
    1534:	d32b      	bcc.n	158e <base64_encode+0xaa>
	if (i < slen) {
    1536:	42a9      	cmp	r1, r5
    1538:	4627      	mov	r7, r4
    153a:	d223      	bcs.n	1584 <base64_encode+0xa0>
		C2 = ((i + 1) < slen) ? *src++ : 0;
    153c:	f101 0c01 	add.w	ip, r1, #1
    1540:	45ac      	cmp	ip, r5
		C1 = *src++;
    1542:	781f      	ldrb	r7, [r3, #0]
		C2 = ((i + 1) < slen) ? *src++ : 0;
    1544:	bf28      	it	cs
    1546:	2300      	movcs	r3, #0
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1548:	4924      	ldr	r1, [pc, #144]	; (15dc <base64_encode+0xf8>)
    154a:	ea4f 0ea7 	mov.w	lr, r7, asr #2
		C2 = ((i + 1) < slen) ? *src++ : 0;
    154e:	bf38      	it	cc
    1550:	785b      	ldrbcc	r3, [r3, #1]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1552:	f811 e00e 	ldrb.w	lr, [r1, lr]
		if ((i + 1) < slen) {
    1556:	45ac      	cmp	ip, r5
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1558:	f884 e000 	strb.w	lr, [r4]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    155c:	eb01 1e13 	add.w	lr, r1, r3, lsr #4
			*p++ = '=';
    1560:	bf2e      	itee	cs
    1562:	233d      	movcs	r3, #61	; 0x3d
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    1564:	009b      	lslcc	r3, r3, #2
    1566:	f003 033c 	andcc.w	r3, r3, #60	; 0x3c
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    156a:	ea4f 1707 	mov.w	r7, r7, lsl #4
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    156e:	bf38      	it	cc
    1570:	5ccb      	ldrbcc	r3, [r1, r3]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    1572:	f007 0730 	and.w	r7, r7, #48	; 0x30
    1576:	f81e 7007 	ldrb.w	r7, [lr, r7]
    157a:	70a3      	strb	r3, [r4, #2]
		*p++ = '=';
    157c:	233d      	movs	r3, #61	; 0x3d
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    157e:	7067      	strb	r7, [r4, #1]
		*p++ = '=';
    1580:	4637      	mov	r7, r6
    1582:	70e3      	strb	r3, [r4, #3]
	*p = 0U;
    1584:	2300      	movs	r3, #0
	*olen = p - dst;
    1586:	1a38      	subs	r0, r7, r0
    1588:	6010      	str	r0, [r2, #0]
	*p = 0U;
    158a:	703b      	strb	r3, [r7, #0]
	return 0;
    158c:	e7af      	b.n	14ee <base64_encode+0xa>
		C1 = *src++;
    158e:	f81c 4c03 	ldrb.w	r4, [ip, #-3]
		C2 = *src++;
    1592:	f81c 3c02 	ldrb.w	r3, [ip, #-2]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1596:	ea4f 09a4 	mov.w	r9, r4, asr #2
    159a:	f81e 9009 	ldrb.w	r9, [lr, r9]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    159e:	0124      	lsls	r4, r4, #4
		C3 = *src++;
    15a0:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    15a4:	f004 0430 	and.w	r4, r4, #48	; 0x30
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    15a8:	f806 9c04 	strb.w	r9, [r6, #-4]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    15ac:	eb0e 1913 	add.w	r9, lr, r3, lsr #4
    15b0:	f819 4004 	ldrb.w	r4, [r9, r4]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    15b4:	009b      	lsls	r3, r3, #2
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    15b6:	f806 4c03 	strb.w	r4, [r6, #-3]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    15ba:	f003 033c 	and.w	r3, r3, #60	; 0x3c
    15be:	eb0e 1498 	add.w	r4, lr, r8, lsr #6
    15c2:	5ce3      	ldrb	r3, [r4, r3]
		*p++ = base64_enc_map[C3 & 0x3F];
    15c4:	f008 083f 	and.w	r8, r8, #63	; 0x3f
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    15c8:	f806 3c02 	strb.w	r3, [r6, #-2]
		*p++ = base64_enc_map[C3 & 0x3F];
    15cc:	f81e 3008 	ldrb.w	r3, [lr, r8]
	for (i = 0, p = dst; i < n; i += 3) {
    15d0:	4634      	mov	r4, r6
		*p++ = base64_enc_map[C3 & 0x3F];
    15d2:	f806 3c01 	strb.w	r3, [r6, #-1]
	for (i = 0, p = dst; i < n; i += 3) {
    15d6:	3103      	adds	r1, #3
    15d8:	4663      	mov	r3, ip
    15da:	e7a6      	b.n	152a <base64_encode+0x46>
    15dc:	0000a18a 	.word	0x0000a18a

000015e0 <base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int base64_decode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    15e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	size_t i, n;
	uint32_t j, x;
	uint8_t *p;

	/* First pass: check for validity and get output length */
	for (i = n = j = 0U; i < slen; i++) {
    15e4:	2700      	movs	r7, #0
    15e6:	463c      	mov	r4, r7
    15e8:	463d      	mov	r5, r7
{
    15ea:	f8dd e01c 	ldr.w	lr, [sp, #28]

		if (src[i] == '=' && ++j > 2) {
			return -EINVAL;
		}

		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    15ee:	f8df 8128 	ldr.w	r8, [pc, #296]	; 1718 <base64_decode+0x138>
	for (i = n = j = 0U; i < slen; i++) {
    15f2:	4575      	cmp	r5, lr
    15f4:	d31f      	bcc.n	1636 <base64_decode+0x56>
		}

		n++;
	}

	if (n == 0) {
    15f6:	bbe4      	cbnz	r4, 1672 <base64_decode+0x92>
		*olen = 0;
		return 0;
    15f8:	2000      	movs	r0, #0
		*olen = 0;
    15fa:	6014      	str	r4, [r2, #0]
	}

	*olen = p - dst;

	return 0;
}
    15fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			++i;
    1600:	3601      	adds	r6, #1
		while (i < slen && src[i] == ' ') {
    1602:	4576      	cmp	r6, lr
    1604:	d033      	beq.n	166e <base64_decode+0x8e>
    1606:	f813 c006 	ldrb.w	ip, [r3, r6]
    160a:	f1bc 0f20 	cmp.w	ip, #32
    160e:	d0f7      	beq.n	1600 <base64_decode+0x20>
		if ((slen - i) >= 2 && src[i] == '\r' && src[i + 1] == '\n') {
    1610:	ebae 0906 	sub.w	r9, lr, r6
    1614:	f1b9 0f01 	cmp.w	r9, #1
    1618:	eba6 0505 	sub.w	r5, r6, r5
    161c:	d00d      	beq.n	163a <base64_decode+0x5a>
    161e:	f1bc 0f0d 	cmp.w	ip, #13
    1622:	d10a      	bne.n	163a <base64_decode+0x5a>
    1624:	eb03 0906 	add.w	r9, r3, r6
    1628:	f899 9001 	ldrb.w	r9, [r9, #1]
    162c:	f1b9 0f0a 	cmp.w	r9, #10
    1630:	d16e      	bne.n	1710 <base64_decode+0x130>
	for (i = n = j = 0U; i < slen; i++) {
    1632:	1c75      	adds	r5, r6, #1
    1634:	e7dd      	b.n	15f2 <base64_decode+0x12>
    1636:	462e      	mov	r6, r5
    1638:	e7e3      	b.n	1602 <base64_decode+0x22>
		if (src[i] == '\n') {
    163a:	f1bc 0f0a 	cmp.w	ip, #10
    163e:	d0f8      	beq.n	1632 <base64_decode+0x52>
		if (x != 0U) {
    1640:	b92d      	cbnz	r5, 164e <base64_decode+0x6e>
		if (src[i] == '=' && ++j > 2) {
    1642:	f1bc 0f3d 	cmp.w	ip, #61	; 0x3d
    1646:	d105      	bne.n	1654 <base64_decode+0x74>
    1648:	3701      	adds	r7, #1
    164a:	2f02      	cmp	r7, #2
    164c:	d90d      	bls.n	166a <base64_decode+0x8a>
			return -EINVAL;
    164e:	f06f 0015 	mvn.w	r0, #21
    1652:	e7d3      	b.n	15fc <base64_decode+0x1c>
		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    1654:	f01c 0f80 	tst.w	ip, #128	; 0x80
    1658:	d1f9      	bne.n	164e <base64_decode+0x6e>
    165a:	f818 500c 	ldrb.w	r5, [r8, ip]
    165e:	2d7f      	cmp	r5, #127	; 0x7f
    1660:	d0f5      	beq.n	164e <base64_decode+0x6e>
		if (base64_dec_map[src[i]] < 64 && j != 0U) {
    1662:	2d3f      	cmp	r5, #63	; 0x3f
    1664:	d801      	bhi.n	166a <base64_decode+0x8a>
    1666:	2f00      	cmp	r7, #0
    1668:	d1f1      	bne.n	164e <base64_decode+0x6e>
		n++;
    166a:	3401      	adds	r4, #1
    166c:	e7e1      	b.n	1632 <base64_decode+0x52>
    166e:	4635      	mov	r5, r6
    1670:	e7c1      	b.n	15f6 <base64_decode+0x16>
	n = (6 * (n >> 3)) + ((6 * (n & 0x7) + 7) >> 3);
    1672:	f04f 0c06 	mov.w	ip, #6
    1676:	f004 0607 	and.w	r6, r4, #7
    167a:	08e4      	lsrs	r4, r4, #3
    167c:	fb0c f606 	mul.w	r6, ip, r6
    1680:	fb0c f404 	mul.w	r4, ip, r4
    1684:	3607      	adds	r6, #7
	n -= j;
    1686:	1be4      	subs	r4, r4, r7
    1688:	eb04 04d6 	add.w	r4, r4, r6, lsr #3
	if (dst == NULL || dlen < n) {
    168c:	b170      	cbz	r0, 16ac <base64_decode+0xcc>
    168e:	428c      	cmp	r4, r1
    1690:	d80c      	bhi.n	16ac <base64_decode+0xcc>
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    1692:	2700      	movs	r7, #0
	if (dst == NULL || dlen < n) {
    1694:	4601      	mov	r1, r0
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    1696:	2603      	movs	r6, #3
    1698:	463c      	mov	r4, r7
		j -= (base64_dec_map[*src] == 64U);
    169a:	f8df e07c 	ldr.w	lr, [pc, #124]	; 1718 <base64_decode+0x138>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    169e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 171c <base64_decode+0x13c>
    16a2:	441d      	add	r5, r3
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    16a4:	429d      	cmp	r5, r3
    16a6:	d105      	bne.n	16b4 <base64_decode+0xd4>
	*olen = p - dst;
    16a8:	1a0c      	subs	r4, r1, r0
	return 0;
    16aa:	e7a5      	b.n	15f8 <base64_decode+0x18>
		return -ENOMEM;
    16ac:	f06f 000b 	mvn.w	r0, #11
		*olen = n;
    16b0:	6014      	str	r4, [r2, #0]
		return -ENOMEM;
    16b2:	e7a3      	b.n	15fc <base64_decode+0x1c>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    16b4:	f813 9b01 	ldrb.w	r9, [r3], #1
    16b8:	f1a9 0c0a 	sub.w	ip, r9, #10
    16bc:	fa5f fc8c 	uxtb.w	ip, ip
    16c0:	f1bc 0f16 	cmp.w	ip, #22
    16c4:	d804      	bhi.n	16d0 <base64_decode+0xf0>
    16c6:	fa48 fc0c 	asr.w	ip, r8, ip
    16ca:	f01c 0f01 	tst.w	ip, #1
    16ce:	d0e9      	beq.n	16a4 <base64_decode+0xc4>
		j -= (base64_dec_map[*src] == 64U);
    16d0:	f81e c009 	ldrb.w	ip, [lr, r9]
		if (++n == 4) {
    16d4:	3401      	adds	r4, #1
		j -= (base64_dec_map[*src] == 64U);
    16d6:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    16da:	bf08      	it	eq
    16dc:	3e01      	subeq	r6, #1
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    16de:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
		if (++n == 4) {
    16e2:	2c04      	cmp	r4, #4
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    16e4:	ea4c 1787 	orr.w	r7, ip, r7, lsl #6
		if (++n == 4) {
    16e8:	d1dc      	bne.n	16a4 <base64_decode+0xc4>
			if (j > 0) {
    16ea:	b17e      	cbz	r6, 170c <base64_decode+0x12c>
				*p++ = (unsigned char)(x >> 16);
    16ec:	0c3c      	lsrs	r4, r7, #16
			if (j > 1) {
    16ee:	2e01      	cmp	r6, #1
				*p++ = (unsigned char)(x >> 16);
    16f0:	700c      	strb	r4, [r1, #0]
			if (j > 1) {
    16f2:	d102      	bne.n	16fa <base64_decode+0x11a>
				*p++ = (unsigned char)(x >> 16);
    16f4:	3101      	adds	r1, #1
			n = 0;
    16f6:	2400      	movs	r4, #0
    16f8:	e7d4      	b.n	16a4 <base64_decode+0xc4>
			if (j > 2) {
    16fa:	2e02      	cmp	r6, #2
				*p++ = (unsigned char)(x >> 8);
    16fc:	ea4f 2417 	mov.w	r4, r7, lsr #8
    1700:	704c      	strb	r4, [r1, #1]
				*p++ = (unsigned char)(x);
    1702:	bf16      	itet	ne
    1704:	708f      	strbne	r7, [r1, #2]
				*p++ = (unsigned char)(x >> 8);
    1706:	3102      	addeq	r1, #2
				*p++ = (unsigned char)(x);
    1708:	3103      	addne	r1, #3
    170a:	e7f4      	b.n	16f6 <base64_decode+0x116>
			n = 0;
    170c:	4634      	mov	r4, r6
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    170e:	e7c9      	b.n	16a4 <base64_decode+0xc4>
		if (x != 0U) {
    1710:	2d00      	cmp	r5, #0
    1712:	d0a2      	beq.n	165a <base64_decode+0x7a>
    1714:	e79b      	b.n	164e <base64_decode+0x6e>
    1716:	bf00      	nop
    1718:	0000a10a 	.word	0x0000a10a
    171c:	ffbffff6 	.word	0xffbffff6

00001720 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    1720:	4b01      	ldr	r3, [pc, #4]	; (1728 <char_out+0x8>)
    1722:	681b      	ldr	r3, [r3, #0]
    1724:	4718      	bx	r3
    1726:	bf00      	nop
    1728:	2000c4f0 	.word	0x2000c4f0

0000172c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    172c:	b507      	push	{r0, r1, r2, lr}
    172e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    1730:	2100      	movs	r1, #0
    1732:	4602      	mov	r2, r0
    1734:	9100      	str	r1, [sp, #0]
    1736:	4803      	ldr	r0, [pc, #12]	; (1744 <vprintk+0x18>)
    1738:	f000 f914 	bl	1964 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    173c:	b003      	add	sp, #12
    173e:	f85d fb04 	ldr.w	pc, [sp], #4
    1742:	bf00      	nop
    1744:	00001721 	.word	0x00001721

00001748 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    174c:	8b05      	ldrh	r5, [r0, #24]
{
    174e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1750:	0728      	lsls	r0, r5, #28
{
    1752:	4690      	mov	r8, r2
	if (processing) {
    1754:	d411      	bmi.n	177a <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    1756:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1758:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    175c:	f040 80cd 	bne.w	18fa <process_event+0x1b2>
			evt = process_recheck(mgr);
    1760:	4620      	mov	r0, r4
    1762:	f006 fbd3 	bl	7f0c <process_recheck>
		}

		if (evt == EVT_NOP) {
    1766:	b178      	cbz	r0, 1788 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    1768:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    176a:	8b21      	ldrh	r1, [r4, #24]
    176c:	2804      	cmp	r0, #4
    176e:	d811      	bhi.n	1794 <process_event+0x4c>
    1770:	e8df f000 	tbb	[pc, r0]
    1774:	856d10c3 	.word	0x856d10c3
    1778:	95          	.byte	0x95
    1779:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    177a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    177c:	bf0c      	ite	eq
    177e:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1782:	f045 0520 	orrne.w	r5, r5, #32
    1786:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1788:	f388 8811 	msr	BASEPRI, r8
    178c:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1794:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1798:	45aa      	cmp	sl, r5
    179a:	f000 80a6 	beq.w	18ea <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    179e:	2700      	movs	r7, #0
    17a0:	46b9      	mov	r9, r7
    17a2:	463e      	mov	r6, r7
    17a4:	68a3      	ldr	r3, [r4, #8]
    17a6:	2b00      	cmp	r3, #0
    17a8:	f000 80bd 	beq.w	1926 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    17ac:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    17b0:	8321      	strh	r1, [r4, #24]
    17b2:	f388 8811 	msr	BASEPRI, r8
    17b6:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    17ba:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    17bc:	2900      	cmp	r1, #0
    17be:	f000 80bb 	beq.w	1938 <process_event+0x1f0>
	return node->next;
    17c2:	680d      	ldr	r5, [r1, #0]
    17c4:	2900      	cmp	r1, #0
    17c6:	f000 80b7 	beq.w	1938 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    17ca:	4633      	mov	r3, r6
    17cc:	4652      	mov	r2, sl
    17ce:	4620      	mov	r0, r4
    17d0:	f8d1 8004 	ldr.w	r8, [r1, #4]
    17d4:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    17d6:	2d00      	cmp	r5, #0
    17d8:	d076      	beq.n	18c8 <process_event+0x180>
    17da:	682b      	ldr	r3, [r5, #0]
    17dc:	4629      	mov	r1, r5
    17de:	461d      	mov	r5, r3
    17e0:	e7f0      	b.n	17c4 <process_event+0x7c>
    17e2:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    17e6:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    17e8:	2a01      	cmp	r2, #1
    17ea:	d81b      	bhi.n	1824 <process_event+0xdc>
	list->head = NULL;
    17ec:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17ee:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    17f2:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    17f4:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17f6:	b289      	uxth	r1, r1
	list->tail = NULL;
    17f8:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    17fc:	d109      	bne.n	1812 <process_event+0xca>
    17fe:	463b      	mov	r3, r7
    1800:	e003      	b.n	180a <process_event+0xc2>
				mgr->refs += 1U;
    1802:	8b62      	ldrh	r2, [r4, #26]
    1804:	3201      	adds	r2, #1
    1806:	8362      	strh	r2, [r4, #26]
	return node->next;
    1808:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    180a:	2b00      	cmp	r3, #0
    180c:	d1f9      	bne.n	1802 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    180e:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    1812:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1814:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1816:	f006 fb79 	bl	7f0c <process_recheck>
    181a:	2800      	cmp	r0, #0
    181c:	d07b      	beq.n	1916 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    181e:	f041 0120 	orr.w	r1, r1, #32
    1822:	e077      	b.n	1914 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1824:	2b04      	cmp	r3, #4
    1826:	d10a      	bne.n	183e <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1828:	f021 0107 	bic.w	r1, r1, #7
    182c:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    182e:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1830:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1832:	f006 fb6b 	bl	7f0c <process_recheck>
    1836:	b110      	cbz	r0, 183e <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1838:	f041 0120 	orr.w	r1, r1, #32
    183c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    183e:	8b21      	ldrh	r1, [r4, #24]
    1840:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1844:	45aa      	cmp	sl, r5
    1846:	d050      	beq.n	18ea <process_event+0x1a2>
    1848:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    184a:	46b9      	mov	r9, r7
    184c:	e7aa      	b.n	17a4 <process_event+0x5c>
			transit = mgr->transitions->start;
    184e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1850:	f021 0107 	bic.w	r1, r1, #7
    1854:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    1858:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    185a:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    185e:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1860:	d12d      	bne.n	18be <process_event+0x176>
		    || (transit != NULL)) {
    1862:	f1b9 0f00 	cmp.w	r9, #0
    1866:	d040      	beq.n	18ea <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1868:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    186c:	8321      	strh	r1, [r4, #24]
    186e:	f388 8811 	msr	BASEPRI, r8
    1872:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    1876:	4620      	mov	r0, r4
    1878:	4939      	ldr	r1, [pc, #228]	; (1960 <process_event+0x218>)
    187a:	47c8      	blx	r9
    187c:	e029      	b.n	18d2 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    187e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    1882:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1884:	f041 0104 	orr.w	r1, r1, #4
    1888:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    188a:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    188c:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1890:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1892:	d0e6      	beq.n	1862 <process_event+0x11a>
    1894:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1896:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    189a:	463e      	mov	r6, r7
    189c:	e782      	b.n	17a4 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    189e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    18a2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    18a4:	f041 0105 	orr.w	r1, r1, #5
    18a8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    18aa:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    18ac:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    18b0:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    18b2:	d0d6      	beq.n	1862 <process_event+0x11a>
    18b4:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    18b6:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    18ba:	463e      	mov	r6, r7
    18bc:	e772      	b.n	17a4 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    18be:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    18c0:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    18c4:	463e      	mov	r6, r7
    18c6:	e76d      	b.n	17a4 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    18c8:	462b      	mov	r3, r5
    18ca:	e787      	b.n	17dc <process_event+0x94>
			if (transit != NULL) {
    18cc:	f1b9 0f00 	cmp.w	r9, #0
    18d0:	d1d1      	bne.n	1876 <process_event+0x12e>
	__asm__ volatile(
    18d2:	f04f 0320 	mov.w	r3, #32
    18d6:	f3ef 8811 	mrs	r8, BASEPRI
    18da:	f383 8812 	msr	BASEPRI_MAX, r3
    18de:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    18e2:	8b23      	ldrh	r3, [r4, #24]
    18e4:	f023 0308 	bic.w	r3, r3, #8
    18e8:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    18ea:	8b25      	ldrh	r5, [r4, #24]
    18ec:	06ea      	lsls	r2, r5, #27
    18ee:	d52e      	bpl.n	194e <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    18f0:	f025 0310 	bic.w	r3, r5, #16
    18f4:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    18f6:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    18fa:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    18fc:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    18fe:	2e00      	cmp	r6, #0
    1900:	f6bf af6f 	bge.w	17e2 <process_event+0x9a>
	list->head = NULL;
    1904:	2300      	movs	r3, #0
		*clients = mgr->clients;
    1906:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    1908:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    190c:	f021 0107 	bic.w	r1, r1, #7
    1910:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1914:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1916:	8b21      	ldrh	r1, [r4, #24]
    1918:	f04f 0900 	mov.w	r9, #0
    191c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1920:	45aa      	cmp	sl, r5
    1922:	f47f af3f 	bne.w	17a4 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    1926:	2f00      	cmp	r7, #0
    1928:	d09b      	beq.n	1862 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    192a:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    192e:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    1930:	f388 8811 	msr	BASEPRI, r8
    1934:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    1938:	2f00      	cmp	r7, #0
    193a:	d0c7      	beq.n	18cc <process_event+0x184>
	return node->next;
    193c:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    193e:	4639      	mov	r1, r7
    1940:	4633      	mov	r3, r6
    1942:	4652      	mov	r2, sl
    1944:	4620      	mov	r0, r4
    1946:	f006 fb0d 	bl	7f64 <notify_one>
	list->head = node;
    194a:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    194c:	e7f4      	b.n	1938 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    194e:	06ab      	lsls	r3, r5, #26
    1950:	f57f af1a 	bpl.w	1788 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1954:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1958:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    195a:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    195e:	e6ff      	b.n	1760 <process_event+0x18>
    1960:	00007f91 	.word	0x00007f91

00001964 <z_cbvprintf_impl>:
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fmt,
		     va_list ap, uint32_t flags)
{
    1964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1968:	4682      	mov	sl, r0
	size_t count = 0;
    196a:	f04f 0900 	mov.w	r9, #0
{
    196e:	b08d      	sub	sp, #52	; 0x34
    1970:	461d      	mov	r5, r3

	const bool tagged_ap = (flags & Z_CBVPRINTF_PROCESS_FLAG_TAGGED_ARGS)
			       == Z_CBVPRINTF_PROCESS_FLAG_TAGGED_ARGS;

	/* we pre-increment in the loop  afterwards */
	fmt--;
    1972:	1e53      	subs	r3, r2, #1
{
    1974:	9101      	str	r1, [sp, #4]
	fmt--;
    1976:	9303      	str	r3, [sp, #12]

start:
	while (*++fmt != '%') {
    1978:	9b03      	ldr	r3, [sp, #12]
    197a:	7858      	ldrb	r0, [r3, #1]
    197c:	1c5c      	adds	r4, r3, #1
    197e:	2825      	cmp	r0, #37	; 0x25
    1980:	d119      	bne.n	19b6 <z_cbvprintf_impl+0x52>
	min_width = -1;
	precision = -1;
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;
    1982:	2000      	movs	r0, #0
	precision = -1;
    1984:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff

	for (fmt++ ; ; fmt++) {
    1988:	461e      	mov	r6, r3
	min_width = -1;
    198a:	4644      	mov	r4, r8
	length_mod = 0;
    198c:	4603      	mov	r3, r0
	for (fmt++ ; ; fmt++) {
    198e:	3602      	adds	r6, #2
	padding_mode = 0;
    1990:	9002      	str	r0, [sp, #8]
		switch (*fmt) {
    1992:	7831      	ldrb	r1, [r6, #0]
    1994:	9603      	str	r6, [sp, #12]
    1996:	2939      	cmp	r1, #57	; 0x39
    1998:	d855      	bhi.n	1a46 <z_cbvprintf_impl+0xe2>
    199a:	291f      	cmp	r1, #31
    199c:	d814      	bhi.n	19c8 <z_cbvprintf_impl+0x64>
    199e:	2900      	cmp	r1, #0
    19a0:	f000 81ee 	beq.w	1d80 <z_cbvprintf_impl+0x41c>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
    19a4:	9901      	ldr	r1, [sp, #4]
    19a6:	2025      	movs	r0, #37	; 0x25
    19a8:	47d0      	blx	sl
			OUTC(*fmt);
    19aa:	9901      	ldr	r1, [sp, #4]
    19ac:	7830      	ldrb	r0, [r6, #0]
    19ae:	47d0      	blx	sl
    19b0:	f109 0902 	add.w	r9, r9, #2
			goto start;
    19b4:	e7e0      	b.n	1978 <z_cbvprintf_impl+0x14>
		if (*fmt == '\0') {
    19b6:	2800      	cmp	r0, #0
    19b8:	f000 81e2 	beq.w	1d80 <z_cbvprintf_impl+0x41c>
		OUTC(*fmt);
    19bc:	9901      	ldr	r1, [sp, #4]
    19be:	47d0      	blx	sl
    19c0:	f109 0901 	add.w	r9, r9, #1
	while (*++fmt != '%') {
    19c4:	9403      	str	r4, [sp, #12]
    19c6:	e7d7      	b.n	1978 <z_cbvprintf_impl+0x14>
		switch (*fmt) {
    19c8:	f1a1 0220 	sub.w	r2, r1, #32
    19cc:	2a19      	cmp	r2, #25
    19ce:	d8e9      	bhi.n	19a4 <z_cbvprintf_impl+0x40>
    19d0:	a701      	add	r7, pc, #4	; (adr r7, 19d8 <z_cbvprintf_impl+0x74>)
    19d2:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
    19d6:	bf00      	nop
    19d8:	00001a41 	.word	0x00001a41
    19dc:	000019a5 	.word	0x000019a5
    19e0:	000019a5 	.word	0x000019a5
    19e4:	00001a41 	.word	0x00001a41
    19e8:	000019a5 	.word	0x000019a5
    19ec:	00001ac1 	.word	0x00001ac1
    19f0:	000019a5 	.word	0x000019a5
    19f4:	000019a5 	.word	0x000019a5
    19f8:	000019a5 	.word	0x000019a5
    19fc:	000019a5 	.word	0x000019a5
    1a00:	00001b0d 	.word	0x00001b0d
    1a04:	00001a41 	.word	0x00001a41
    1a08:	000019a5 	.word	0x000019a5
    1a0c:	00001b21 	.word	0x00001b21
    1a10:	00001acd 	.word	0x00001acd
    1a14:	000019a5 	.word	0x000019a5
    1a18:	00001adb 	.word	0x00001adb
    1a1c:	00001afb 	.word	0x00001afb
    1a20:	00001afb 	.word	0x00001afb
    1a24:	00001afb 	.word	0x00001afb
    1a28:	00001afb 	.word	0x00001afb
    1a2c:	00001afb 	.word	0x00001afb
    1a30:	00001afb 	.word	0x00001afb
    1a34:	00001afb 	.word	0x00001afb
    1a38:	00001afb 	.word	0x00001afb
    1a3c:	00001afb 	.word	0x00001afb
    1a40:	4608      	mov	r0, r1
    1a42:	3601      	adds	r6, #1
    1a44:	e7a5      	b.n	1992 <z_cbvprintf_impl+0x2e>
    1a46:	2958      	cmp	r1, #88	; 0x58
    1a48:	f000 80eb 	beq.w	1c22 <z_cbvprintf_impl+0x2be>
    1a4c:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
    1a50:	b2d7      	uxtb	r7, r2
    1a52:	2f17      	cmp	r7, #23
    1a54:	d8a6      	bhi.n	19a4 <z_cbvprintf_impl+0x40>
    1a56:	2a17      	cmp	r2, #23
    1a58:	d8a4      	bhi.n	19a4 <z_cbvprintf_impl+0x40>
    1a5a:	a701      	add	r7, pc, #4	; (adr r7, 1a60 <z_cbvprintf_impl+0xfc>)
    1a5c:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
    1a60:	00001cc9 	.word	0x00001cc9
    1a64:	00001b47 	.word	0x00001b47
    1a68:	000019a5 	.word	0x000019a5
    1a6c:	000019a5 	.word	0x000019a5
    1a70:	000019a5 	.word	0x000019a5
    1a74:	00001b27 	.word	0x00001b27
    1a78:	00001b47 	.word	0x00001b47
    1a7c:	000019a5 	.word	0x000019a5
    1a80:	000019a5 	.word	0x000019a5
    1a84:	00001b27 	.word	0x00001b27
    1a88:	000019a5 	.word	0x000019a5
    1a8c:	000019a5 	.word	0x000019a5
    1a90:	000019a5 	.word	0x000019a5
    1a94:	00001bfd 	.word	0x00001bfd
    1a98:	000019a5 	.word	0x000019a5
    1a9c:	000019a5 	.word	0x000019a5
    1aa0:	00001c9d 	.word	0x00001c9d
    1aa4:	000019a5 	.word	0x000019a5
    1aa8:	00001b47 	.word	0x00001b47
    1aac:	000019a5 	.word	0x000019a5
    1ab0:	000019a5 	.word	0x000019a5
    1ab4:	00001bfd 	.word	0x00001bfd
    1ab8:	000019a5 	.word	0x000019a5
    1abc:	00001b27 	.word	0x00001b27
			OUTC('%');
    1ac0:	2025      	movs	r0, #37	; 0x25
    1ac2:	9901      	ldr	r1, [sp, #4]
    1ac4:	47d0      	blx	sl
    1ac6:	f109 0901 	add.w	r9, r9, #1
			goto start;
    1aca:	e755      	b.n	1978 <z_cbvprintf_impl+0x14>
			padding_mode &= (char)~PAD_ZERO;
    1acc:	9a02      	ldr	r2, [sp, #8]
			precision = 0;
    1ace:	f04f 0800 	mov.w	r8, #0
			padding_mode &= (char)~PAD_ZERO;
    1ad2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    1ad6:	9202      	str	r2, [sp, #8]
			continue;
    1ad8:	e7b3      	b.n	1a42 <z_cbvprintf_impl+0xde>
			if (min_width < 0 && precision < 0 && !padding_mode) {
    1ada:	2c00      	cmp	r4, #0
    1adc:	da0d      	bge.n	1afa <z_cbvprintf_impl+0x196>
    1ade:	f1b8 0f00 	cmp.w	r8, #0
    1ae2:	da0d      	bge.n	1b00 <z_cbvprintf_impl+0x19c>
    1ae4:	9a02      	ldr	r2, [sp, #8]
    1ae6:	2a00      	cmp	r2, #0
    1ae8:	f000 8142 	beq.w	1d70 <z_cbvprintf_impl+0x40c>
				min_width = 10 * min_width + *fmt - '0';
    1aec:	220a      	movs	r2, #10
				if (min_width < 0) {
    1aee:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
				min_width = 10 * min_width + *fmt - '0';
    1af2:	fb02 1404 	mla	r4, r2, r4, r1
    1af6:	3c30      	subs	r4, #48	; 0x30
    1af8:	e7a3      	b.n	1a42 <z_cbvprintf_impl+0xde>
			if (precision >= 0) {
    1afa:	f1b8 0f00 	cmp.w	r8, #0
    1afe:	dbf5      	blt.n	1aec <z_cbvprintf_impl+0x188>
				precision = 10 * precision + *fmt - '0';
    1b00:	220a      	movs	r2, #10
    1b02:	fb02 1208 	mla	r2, r2, r8, r1
    1b06:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
    1b0a:	e79a      	b.n	1a42 <z_cbvprintf_impl+0xde>
			if (precision >= 0) {
    1b0c:	f1b8 0f00 	cmp.w	r8, #0
				precision = va_arg(ap, int);
    1b10:	f855 2b04 	ldr.w	r2, [r5], #4
			if (precision >= 0) {
    1b14:	f280 812e 	bge.w	1d74 <z_cbvprintf_impl+0x410>
				if (min_width < 0) {
    1b18:	2a00      	cmp	r2, #0
    1b1a:	f280 812d 	bge.w	1d78 <z_cbvprintf_impl+0x414>
					min_width = -min_width;
    1b1e:	4254      	negs	r4, r2
		switch (*fmt) {
    1b20:	2202      	movs	r2, #2
				padding_mode = PAD_ZERO;
    1b22:	9202      	str	r2, [sp, #8]
    1b24:	e78d      	b.n	1a42 <z_cbvprintf_impl+0xde>
			if (*fmt == 'h' && length_mod == 'h') {
    1b26:	2968      	cmp	r1, #104	; 0x68
    1b28:	d103      	bne.n	1b32 <z_cbvprintf_impl+0x1ce>
    1b2a:	2b68      	cmp	r3, #104	; 0x68
    1b2c:	d106      	bne.n	1b3c <z_cbvprintf_impl+0x1d8>
				length_mod = 'H';
    1b2e:	2348      	movs	r3, #72	; 0x48
    1b30:	e787      	b.n	1a42 <z_cbvprintf_impl+0xde>
			} else if (*fmt == 'l' && length_mod == 'l') {
    1b32:	296c      	cmp	r1, #108	; 0x6c
    1b34:	d102      	bne.n	1b3c <z_cbvprintf_impl+0x1d8>
    1b36:	2b6c      	cmp	r3, #108	; 0x6c
    1b38:	f000 8120 	beq.w	1d7c <z_cbvprintf_impl+0x418>
			} else if (length_mod == '\0') {
    1b3c:	2b00      	cmp	r3, #0
    1b3e:	f47f af31 	bne.w	19a4 <z_cbvprintf_impl+0x40>
		switch (*fmt) {
    1b42:	460b      	mov	r3, r1
    1b44:	e77d      	b.n	1a42 <z_cbvprintf_impl+0xde>
			if (length_mod == 'z') {
    1b46:	2b7a      	cmp	r3, #122	; 0x7a
    1b48:	d106      	bne.n	1b58 <z_cbvprintf_impl+0x1f4>
			} else if (*fmt == 'u') {
    1b4a:	2975      	cmp	r1, #117	; 0x75
				precision = va_arg(ap, int);
    1b4c:	f855 6b04 	ldr.w	r6, [r5], #4
			} else if (*fmt == 'u') {
    1b50:	d114      	bne.n	1b7c <z_cbvprintf_impl+0x218>
				d = va_arg(ap, unsigned int);
    1b52:	f04f 0b00 	mov.w	fp, #0
			if (*fmt != 'u' && (int_value_type)d < 0) {
    1b56:	e00c      	b.n	1b72 <z_cbvprintf_impl+0x20e>
			} else if (length_mod == 'l') {
    1b58:	2b6c      	cmp	r3, #108	; 0x6c
    1b5a:	d0f6      	beq.n	1b4a <z_cbvprintf_impl+0x1e6>
			} else if (length_mod == 'L') {
    1b5c:	2b4c      	cmp	r3, #76	; 0x4c
    1b5e:	d1f4      	bne.n	1b4a <z_cbvprintf_impl+0x1e6>
					unsigned long long llu =
    1b60:	3507      	adds	r5, #7
    1b62:	f025 0307 	bic.w	r3, r5, #7
				if (*fmt == 'u') {
    1b66:	2975      	cmp	r1, #117	; 0x75
					unsigned long long llu =
    1b68:	f103 0508 	add.w	r5, r3, #8
    1b6c:	e9d3 6b00 	ldrd	r6, fp, [r3]
				if (*fmt == 'u') {
    1b70:	d106      	bne.n	1b80 <z_cbvprintf_impl+0x21c>
			} else if (special == ' ') {
    1b72:	2820      	cmp	r0, #32
    1b74:	d13b      	bne.n	1bee <z_cbvprintf_impl+0x28a>
				prefix = " ";
    1b76:	4f84      	ldr	r7, [pc, #528]	; (1d88 <z_cbvprintf_impl+0x424>)
				min_width--;
    1b78:	3c01      	subs	r4, #1
    1b7a:	e009      	b.n	1b90 <z_cbvprintf_impl+0x22c>
				d = va_arg(ap, int);
    1b7c:	ea4f 7be6 	mov.w	fp, r6, asr #31
			if (*fmt != 'u' && (int_value_type)d < 0) {
    1b80:	f1bb 0f00 	cmp.w	fp, #0
    1b84:	daf5      	bge.n	1b72 <z_cbvprintf_impl+0x20e>
				d = -d;
    1b86:	4276      	negs	r6, r6
				prefix = "-";
    1b88:	4f80      	ldr	r7, [pc, #512]	; (1d8c <z_cbvprintf_impl+0x428>)
				d = -d;
    1b8a:	eb6b 0b4b 	sbc.w	fp, fp, fp, lsl #1
				min_width--;
    1b8e:	3c01      	subs	r4, #1
	int i = 0;
    1b90:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    1b94:	9305      	str	r3, [sp, #20]
    1b96:	2300      	movs	r3, #0
    1b98:	9304      	str	r3, [sp, #16]
		unsigned int c = num % base;
    1b9a:	4630      	mov	r0, r6
    1b9c:	4659      	mov	r1, fp
    1b9e:	220a      	movs	r2, #10
    1ba0:	2300      	movs	r3, #0
    1ba2:	f7fe facf 	bl	144 <__aeabi_uldivmod>
    1ba6:	9b04      	ldr	r3, [sp, #16]
    1ba8:	468e      	mov	lr, r1
		buftop[--i] = c + '0';
    1baa:	1e59      	subs	r1, r3, #1
    1bac:	9104      	str	r1, [sp, #16]
    1bae:	9905      	ldr	r1, [sp, #20]
    1bb0:	46b4      	mov	ip, r6
    1bb2:	3230      	adds	r2, #48	; 0x30
    1bb4:	f801 2d01 	strb.w	r2, [r1, #-1]!
    1bb8:	465a      	mov	r2, fp
	} while (num);
    1bba:	f1bc 0f0a 	cmp.w	ip, #10
    1bbe:	f172 0200 	sbcs.w	r2, r2, #0
		num /= base;
    1bc2:	4606      	mov	r6, r0
    1bc4:	46f3      	mov	fp, lr
		buftop[--i] = c + '0';
    1bc6:	9105      	str	r1, [sp, #20]
	} while (num);
    1bc8:	d2e7      	bcs.n	1b9a <z_cbvprintf_impl+0x236>
	return -i;
    1bca:	f1c3 0b01 	rsb	fp, r3, #1
			data = buf + sizeof(buf) - data_len;
    1bce:	3330      	adds	r3, #48	; 0x30
			data = buf + sizeof(buf) - data_len;
    1bd0:	eb0d 0603 	add.w	r6, sp, r3
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1bd4:	f1b8 0f00 	cmp.w	r8, #0
			data = buf + sizeof(buf) - data_len;
    1bd8:	f1a6 0604 	sub.w	r6, r6, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1bdc:	da6d      	bge.n	1cba <z_cbvprintf_impl+0x356>
    1bde:	9b02      	ldr	r3, [sp, #8]
    1be0:	07d9      	lsls	r1, r3, #31
    1be2:	d47c      	bmi.n	1cde <z_cbvprintf_impl+0x37a>
			precision = min_width;
		}
		min_width -= data_len;
		precision -= data_len;
    1be4:	eba8 030b 	sub.w	r3, r8, fp
		min_width -= data_len;
    1be8:	eba4 040b 	sub.w	r4, r4, fp
    1bec:	e013      	b.n	1c16 <z_cbvprintf_impl+0x2b2>
			} else if (special == '+') {
    1bee:	282b      	cmp	r0, #43	; 0x2b
				prefix = "+";
    1bf0:	bf0a      	itet	eq
    1bf2:	4f67      	ldreq	r7, [pc, #412]	; (1d90 <z_cbvprintf_impl+0x42c>)
	prefix = "";
    1bf4:	4f67      	ldrne	r7, [pc, #412]	; (1d94 <z_cbvprintf_impl+0x430>)
				min_width--;
    1bf6:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
    1bfa:	e7c9      	b.n	1b90 <z_cbvprintf_impl+0x22c>
			if (*fmt == 'p') {
    1bfc:	2970      	cmp	r1, #112	; 0x70
    1bfe:	d10f      	bne.n	1c20 <z_cbvprintf_impl+0x2bc>
				x = (uintptr_t)va_arg(ap, void *);
    1c00:	f855 2b04 	ldr.w	r2, [r5], #4
    1c04:	2300      	movs	r3, #0
				if (x == (uint_value_type)0) {
    1c06:	b9fa      	cbnz	r2, 1c48 <z_cbvprintf_impl+0x2e4>
		precision -= data_len;
    1c08:	f06f 0304 	mvn.w	r3, #4
					data_len = 5;
    1c0c:	f04f 0b05 	mov.w	fp, #5
					data = "(nil)";
    1c10:	4e61      	ldr	r6, [pc, #388]	; (1d98 <z_cbvprintf_impl+0x434>)
		min_width -= data_len;
    1c12:	3c05      	subs	r4, #5
	prefix = "";
    1c14:	4f5f      	ldr	r7, [pc, #380]	; (1d94 <z_cbvprintf_impl+0x430>)
		if (precision > 0) {
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
    1c16:	9a02      	ldr	r2, [sp, #8]
    1c18:	0792      	lsls	r2, r2, #30
    1c1a:	d46f      	bmi.n	1cfc <z_cbvprintf_impl+0x398>
    1c1c:	46a0      	mov	r8, r4
    1c1e:	e065      	b.n	1cec <z_cbvprintf_impl+0x388>
		switch (*fmt) {
    1c20:	2178      	movs	r1, #120	; 0x78
			} else if (length_mod == 'l') {
    1c22:	2b6c      	cmp	r3, #108	; 0x6c
    1c24:	d103      	bne.n	1c2e <z_cbvprintf_impl+0x2ca>
				x = va_arg(ap, unsigned int);
    1c26:	2300      	movs	r3, #0
    1c28:	f855 2b04 	ldr.w	r2, [r5], #4
    1c2c:	e008      	b.n	1c40 <z_cbvprintf_impl+0x2dc>
			} else if (length_mod == 'L') {
    1c2e:	2b4c      	cmp	r3, #76	; 0x4c
    1c30:	d1f9      	bne.n	1c26 <z_cbvprintf_impl+0x2c2>
				unsigned long long llx =
    1c32:	3507      	adds	r5, #7
    1c34:	f025 0307 	bic.w	r3, r5, #7
    1c38:	461d      	mov	r5, r3
    1c3a:	685b      	ldr	r3, [r3, #4]
    1c3c:	f855 2b08 	ldr.w	r2, [r5], #8
			if (special == '#') {
    1c40:	2823      	cmp	r0, #35	; 0x23
    1c42:	d125      	bne.n	1c90 <z_cbvprintf_impl+0x32c>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1c44:	0688      	lsls	r0, r1, #26
    1c46:	d521      	bpl.n	1c8c <z_cbvprintf_impl+0x328>
    1c48:	4f54      	ldr	r7, [pc, #336]	; (1d9c <z_cbvprintf_impl+0x438>)
				min_width -= 2;
    1c4a:	3c02      	subs	r4, #2
	int i = 0;
    1c4c:	2600      	movs	r6, #0
			data_len = convert_value(x, 16, ALPHA(*fmt),
    1c4e:	f001 0160 	and.w	r1, r1, #96	; 0x60
    1c52:	f1a1 0b39 	sub.w	fp, r1, #57	; 0x39
	int i = 0;
    1c56:	f10d 0e2d 	add.w	lr, sp, #45	; 0x2d
		unsigned int c = num % base;
    1c5a:	f002 010f 	and.w	r1, r2, #15
		if (c >= 10) {
    1c5e:	2909      	cmp	r1, #9
			c += alpha;
    1c60:	bf88      	it	hi
    1c62:	4459      	addhi	r1, fp
		buftop[--i] = c + '0';
    1c64:	3130      	adds	r1, #48	; 0x30
    1c66:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	} while (num);
    1c6a:	2a10      	cmp	r2, #16
		num /= base;
    1c6c:	ea4f 1112 	mov.w	r1, r2, lsr #4
    1c70:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
    1c74:	ea4f 1013 	mov.w	r0, r3, lsr #4
	} while (num);
    1c78:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
    1c7c:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
	} while (num);
    1c80:	d208      	bcs.n	1c94 <z_cbvprintf_impl+0x330>
	return -i;
    1c82:	f1c6 0b01 	rsb	fp, r6, #1
			data = buf + sizeof(buf) - data_len;
    1c86:	f106 0330 	add.w	r3, r6, #48	; 0x30
    1c8a:	e7a1      	b.n	1bd0 <z_cbvprintf_impl+0x26c>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1c8c:	4f44      	ldr	r7, [pc, #272]	; (1da0 <z_cbvprintf_impl+0x43c>)
    1c8e:	e7dc      	b.n	1c4a <z_cbvprintf_impl+0x2e6>
	prefix = "";
    1c90:	4f40      	ldr	r7, [pc, #256]	; (1d94 <z_cbvprintf_impl+0x430>)
    1c92:	e7db      	b.n	1c4c <z_cbvprintf_impl+0x2e8>
		buftop[--i] = c + '0';
    1c94:	4666      	mov	r6, ip
		num /= base;
    1c96:	460a      	mov	r2, r1
    1c98:	4603      	mov	r3, r0
    1c9a:	e7de      	b.n	1c5a <z_cbvprintf_impl+0x2f6>
			data = va_arg(ap, char *);
    1c9c:	f855 6b04 	ldr.w	r6, [r5], #4
			data_len = strlen(data);
    1ca0:	4630      	mov	r0, r6
    1ca2:	f006 fd7f 	bl	87a4 <strlen>
			if (precision >= 0 && data_len > precision) {
    1ca6:	f1b8 0f00 	cmp.w	r8, #0
			data_len = strlen(data);
    1caa:	4683      	mov	fp, r0
			if (precision >= 0 && data_len > precision) {
    1cac:	db02      	blt.n	1cb4 <z_cbvprintf_impl+0x350>
    1cae:	4540      	cmp	r0, r8
    1cb0:	bfa8      	it	ge
    1cb2:	46c3      	movge	fp, r8
			precision = 0;
    1cb4:	f04f 0800 	mov.w	r8, #0
	prefix = "";
    1cb8:	4f36      	ldr	r7, [pc, #216]	; (1d94 <z_cbvprintf_impl+0x430>)
		precision -= data_len;
    1cba:	eba8 030b 	sub.w	r3, r8, fp
		if (precision > 0) {
    1cbe:	2b00      	cmp	r3, #0
    1cc0:	dd92      	ble.n	1be8 <z_cbvprintf_impl+0x284>
			min_width -= precision;
    1cc2:	eba4 0408 	sub.w	r4, r4, r8
    1cc6:	e7a6      	b.n	1c16 <z_cbvprintf_impl+0x2b2>
			buf[0] = c;
    1cc8:	f855 3b04 	ldr.w	r3, [r5], #4
			data_len = 1;
    1ccc:	f04f 0b01 	mov.w	fp, #1
			buf[0] = c;
    1cd0:	f88d 3018 	strb.w	r3, [sp, #24]
		min_width -= data_len;
    1cd4:	3c01      	subs	r4, #1
		precision -= data_len;
    1cd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			data = buf;
    1cda:	ae06      	add	r6, sp, #24
    1cdc:	e79a      	b.n	1c14 <z_cbvprintf_impl+0x2b0>
    1cde:	46a0      	mov	r8, r4
    1ce0:	e7eb      	b.n	1cba <z_cbvprintf_impl+0x356>
    1ce2:	9302      	str	r3, [sp, #8]
			while (--min_width >= 0) {
				OUTC(' ');
    1ce4:	2020      	movs	r0, #32
    1ce6:	9901      	ldr	r1, [sp, #4]
    1ce8:	47d0      	blx	sl
    1cea:	9b02      	ldr	r3, [sp, #8]
			while (--min_width >= 0) {
    1cec:	f1b8 0801 	subs.w	r8, r8, #1
    1cf0:	d5f7      	bpl.n	1ce2 <z_cbvprintf_impl+0x37e>
    1cf2:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
    1cf6:	3c01      	subs	r4, #1
    1cf8:	4491      	add	r9, r2
    1cfa:	1aa4      	subs	r4, r4, r2
    1cfc:	46b8      	mov	r8, r7
    1cfe:	e006      	b.n	1d0e <z_cbvprintf_impl+0x3aa>
    1d00:	9304      	str	r3, [sp, #16]
    1d02:	9202      	str	r2, [sp, #8]
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
    1d04:	9901      	ldr	r1, [sp, #4]
    1d06:	47d0      	blx	sl
    1d08:	9a02      	ldr	r2, [sp, #8]
    1d0a:	9b04      	ldr	r3, [sp, #16]
    1d0c:	4690      	mov	r8, r2
		while (*prefix) {
    1d0e:	4642      	mov	r2, r8
    1d10:	f812 0b01 	ldrb.w	r0, [r2], #1
    1d14:	2800      	cmp	r0, #0
    1d16:	d1f3      	bne.n	1d00 <z_cbvprintf_impl+0x39c>
    1d18:	461a      	mov	r2, r3
		}
		while (--precision >= 0) {
    1d1a:	3a01      	subs	r2, #1
    1d1c:	d515      	bpl.n	1d4a <z_cbvprintf_impl+0x3e6>
    1d1e:	2b00      	cmp	r3, #0
    1d20:	bfac      	ite	ge
    1d22:	ebc7 0703 	rsbge	r7, r7, r3
    1d26:	427f      	neglt	r7, r7
    1d28:	465b      	mov	r3, fp
			OUTC('0');
		}
		while (--data_len >= 0) {
    1d2a:	3b01      	subs	r3, #1
    1d2c:	d515      	bpl.n	1d5a <z_cbvprintf_impl+0x3f6>
    1d2e:	f1bb 0f00 	cmp.w	fp, #0
    1d32:	bfa8      	it	ge
    1d34:	445f      	addge	r7, fp
    1d36:	4626      	mov	r6, r4
    1d38:	444f      	add	r7, r9
			OUTC(*data++);
		}
		while (--min_width >= 0) {
    1d3a:	3e01      	subs	r6, #1
    1d3c:	d514      	bpl.n	1d68 <z_cbvprintf_impl+0x404>
    1d3e:	2c00      	cmp	r4, #0
    1d40:	bfa8      	it	ge
    1d42:	193f      	addge	r7, r7, r4
    1d44:	eb07 0908 	add.w	r9, r7, r8
    1d48:	e616      	b.n	1978 <z_cbvprintf_impl+0x14>
    1d4a:	9304      	str	r3, [sp, #16]
    1d4c:	9202      	str	r2, [sp, #8]
			OUTC('0');
    1d4e:	2030      	movs	r0, #48	; 0x30
    1d50:	9901      	ldr	r1, [sp, #4]
    1d52:	47d0      	blx	sl
    1d54:	9b04      	ldr	r3, [sp, #16]
    1d56:	9a02      	ldr	r2, [sp, #8]
    1d58:	e7df      	b.n	1d1a <z_cbvprintf_impl+0x3b6>
    1d5a:	9302      	str	r3, [sp, #8]
			OUTC(*data++);
    1d5c:	9901      	ldr	r1, [sp, #4]
    1d5e:	f816 0b01 	ldrb.w	r0, [r6], #1
    1d62:	47d0      	blx	sl
    1d64:	9b02      	ldr	r3, [sp, #8]
    1d66:	e7e0      	b.n	1d2a <z_cbvprintf_impl+0x3c6>
			OUTC(' ');
    1d68:	9901      	ldr	r1, [sp, #4]
    1d6a:	2020      	movs	r0, #32
    1d6c:	47d0      	blx	sl
    1d6e:	e7e4      	b.n	1d3a <z_cbvprintf_impl+0x3d6>
				padding_mode = PAD_ZERO;
    1d70:	2201      	movs	r2, #1
    1d72:	e6d6      	b.n	1b22 <z_cbvprintf_impl+0x1be>
				precision = va_arg(ap, int);
    1d74:	4690      	mov	r8, r2
    1d76:	e664      	b.n	1a42 <z_cbvprintf_impl+0xde>
    1d78:	4614      	mov	r4, r2
    1d7a:	e662      	b.n	1a42 <z_cbvprintf_impl+0xde>
				length_mod = 'L';
    1d7c:	234c      	movs	r3, #76	; 0x4c
    1d7e:	e660      	b.n	1a42 <z_cbvprintf_impl+0xde>
		}

		goto start;
	}
}
    1d80:	4648      	mov	r0, r9
    1d82:	b00d      	add	sp, #52	; 0x34
    1d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d88:	0000a755 	.word	0x0000a755
    1d8c:	0000a1db 	.word	0x0000a1db
    1d90:	0000a1dd 	.word	0x0000a1dd
    1d94:	00009c42 	.word	0x00009c42
    1d98:	0000a1e5 	.word	0x0000a1e5
    1d9c:	0000a1df 	.word	0x0000a1df
    1da0:	0000a1e2 	.word	0x0000a1e2

00001da4 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1da4:	b508      	push	{r3, lr}
	__asm__ volatile(
    1da6:	f04f 0220 	mov.w	r2, #32
    1daa:	f3ef 8311 	mrs	r3, BASEPRI
    1dae:	f382 8812 	msr	BASEPRI_MAX, r2
    1db2:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1db6:	f001 faef 	bl	3398 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1dba:	4803      	ldr	r0, [pc, #12]	; (1dc8 <sys_reboot+0x24>)
    1dbc:	f006 f88f 	bl	7ede <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1dc0:	f000 fefe 	bl	2bc0 <arch_cpu_idle>
    1dc4:	e7fc      	b.n	1dc0 <sys_reboot+0x1c>
    1dc6:	bf00      	nop
    1dc8:	0000a1eb 	.word	0x0000a1eb

00001dcc <nordicsemi_nrf91_init>:
    1dcc:	f04f 0220 	mov.w	r2, #32
    1dd0:	f3ef 8311 	mrs	r3, BASEPRI
    1dd4:	f382 8812 	msr	BASEPRI_MAX, r2
    1dd8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1ddc:	2101      	movs	r1, #1
    1dde:	4a04      	ldr	r2, [pc, #16]	; (1df0 <nordicsemi_nrf91_init+0x24>)
    1de0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    1de4:	f383 8811 	msr	BASEPRI, r3
    1de8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1dec:	2000      	movs	r0, #0
    1dee:	4770      	bx	lr
    1df0:	50039000 	.word	0x50039000

00001df4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1df4:	b120      	cbz	r0, 1e00 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1df6:	4b03      	ldr	r3, [pc, #12]	; (1e04 <arch_busy_wait+0x10>)
    1df8:	0180      	lsls	r0, r0, #6
    1dfa:	f043 0301 	orr.w	r3, r3, #1
    1dfe:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1e00:	4770      	bx	lr
    1e02:	bf00      	nop
    1e04:	00009830 	.word	0x00009830

00001e08 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1e08:	f002 bc26 	b.w	4658 <SystemInit>

00001e0c <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
    1e0c:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
    1e0e:	4b11      	ldr	r3, [pc, #68]	; (1e54 <flash_area_open+0x48>)
{
    1e10:	460d      	mov	r5, r1
	if (flash_map == NULL) {
    1e12:	681c      	ldr	r4, [r3, #0]
    1e14:	b1dc      	cbz	r4, 1e4e <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    1e16:	4b10      	ldr	r3, [pc, #64]	; (1e58 <flash_area_open+0x4c>)
    1e18:	6819      	ldr	r1, [r3, #0]
    1e1a:	2300      	movs	r3, #0
    1e1c:	428b      	cmp	r3, r1
    1e1e:	db02      	blt.n	1e26 <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    1e20:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
    1e24:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    1e26:	4622      	mov	r2, r4
    1e28:	f812 6b10 	ldrb.w	r6, [r2], #16
    1e2c:	4286      	cmp	r6, r0
    1e2e:	d002      	beq.n	1e36 <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
    1e30:	4614      	mov	r4, r2
    1e32:	3301      	adds	r3, #1
    1e34:	e7f2      	b.n	1e1c <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    1e36:	68e0      	ldr	r0, [r4, #12]
    1e38:	b910      	cbnz	r0, 1e40 <flash_area_open+0x34>
		return -ENODEV;
    1e3a:	f06f 0012 	mvn.w	r0, #18
    1e3e:	e7f1      	b.n	1e24 <flash_area_open+0x18>
    1e40:	f007 f9b0 	bl	91a4 <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    1e44:	2800      	cmp	r0, #0
    1e46:	d0f8      	beq.n	1e3a <flash_area_open+0x2e>
	return 0;
    1e48:	2000      	movs	r0, #0
	*fap = area;
    1e4a:	602c      	str	r4, [r5, #0]
	return 0;
    1e4c:	e7ea      	b.n	1e24 <flash_area_open+0x18>
		return -EACCES;
    1e4e:	f06f 000c 	mvn.w	r0, #12
    1e52:	e7e7      	b.n	1e24 <flash_area_open+0x18>
    1e54:	2000c4f4 	.word	0x2000c4f4
    1e58:	00009860 	.word	0x00009860

00001e5c <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    1e5c:	b570      	push	{r4, r5, r6, lr}
    1e5e:	b088      	sub	sp, #32
    1e60:	4605      	mov	r5, r0
    1e62:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    1e64:	b2c0      	uxtb	r0, r0
    1e66:	4669      	mov	r1, sp
{
    1e68:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    1e6a:	f7ff ffcf 	bl	1e0c <flash_area_open>
	if (rc < 0 || fa == NULL) {
    1e6e:	2800      	cmp	r0, #0
    1e70:	db1b      	blt.n	1eaa <flash_area_get_sectors+0x4e>
    1e72:	9800      	ldr	r0, [sp, #0]
    1e74:	b1c8      	cbz	r0, 1eaa <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
    1e76:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    1e78:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    1e7a:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    1e7c:	6883      	ldr	r3, [r0, #8]
	cb_data->area_idx = idx;
    1e7e:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
    1e80:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    1e84:	2300      	movs	r3, #0
	cb_data->status = 0;
    1e86:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    1e8a:	9305      	str	r3, [sp, #20]
	flash_dev = fa->fa_dev;
    1e8c:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
    1e8e:	f006 f950 	bl	8132 <flash_area_close>
	if (flash_dev == NULL) {
    1e92:	b16d      	cbz	r5, 1eb0 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
    1e94:	4628      	mov	r0, r5
    1e96:	4908      	ldr	r1, [pc, #32]	; (1eb8 <flash_area_get_sectors+0x5c>)
    1e98:	aa01      	add	r2, sp, #4
    1e9a:	f006 fe4b 	bl	8b34 <flash_page_foreach>
	if (cb_data->status == 0) {
    1e9e:	9807      	ldr	r0, [sp, #28]
    1ea0:	b908      	cbnz	r0, 1ea6 <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
    1ea2:	9b05      	ldr	r3, [sp, #20]
    1ea4:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    1ea6:	b008      	add	sp, #32
    1ea8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    1eaa:	f06f 0015 	mvn.w	r0, #21
    1eae:	e7fa      	b.n	1ea6 <flash_area_get_sectors+0x4a>
		return -ENODEV;
    1eb0:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1eb4:	e7f7      	b.n	1ea6 <flash_area_get_sectors+0x4a>
    1eb6:	bf00      	nop
    1eb8:	000081d1 	.word	0x000081d1

00001ebc <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1ebc:	4801      	ldr	r0, [pc, #4]	; (1ec4 <nrf_cc3xx_platform_abort_init+0x8>)
    1ebe:	f004 b88d 	b.w	5fdc <nrf_cc3xx_platform_set_abort>
    1ec2:	bf00      	nop
    1ec4:	00009904 	.word	0x00009904

00001ec8 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1ec8:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    1eca:	4604      	mov	r4, r0
    1ecc:	b918      	cbnz	r0, 1ed6 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    1ece:	4b0f      	ldr	r3, [pc, #60]	; (1f0c <mutex_free_platform+0x44>)
    1ed0:	480f      	ldr	r0, [pc, #60]	; (1f10 <mutex_free_platform+0x48>)
    1ed2:	685b      	ldr	r3, [r3, #4]
    1ed4:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1ed6:	6861      	ldr	r1, [r4, #4]
    1ed8:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    1edc:	d00f      	beq.n	1efe <mutex_free_platform+0x36>
    1ede:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    1ee2:	d00c      	beq.n	1efe <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1ee4:	4d0b      	ldr	r5, [pc, #44]	; (1f14 <mutex_free_platform+0x4c>)
    1ee6:	42a9      	cmp	r1, r5
    1ee8:	d009      	beq.n	1efe <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1eea:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    1eee:	d007      	beq.n	1f00 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1ef0:	4621      	mov	r1, r4
    1ef2:	4809      	ldr	r0, [pc, #36]	; (1f18 <mutex_free_platform+0x50>)
    1ef4:	f007 f989 	bl	920a <k_mem_slab_free>
        mutex->mutex = NULL;
    1ef8:	2300      	movs	r3, #0
    1efa:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1efc:	6065      	str	r5, [r4, #4]
}
    1efe:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1f00:	2214      	movs	r2, #20
    1f02:	6820      	ldr	r0, [r4, #0]
    1f04:	f006 fc87 	bl	8816 <memset>
    1f08:	e7f8      	b.n	1efc <mutex_free_platform+0x34>
    1f0a:	bf00      	nop
    1f0c:	2000c5b8 	.word	0x2000c5b8
    1f10:	0000a218 	.word	0x0000a218
    1f14:	a95c5f2c 	.word	0xa95c5f2c
    1f18:	2000e188 	.word	0x2000e188

00001f1c <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1f1c:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1f1e:	b300      	cbz	r0, 1f62 <mutex_lock_platform+0x46>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    1f20:	6843      	ldr	r3, [r0, #4]
    1f22:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    1f26:	d10c      	bne.n	1f42 <mutex_lock_platform+0x26>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1f28:	2201      	movs	r2, #1
    1f2a:	6803      	ldr	r3, [r0, #0]
    1f2c:	e8d3 1fef 	ldaex	r1, [r3]
    1f30:	2900      	cmp	r1, #0
    1f32:	d103      	bne.n	1f3c <mutex_lock_platform+0x20>
    1f34:	e8c3 2fe0 	stlex	r0, r2, [r3]
    1f38:	2800      	cmp	r0, #0
    1f3a:	d1f7      	bne.n	1f2c <mutex_lock_platform+0x10>
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1f3c:	d10d      	bne.n	1f5a <mutex_lock_platform+0x3e>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    1f3e:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    1f40:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1f42:	4a09      	ldr	r2, [pc, #36]	; (1f68 <mutex_lock_platform+0x4c>)
    1f44:	4293      	cmp	r3, r2
    1f46:	d00a      	beq.n	1f5e <mutex_lock_platform+0x42>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1f48:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    1f4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1f4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1f52:	f003 fa53 	bl	53fc <z_impl_k_mutex_lock>
        if (ret == 0) {
    1f56:	2800      	cmp	r0, #0
    1f58:	d0f1      	beq.n	1f3e <mutex_lock_platform+0x22>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1f5a:	4804      	ldr	r0, [pc, #16]	; (1f6c <mutex_lock_platform+0x50>)
    1f5c:	e7f0      	b.n	1f40 <mutex_lock_platform+0x24>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1f5e:	4804      	ldr	r0, [pc, #16]	; (1f70 <mutex_lock_platform+0x54>)
    1f60:	e7ee      	b.n	1f40 <mutex_lock_platform+0x24>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1f62:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1f66:	e7eb      	b.n	1f40 <mutex_lock_platform+0x24>
    1f68:	a95c5f2c 	.word	0xa95c5f2c
    1f6c:	ffff8fe9 	.word	0xffff8fe9
    1f70:	ffff8fea 	.word	0xffff8fea

00001f74 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1f74:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1f76:	b1b8      	cbz	r0, 1fa8 <mutex_unlock_platform+0x34>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1f78:	6843      	ldr	r3, [r0, #4]
    1f7a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    1f7e:	d10c      	bne.n	1f9a <mutex_unlock_platform+0x26>
    1f80:	2200      	movs	r2, #0
    1f82:	6803      	ldr	r3, [r0, #0]
    1f84:	e8d3 1fef 	ldaex	r1, [r3]
    1f88:	2901      	cmp	r1, #1
    1f8a:	d103      	bne.n	1f94 <mutex_unlock_platform+0x20>
    1f8c:	e8c3 2fe0 	stlex	r0, r2, [r3]
    1f90:	2800      	cmp	r0, #0
    1f92:	d1f7      	bne.n	1f84 <mutex_unlock_platform+0x10>
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1f94:	d10b      	bne.n	1fae <mutex_unlock_platform+0x3a>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1f96:	2000      	movs	r0, #0
    }
}
    1f98:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1f9a:	4a07      	ldr	r2, [pc, #28]	; (1fb8 <mutex_unlock_platform+0x44>)
    1f9c:	4293      	cmp	r3, r2
    1f9e:	d008      	beq.n	1fb2 <mutex_unlock_platform+0x3e>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1fa0:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    1fa2:	f003 faa5 	bl	54f0 <z_impl_k_mutex_unlock>
    1fa6:	e7f6      	b.n	1f96 <mutex_unlock_platform+0x22>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1fa8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1fac:	e7f4      	b.n	1f98 <mutex_unlock_platform+0x24>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1fae:	4803      	ldr	r0, [pc, #12]	; (1fbc <mutex_unlock_platform+0x48>)
    1fb0:	e7f2      	b.n	1f98 <mutex_unlock_platform+0x24>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1fb2:	4803      	ldr	r0, [pc, #12]	; (1fc0 <mutex_unlock_platform+0x4c>)
    1fb4:	e7f0      	b.n	1f98 <mutex_unlock_platform+0x24>
    1fb6:	bf00      	nop
    1fb8:	a95c5f2c 	.word	0xa95c5f2c
    1fbc:	ffff8fe9 	.word	0xffff8fe9
    1fc0:	ffff8fea 	.word	0xffff8fea

00001fc4 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1fc4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1fc6:	4604      	mov	r4, r0
    1fc8:	b918      	cbnz	r0, 1fd2 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    1fca:	4b1d      	ldr	r3, [pc, #116]	; (2040 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x40>)
    1fcc:	481d      	ldr	r0, [pc, #116]	; (2044 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x44>)
    1fce:	685b      	ldr	r3, [r3, #4]
    1fd0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1fd2:	6863      	ldr	r3, [r4, #4]
    1fd4:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    1fd8:	d02f      	beq.n	203a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3a>
    1fda:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    1fde:	d02c      	beq.n	203a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3a>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    1fe0:	4a19      	ldr	r2, [pc, #100]	; (2048 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x48>)
    1fe2:	4293      	cmp	r3, r2
    1fe4:	d119      	bne.n	201a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1a>
    1fe6:	6823      	ldr	r3, [r4, #0]
    1fe8:	bb03      	cbnz	r3, 202c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2c>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1fea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1ff2:	4621      	mov	r1, r4
    1ff4:	4815      	ldr	r0, [pc, #84]	; (204c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c>)
    1ff6:	f003 f947 	bl	5288 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1ffa:	b908      	cbnz	r0, 2000 <CONFIG_NRF_SPU_RAM_REGION_SIZE>
    1ffc:	6823      	ldr	r3, [r4, #0]
    1ffe:	b91b      	cbnz	r3, 2008 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8>
            platform_abort_apis.abort_fn(
    2000:	4b0f      	ldr	r3, [pc, #60]	; (2040 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x40>)
    2002:	4813      	ldr	r0, [pc, #76]	; (2050 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x50>)
    2004:	685b      	ldr	r3, [r3, #4]
    2006:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2008:	2214      	movs	r2, #20
    200a:	2100      	movs	r1, #0
    200c:	6820      	ldr	r0, [r4, #0]
    200e:	f006 fc02 	bl	8816 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2012:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    2016:	6063      	str	r3, [r4, #4]
    2018:	e008      	b.n	202c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2c>
    switch(flags){
    201a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    201e:	d80d      	bhi.n	203c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3c>
    2020:	2b3a      	cmp	r3, #58	; 0x3a
    2022:	d003      	beq.n	202c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2c>
    2024:	f640 62ba 	movw	r2, #3770	; 0xeba
    2028:	4293      	cmp	r3, r2
    202a:	d1de      	bne.n	1fea <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    202c:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    202e:	f007 f931 	bl	9294 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2032:	6863      	ldr	r3, [r4, #4]
    2034:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    2038:	6063      	str	r3, [r4, #4]
}
    203a:	bd10      	pop	{r4, pc}
    switch(flags){
    203c:	4a05      	ldr	r2, [pc, #20]	; (2054 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x54>)
    203e:	e7f3      	b.n	2028 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x28>
    2040:	2000c5b8 	.word	0x2000c5b8
    2044:	0000a218 	.word	0x0000a218
    2048:	a95c5f2c 	.word	0xa95c5f2c
    204c:	2000e188 	.word	0x2000e188
    2050:	0000a23e 	.word	0x0000a23e
    2054:	3a00003a 	.word	0x3a00003a

00002058 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2058:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    205a:	4906      	ldr	r1, [pc, #24]	; (2074 <nrf_cc3xx_platform_mutex_init+0x1c>)
    205c:	2340      	movs	r3, #64	; 0x40
    205e:	2214      	movs	r2, #20
    2060:	4805      	ldr	r0, [pc, #20]	; (2078 <nrf_cc3xx_platform_mutex_init+0x20>)
    2062:	f007 f8c4 	bl	91ee <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    2066:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    206a:	4904      	ldr	r1, [pc, #16]	; (207c <nrf_cc3xx_platform_mutex_init+0x24>)
    206c:	4804      	ldr	r0, [pc, #16]	; (2080 <nrf_cc3xx_platform_mutex_init+0x28>)
    206e:	f004 b827 	b.w	60c0 <nrf_cc3xx_platform_set_mutexes>
    2072:	bf00      	nop
    2074:	2000dc88 	.word	0x2000dc88
    2078:	2000e188 	.word	0x2000e188
    207c:	0000990c 	.word	0x0000990c
    2080:	00009920 	.word	0x00009920

00002084 <boot_uart_fifo_callback>:
	return boot_uart_fifo_init();
}

static void
boot_uart_fifo_callback(const struct device *dev, void *user_data)
{
    2084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	static struct line_input *cmd;
	uint8_t byte;
	int rx;

	uart_irq_update(uart_dev);
    2086:	4e25      	ldr	r6, [pc, #148]	; (211c <boot_uart_fifo_callback+0x98>)
    2088:	6830      	ldr	r0, [r6, #0]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
    208a:	6883      	ldr	r3, [r0, #8]
    208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    208e:	b103      	cbz	r3, 2092 <boot_uart_fifo_callback+0xe>
		return -ENOSYS;
	}
	return api->irq_update(dev);
    2090:	4798      	blx	r3

	if (!uart_irq_rx_ready(uart_dev)) {
    2092:	6830      	ldr	r0, [r6, #0]
	if (api->irq_rx_ready == NULL) {
    2094:	6883      	ldr	r3, [r0, #8]
    2096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2098:	2b00      	cmp	r3, #0
    209a:	d132      	bne.n	2102 <boot_uart_fifo_callback+0x7e>
		rx = uart_fifo_read(uart_dev, &byte, 1);
		if (rx != 1) {
			break;
		}

		if (!cmd) {
    209c:	4c20      	ldr	r4, [pc, #128]	; (2120 <boot_uart_fifo_callback+0x9c>)
	return list->head;
    209e:	4d21      	ldr	r5, [pc, #132]	; (2124 <boot_uart_fifo_callback+0xa0>)
		rx = uart_fifo_read(uart_dev, &byte, 1);
    20a0:	6830      	ldr	r0, [r6, #0]
	if (api->fifo_read == NULL) {
    20a2:	6883      	ldr	r3, [r0, #8]
    20a4:	699b      	ldr	r3, [r3, #24]
    20a6:	2b00      	cmp	r3, #0
    20a8:	d02e      	beq.n	2108 <boot_uart_fifo_callback+0x84>
	return api->fifo_read(dev, rx_data, size);
    20aa:	2201      	movs	r2, #1
    20ac:	f10d 0107 	add.w	r1, sp, #7
    20b0:	4798      	blx	r3
		if (rx != 1) {
    20b2:	2801      	cmp	r0, #1
    20b4:	d128      	bne.n	2108 <boot_uart_fifo_callback+0x84>
		if (!cmd) {
    20b6:	6823      	ldr	r3, [r4, #0]
    20b8:	b943      	cbnz	r3, 20cc <boot_uart_fifo_callback+0x48>
    20ba:	682b      	ldr	r3, [r5, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    20bc:	b333      	cbz	r3, 210c <boot_uart_fifo_callback+0x88>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    20be:	6869      	ldr	r1, [r5, #4]
	return node->next;
    20c0:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    20c2:	428b      	cmp	r3, r1
	list->head = node;
    20c4:	602a      	str	r2, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    20c6:	d100      	bne.n	20ca <boot_uart_fifo_callback+0x46>
	list->tail = node;
    20c8:	606a      	str	r2, [r5, #4]
			if (!node) {
				BOOT_LOG_ERR("Not enough memory to store"
					     " incoming data!");
				return;
			}
			cmd = CONTAINER_OF(node, struct line_input, node);
    20ca:	6023      	str	r3, [r4, #0]
		}

		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    20cc:	4a16      	ldr	r2, [pc, #88]	; (2128 <boot_uart_fifo_callback+0xa4>)
			cmd->line[cur++] = byte;
		}

		if (byte ==  '\n') {
    20ce:	f89d 0007 	ldrb.w	r0, [sp, #7]
		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    20d2:	8811      	ldrh	r1, [r2, #0]
    20d4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    20d8:	d204      	bcs.n	20e4 <boot_uart_fifo_callback+0x60>
			cmd->line[cur++] = byte;
    20da:	6823      	ldr	r3, [r4, #0]
    20dc:	1c4f      	adds	r7, r1, #1
    20de:	440b      	add	r3, r1
    20e0:	8017      	strh	r7, [r2, #0]
    20e2:	7218      	strb	r0, [r3, #8]
		if (byte ==  '\n') {
    20e4:	280a      	cmp	r0, #10
    20e6:	d1db      	bne.n	20a0 <boot_uart_fifo_callback+0x1c>
	parent->next = child;
    20e8:	2000      	movs	r0, #0
			cmd->len = cur;
    20ea:	6823      	ldr	r3, [r4, #0]
    20ec:	8811      	ldrh	r1, [r2, #0]
    20ee:	6018      	str	r0, [r3, #0]
    20f0:	6059      	str	r1, [r3, #4]
	return list->tail;
    20f2:	490e      	ldr	r1, [pc, #56]	; (212c <boot_uart_fifo_callback+0xa8>)
    20f4:	684d      	ldr	r5, [r1, #4]
Z_GENLIST_APPEND(slist, snode)
    20f6:	b975      	cbnz	r5, 2116 <boot_uart_fifo_callback+0x92>
	list->head = node;
    20f8:	e9c1 3300 	strd	r3, r3, [r1]
			sys_slist_append(&lines_queue, &cmd->node);
			cur = 0;
    20fc:	8010      	strh	r0, [r2, #0]
			cmd = NULL;
    20fe:	6020      	str	r0, [r4, #0]
    2100:	e7cd      	b.n	209e <boot_uart_fifo_callback+0x1a>
	return api->irq_rx_ready(dev);
    2102:	4798      	blx	r3
	if (!uart_irq_rx_ready(uart_dev)) {
    2104:	2800      	cmp	r0, #0
    2106:	d1c9      	bne.n	209c <boot_uart_fifo_callback+0x18>
		}
	}
}
    2108:	b003      	add	sp, #12
    210a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				BOOT_LOG_ERR("Not enough memory to store"
    210c:	2145      	movs	r1, #69	; 0x45
    210e:	4808      	ldr	r0, [pc, #32]	; (2130 <boot_uart_fifo_callback+0xac>)
    2110:	f006 f802 	bl	8118 <z_log_minimal_printk>
				return;
    2114:	e7f8      	b.n	2108 <boot_uart_fifo_callback+0x84>
	parent->next = child;
    2116:	602b      	str	r3, [r5, #0]
	list->tail = node;
    2118:	604b      	str	r3, [r1, #4]
}
    211a:	e7ef      	b.n	20fc <boot_uart_fifo_callback+0x78>
    211c:	2000e5cc 	.word	0x2000e5cc
    2120:	2000e1a4 	.word	0x2000e1a4
    2124:	2000e1b4 	.word	0x2000e1b4
    2128:	2000e8d4 	.word	0x2000e8d4
    212c:	2000e1ac 	.word	0x2000e1ac
    2130:	0000a26b 	.word	0x0000a26b

00002134 <console_out>:
{
    2134:	b510      	push	{r4, lr}
	uart_poll_out(uart_dev, c);
    2136:	4b04      	ldr	r3, [pc, #16]	; (2148 <console_out+0x14>)
{
    2138:	4604      	mov	r4, r0
	uart_poll_out(uart_dev, c);
    213a:	6818      	ldr	r0, [r3, #0]
	api->poll_out(dev, out_char);
    213c:	6883      	ldr	r3, [r0, #8]
    213e:	b2e1      	uxtb	r1, r4
    2140:	685b      	ldr	r3, [r3, #4]
    2142:	4798      	blx	r3
}
    2144:	4620      	mov	r0, r4
    2146:	bd10      	pop	{r4, pc}
    2148:	2000e5cc 	.word	0x2000e5cc

0000214c <console_read>:
{
    214c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2150:	4605      	mov	r5, r0
    2152:	4690      	mov	r8, r2
    2154:	4608      	mov	r0, r1
	__asm__ volatile(
    2156:	f04f 0320 	mov.w	r3, #32
    215a:	f3ef 8711 	mrs	r7, BASEPRI
    215e:	f383 8812 	msr	BASEPRI_MAX, r3
    2162:	f3bf 8f6f 	isb	sy
	sys_snode_t *node;
	int key;

	key = irq_lock();
	/* Recycle cmd buffer returned previous time */
	if (cmd != NULL) {
    2166:	491c      	ldr	r1, [pc, #112]	; (21d8 <console_read+0x8c>)
    2168:	680b      	ldr	r3, [r1, #0]
    216a:	b14b      	cbz	r3, 2180 <console_read+0x34>
	return list->tail;
    216c:	4c1b      	ldr	r4, [pc, #108]	; (21dc <console_read+0x90>)
		if (sys_slist_peek_tail(&avail_queue) != &cmd->node) {
    216e:	6862      	ldr	r2, [r4, #4]
    2170:	429a      	cmp	r2, r3
    2172:	d005      	beq.n	2180 <console_read+0x34>
	parent->next = child;
    2174:	2200      	movs	r2, #0
    2176:	601a      	str	r2, [r3, #0]
	return list->tail;
    2178:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    217a:	b972      	cbnz	r2, 219a <console_read+0x4e>
	list->head = node;
    217c:	e9c4 3300 	strd	r3, r3, [r4]
	return list->head;
    2180:	4a17      	ldr	r2, [pc, #92]	; (21e0 <console_read+0x94>)
    2182:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_GET(slist, snode)
    2184:	b963      	cbnz	r3, 21a0 <console_read+0x54>
	__asm__ volatile(
    2186:	f387 8811 	msr	BASEPRI, r7
    218a:	f3bf 8f6f 	isb	sy
		return 0;
    218e:	4618      	mov	r0, r3

	node = sys_slist_get(&lines_queue);
	irq_unlock(key);

	if (node == NULL) {
		cmd = NULL;
    2190:	600b      	str	r3, [r1, #0]
		*newline = 0;
    2192:	f8c8 3000 	str.w	r3, [r8]
}
    2196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	parent->next = child;
    219a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    219c:	6063      	str	r3, [r4, #4]
}
    219e:	e7ef      	b.n	2180 <console_read+0x34>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    21a0:	6856      	ldr	r6, [r2, #4]
	return node->next;
    21a2:	681c      	ldr	r4, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    21a4:	42b3      	cmp	r3, r6
	list->head = node;
    21a6:	6014      	str	r4, [r2, #0]
	list->tail = node;
    21a8:	bf08      	it	eq
    21aa:	6054      	streq	r4, [r2, #4]
    21ac:	f387 8811 	msr	BASEPRI, r7
    21b0:	f3bf 8f6f 	isb	sy
		return 0;
	}

	cmd = CONTAINER_OF(node, struct line_input, node);
	*line = cmd->line;
	return cmd->len;
    21b4:	685c      	ldr	r4, [r3, #4]
	cmd = CONTAINER_OF(node, struct line_input, node);
    21b6:	600b      	str	r3, [r1, #0]
	if (len > str_size - 1) {
    21b8:	42a0      	cmp	r0, r4
		len = str_size - 1;
    21ba:	bfd8      	it	le
    21bc:	f100 34ff 	addle.w	r4, r0, #4294967295	; 0xffffffff
	*line = cmd->line;
    21c0:	f103 0108 	add.w	r1, r3, #8
	memcpy(str, line, len);
    21c4:	4622      	mov	r2, r4
    21c6:	4628      	mov	r0, r5
    21c8:	f006 fb1a 	bl	8800 <memcpy>
	str[len] = '\0';
    21cc:	2300      	movs	r3, #0
	return len + 1;
    21ce:	1c60      	adds	r0, r4, #1
	str[len] = '\0';
    21d0:	552b      	strb	r3, [r5, r4]
	return len + 1;
    21d2:	2301      	movs	r3, #1
    21d4:	e7dd      	b.n	2192 <console_read+0x46>
    21d6:	bf00      	nop
    21d8:	2000e1a8 	.word	0x2000e1a8
    21dc:	2000e1b4 	.word	0x2000e1b4
    21e0:	2000e1ac 	.word	0x2000e1ac

000021e4 <boot_console_init>:
{
    21e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	list->head = NULL;
    21e6:	2500      	movs	r5, #0
    21e8:	4b1b      	ldr	r3, [pc, #108]	; (2258 <boot_console_init+0x74>)
	list->head = node;
    21ea:	4a1c      	ldr	r2, [pc, #112]	; (225c <boot_console_init+0x78>)
	list->tail = NULL;
    21ec:	e9c3 5500 	strd	r5, r5, [r3]
	list->head = node;
    21f0:	4b1b      	ldr	r3, [pc, #108]	; (2260 <boot_console_init+0x7c>)

static int
boot_uart_fifo_init(void)
{
#ifdef CONFIG_BOOT_SERIAL_UART
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    21f2:	4c1c      	ldr	r4, [pc, #112]	; (2264 <boot_console_init+0x80>)
    21f4:	481c      	ldr	r0, [pc, #112]	; (2268 <boot_console_init+0x84>)
	parent->next = child;
    21f6:	f503 7102 	add.w	r1, r3, #520	; 0x208
	list->head = node;
    21fa:	6013      	str	r3, [r2, #0]
	parent->next = child;
    21fc:	f8c3 5208 	str.w	r5, [r3, #520]	; 0x208
    2200:	6019      	str	r1, [r3, #0]
	list->tail = node;
    2202:	6051      	str	r1, [r2, #4]
    2204:	6020      	str	r0, [r4, #0]
    2206:	f006 ffcd 	bl	91a4 <z_device_is_ready>
#elif CONFIG_BOOT_SERIAL_CDC_ACM
	uart_dev = DEVICE_DT_GET_ONE(zephyr_cdc_acm_uart);
#endif

	if (!device_is_ready(uart_dev)) {
    220a:	b310      	cbz	r0, 2252 <boot_console_init+0x6e>
	if (rc) {
		return (-1);
	}
#endif

	uart_irq_callback_set(uart_dev, boot_uart_fifo_callback);
    220c:	6820      	ldr	r0, [r4, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    220e:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    2210:	b123      	cbz	r3, 221c <boot_console_init+0x38>
    2212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2214:	b113      	cbz	r3, 221c <boot_console_init+0x38>
		api->irq_callback_set(dev, cb, user_data);
    2216:	462a      	mov	r2, r5
    2218:	4914      	ldr	r1, [pc, #80]	; (226c <boot_console_init+0x88>)
    221a:	4798      	blx	r3

	/* Drain the fifo */
	if (uart_irq_rx_ready(uart_dev)) {
    221c:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_ready == NULL) {
    221e:	6883      	ldr	r3, [r0, #8]
    2220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2222:	b10b      	cbz	r3, 2228 <boot_console_init+0x44>
	return api->irq_rx_ready(dev);
    2224:	4798      	blx	r3
    2226:	b148      	cbz	r0, 223c <boot_console_init+0x58>
		uint8_t c;

		while (uart_fifo_read(uart_dev, &c, 1)) {
    2228:	6820      	ldr	r0, [r4, #0]
	if (api->fifo_read == NULL) {
    222a:	6883      	ldr	r3, [r0, #8]
    222c:	699b      	ldr	r3, [r3, #24]
    222e:	2b00      	cmp	r3, #0
    2230:	d0fa      	beq.n	2228 <boot_console_init+0x44>
	return api->fifo_read(dev, rx_data, size);
    2232:	2201      	movs	r2, #1
    2234:	f10d 0107 	add.w	r1, sp, #7
    2238:	4798      	blx	r3
    223a:	e7f4      	b.n	2226 <boot_console_init+0x42>
			;
		}
	}

	cur = 0;
    223c:	2200      	movs	r2, #0
    223e:	4b0c      	ldr	r3, [pc, #48]	; (2270 <boot_console_init+0x8c>)

	uart_irq_rx_enable(uart_dev);
    2240:	6820      	ldr	r0, [r4, #0]
	cur = 0;
    2242:	801a      	strh	r2, [r3, #0]
	if (api->irq_rx_enable != NULL) {
    2244:	6883      	ldr	r3, [r0, #8]
    2246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2248:	b103      	cbz	r3, 224c <boot_console_init+0x68>
		api->irq_rx_enable(dev);
    224a:	4798      	blx	r3

	return 0;
    224c:	2000      	movs	r0, #0
}
    224e:	b003      	add	sp, #12
    2250:	bd30      	pop	{r4, r5, pc}
		return (-1);
    2252:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return boot_uart_fifo_init();
    2256:	e7fa      	b.n	224e <boot_console_init+0x6a>
    2258:	2000e1ac 	.word	0x2000e1ac
    225c:	2000e1b4 	.word	0x2000e1b4
    2260:	2000e1bc 	.word	0x2000e1bc
    2264:	2000e5cc 	.word	0x2000e5cc
    2268:	00009550 	.word	0x00009550
    226c:	00002085 	.word	0x00002085
    2270:	2000e8d4 	.word	0x2000e8d4

00002274 <boot_serial_output>:
{
    char *data;
    int len;
    uint16_t crc;
    uint16_t totlen;
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    2274:	f640 1306 	movw	r3, #2310	; 0x906

    data = bs_obuf;
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;

    bs_hdr->nh_op++;
    bs_hdr->nh_flags = 0;
    2278:	2000      	movs	r0, #0
{
    227a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    227e:	b0d9      	sub	sp, #356	; 0x164
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    2280:	f8ad 3008 	strh.w	r3, [sp, #8]
    bs_hdr->nh_op++;
    2284:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 2384 <boot_serial_output+0x110>
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;
    2288:	4b39      	ldr	r3, [pc, #228]	; (2370 <boot_serial_output+0xfc>)
    bs_hdr->nh_op++;
    228a:	f8d9 1000 	ldr.w	r1, [r9]
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;
    228e:	681b      	ldr	r3, [r3, #0]
    2290:	4e38      	ldr	r6, [pc, #224]	; (2374 <boot_serial_output+0x100>)
    bs_hdr->nh_len = htons(len);
    bs_hdr->nh_group = htons(bs_hdr->nh_group);

#ifdef __ZEPHYR__
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    2292:	2208      	movs	r2, #8
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;
    2294:	eba3 0806 	sub.w	r8, r3, r6
    bs_hdr->nh_op++;
    2298:	780b      	ldrb	r3, [r1, #0]
    bs_hdr->nh_flags = 0;
    229a:	7048      	strb	r0, [r1, #1]
    bs_hdr->nh_op++;
    229c:	3301      	adds	r3, #1
    229e:	700b      	strb	r3, [r1, #0]
    bs_hdr->nh_len = htons(len);
    22a0:	fa98 f398 	rev16.w	r3, r8
    22a4:	804b      	strh	r3, [r1, #2]
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    22a6:	888b      	ldrh	r3, [r1, #4]

    totlen = len + sizeof(*bs_hdr) + sizeof(crc);
    totlen = htons(totlen);

    memcpy(buf, &totlen, sizeof(totlen));
    totlen = sizeof(totlen);
    22a8:	2702      	movs	r7, #2
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    22aa:	ba5b      	rev16	r3, r3
    22ac:	808b      	strh	r3, [r1, #4]
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    22ae:	f005 fe00 	bl	7eb2 <crc16_itu_t>
    crc =  crc16_itu_t(crc, data, len);
    22b2:	4642      	mov	r2, r8
    22b4:	4631      	mov	r1, r6
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    22b6:	f8ad 000c 	strh.w	r0, [sp, #12]
    crc =  crc16_itu_t(crc, data, len);
    22ba:	f005 fdfa 	bl	7eb2 <crc16_itu_t>
    boot_uf->write(pkt_start, sizeof(pkt_start));
    22be:	4d2e      	ldr	r5, [pc, #184]	; (2378 <boot_serial_output+0x104>)
    crc = htons(crc);
    22c0:	ba40      	rev16	r0, r0
    boot_uf->write(pkt_start, sizeof(pkt_start));
    22c2:	682b      	ldr	r3, [r5, #0]
    22c4:	fa1f f488 	uxth.w	r4, r8
    crc = htons(crc);
    22c8:	f8ad 000c 	strh.w	r0, [sp, #12]
    boot_uf->write(pkt_start, sizeof(pkt_start));
    22cc:	2102      	movs	r1, #2
    22ce:	a802      	add	r0, sp, #8
    22d0:	685b      	ldr	r3, [r3, #4]
    22d2:	4798      	blx	r3
    totlen = len + sizeof(*bs_hdr) + sizeof(crc);
    22d4:	f104 030a 	add.w	r3, r4, #10
    totlen = htons(totlen);
    22d8:	ba5b      	rev16	r3, r3
    memcpy(buf, &totlen, sizeof(totlen));
    22da:	f10d 010e 	add.w	r1, sp, #14
    22de:	2202      	movs	r2, #2
    22e0:	a805      	add	r0, sp, #20
    totlen = htons(totlen);
    22e2:	f8ad 300e 	strh.w	r3, [sp, #14]
    memcpy(buf, &totlen, sizeof(totlen));
    22e6:	f006 fa8b 	bl	8800 <memcpy>
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    22ea:	f8d9 1000 	ldr.w	r1, [r9]
    22ee:	2208      	movs	r2, #8
    22f0:	f10d 0016 	add.w	r0, sp, #22
    totlen = sizeof(totlen);
    22f4:	f8ad 700e 	strh.w	r7, [sp, #14]
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    22f8:	f006 fa82 	bl	8800 <memcpy>
    totlen += sizeof(*bs_hdr);
    22fc:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    memcpy(&buf[totlen], data, len);
    2300:	ab05      	add	r3, sp, #20
    totlen += sizeof(*bs_hdr);
    2302:	3008      	adds	r0, #8
    2304:	b280      	uxth	r0, r0
    memcpy(&buf[totlen], data, len);
    2306:	4642      	mov	r2, r8
    2308:	4631      	mov	r1, r6
    totlen += sizeof(*bs_hdr);
    230a:	f8ad 000e 	strh.w	r0, [sp, #14]
    memcpy(&buf[totlen], data, len);
    230e:	4418      	add	r0, r3
    2310:	f006 fa76 	bl	8800 <memcpy>
    totlen += len;
    2314:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    2318:	463a      	mov	r2, r7
    totlen += len;
    231a:	18e0      	adds	r0, r4, r3
    231c:	b280      	uxth	r0, r0
    memcpy(&buf[totlen], &crc, sizeof(crc));
    231e:	ab05      	add	r3, sp, #20
    totlen += len;
    2320:	f8ad 000e 	strh.w	r0, [sp, #14]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    2324:	a903      	add	r1, sp, #12
    2326:	4418      	add	r0, r3
    2328:	f006 fa6a 	bl	8800 <memcpy>
    totlen += sizeof(crc);
    232c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
#ifdef __ZEPHYR__
    size_t enc_len;
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    2330:	aa04      	add	r2, sp, #16
    totlen += sizeof(crc);
    2332:	443b      	add	r3, r7
    2334:	b29b      	uxth	r3, r3
    2336:	f8ad 300e 	strh.w	r3, [sp, #14]
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    233a:	9300      	str	r3, [sp, #0]
    233c:	21bd      	movs	r1, #189	; 0xbd
    233e:	ab05      	add	r3, sp, #20
    2340:	a828      	add	r0, sp, #160	; 0xa0
    2342:	f7ff f8cf 	bl	14e4 <base64_encode>
    totlen = enc_len;
    2346:	9904      	ldr	r1, [sp, #16]
    base64_encode((unsigned char *)encoded_buf, sizeof(encoded_buf), &enc_len, (unsigned char *)buf, totlen);
    totlen = enc_len;
#else
    totlen = base64_encode(buf, totlen, encoded_buf, 1);
#endif
    boot_uf->write(encoded_buf, totlen);
    2348:	682b      	ldr	r3, [r5, #0]
    totlen = enc_len;
    234a:	f8ad 100e 	strh.w	r1, [sp, #14]
    boot_uf->write(encoded_buf, totlen);
    234e:	a828      	add	r0, sp, #160	; 0xa0
    2350:	685b      	ldr	r3, [r3, #4]
    2352:	b289      	uxth	r1, r1
    2354:	4798      	blx	r3
    boot_uf->write("\n", 1);
    2356:	682b      	ldr	r3, [r5, #0]
    2358:	2101      	movs	r1, #1
    235a:	685b      	ldr	r3, [r3, #4]
    235c:	4807      	ldr	r0, [pc, #28]	; (237c <boot_serial_output+0x108>)
    235e:	4798      	blx	r3
    BOOT_LOG_INF("TX");
    2360:	2149      	movs	r1, #73	; 0x49
    2362:	4807      	ldr	r0, [pc, #28]	; (2380 <boot_serial_output+0x10c>)
    2364:	f005 fed8 	bl	8118 <z_log_minimal_printk>
}
    2368:	b059      	add	sp, #356	; 0x164
    236a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    236e:	bf00      	nop
    2370:	2000e5e4 	.word	0x2000e5e4
    2374:	2000e9d7 	.word	0x2000e9d7
    2378:	2000e618 	.word	0x2000e618
    237c:	00009c41 	.word	0x00009c41
    2380:	0000a2a9 	.word	0x0000a2a9
    2384:	2000e614 	.word	0x2000e614

00002388 <erase_range>:
{
    2388:	b5f0      	push	{r4, r5, r6, r7, lr}
    238a:	4606      	mov	r6, r0
    if (end >= flash_area_get_size(fap)) {
    238c:	68b3      	ldr	r3, [r6, #8]
{
    238e:	460c      	mov	r4, r1
    if (end >= flash_area_get_size(fap)) {
    2390:	429a      	cmp	r2, r3
{
    2392:	4610      	mov	r0, r2
    2394:	b085      	sub	sp, #20
    if (end >= flash_area_get_size(fap)) {
    2396:	d21d      	bcs.n	23d4 <erase_range+0x4c>
    if (end < start) {
    2398:	4291      	cmp	r1, r2
    239a:	dc1d      	bgt.n	23d8 <erase_range+0x50>
    if (flash_area_sector_from_off(end, &sect)) {
    239c:	a902      	add	r1, sp, #8
    239e:	f7fe f937 	bl	610 <flash_area_sector_from_off>
    23a2:	b9b8      	cbnz	r0, 23d4 <erase_range+0x4c>
    size = flash_sector_get_off(&sect) + flash_sector_get_size(&sect) - start;
    23a4:	e9dd 5302 	ldrd	r5, r3, [sp, #8]
    23a8:	441d      	add	r5, r3
    BOOT_LOG_INF("Erasing range 0x%jx:0x%jx", (intmax_t)start,
    23aa:	1e6b      	subs	r3, r5, #1
    23ac:	e9cd 3000 	strd	r3, r0, [sp]
    23b0:	4622      	mov	r2, r4
    23b2:	2149      	movs	r1, #73	; 0x49
    23b4:	480b      	ldr	r0, [pc, #44]	; (23e4 <erase_range+0x5c>)
    23b6:	17e3      	asrs	r3, r4, #31
    size = flash_sector_get_off(&sect) + flash_sector_get_size(&sect) - start;
    23b8:	1b2f      	subs	r7, r5, r4
    BOOT_LOG_INF("Erasing range 0x%jx:0x%jx", (intmax_t)start,
    23ba:	f005 fead 	bl	8118 <z_log_minimal_printk>
    rc = flash_area_erase(fap, start, size);
    23be:	463a      	mov	r2, r7
    23c0:	4621      	mov	r1, r4
    23c2:	4630      	mov	r0, r6
    23c4:	f005 fee0 	bl	8188 <flash_area_erase>
    if (rc != 0) {
    23c8:	4602      	mov	r2, r0
    23ca:	b140      	cbz	r0, 23de <erase_range+0x56>
        BOOT_LOG_ERR("Error %d while erasing range", rc);
    23cc:	2145      	movs	r1, #69	; 0x45
    23ce:	4806      	ldr	r0, [pc, #24]	; (23e8 <erase_range+0x60>)
    23d0:	f005 fea2 	bl	8118 <z_log_minimal_printk>
        return -EINVAL;
    23d4:	f06f 0415 	mvn.w	r4, #21
}
    23d8:	4620      	mov	r0, r4
    23da:	b005      	add	sp, #20
    23dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return start + size;
    23de:	462c      	mov	r4, r5
    23e0:	e7fa      	b.n	23d8 <erase_range+0x50>
    23e2:	bf00      	nop
    23e4:	0000a2b1 	.word	0x0000a2b1
    23e8:	0000a2d0 	.word	0x0000a2d0

000023ec <boot_serial_in_dec.constprop.0>:

/*
 * Returns 1 if full packet has been received.
 */
static int
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    23ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t crc;
    uint16_t len;

#ifdef __ZEPHYR__
    int err;
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    23ee:	680c      	ldr	r4, [r1, #0]
    23f0:	4f16      	ldr	r7, [pc, #88]	; (244c <boot_serial_in_dec.constprop.0+0x60>)
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    23f2:	b085      	sub	sp, #20
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    23f4:	3802      	subs	r0, #2
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    23f6:	460d      	mov	r5, r1
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    23f8:	f5c4 6180 	rsb	r1, r4, #1024	; 0x400
    23fc:	9000      	str	r0, [sp, #0]
    23fe:	4b14      	ldr	r3, [pc, #80]	; (2450 <boot_serial_in_dec.constprop.0+0x64>)
    2400:	1938      	adds	r0, r7, r4
    2402:	aa03      	add	r2, sp, #12
    2404:	3101      	adds	r1, #1
    2406:	f7ff f8eb 	bl	15e0 <base64_decode>
    if (err) {
    240a:	4604      	mov	r4, r0
    240c:	b9d0      	cbnz	r0, 2444 <boot_serial_in_dec.constprop.0+0x58>
    if (rc < 0) {
        return -1;
    }
#endif

    *out_off += rc;
    240e:	682b      	ldr	r3, [r5, #0]
    2410:	9a03      	ldr	r2, [sp, #12]
    2412:	4413      	add	r3, r2
    if (*out_off <= sizeof(uint16_t)) {
    2414:	2b02      	cmp	r3, #2
    *out_off += rc;
    2416:	602b      	str	r3, [r5, #0]
    if (*out_off <= sizeof(uint16_t)) {
    2418:	d911      	bls.n	243e <boot_serial_in_dec.constprop.0+0x52>
        return 0;
    }

    len = ntohs(*(uint16_t *)out);
    241a:	883e      	ldrh	r6, [r7, #0]
    if (len != *out_off - sizeof(uint16_t)) {
    241c:	3b02      	subs	r3, #2
    241e:	ba76      	rev16	r6, r6
    2420:	b2b6      	uxth	r6, r6
    2422:	429e      	cmp	r6, r3
    2424:	d10b      	bne.n	243e <boot_serial_in_dec.constprop.0+0x52>
        len = *out_off - sizeof(uint16_t);
    }

    out += sizeof(uint16_t);
#ifdef __ZEPHYR__
    crc = crc16_itu_t(CRC16_INITIAL_CRC, out, len);
    2426:	4632      	mov	r2, r6
    2428:	1cb9      	adds	r1, r7, #2
    242a:	f005 fd42 	bl	7eb2 <crc16_itu_t>
#elif __ESPRESSIF__
    crc = ~crc16_be(~CRC16_INITIAL_CRC, (uint8_t *)out, len);
#else
    crc = crc16_ccitt(CRC16_INITIAL_CRC, out, len);
#endif
    if (crc || len <= sizeof(crc)) {
    242e:	b930      	cbnz	r0, 243e <boot_serial_in_dec.constprop.0+0x52>
    2430:	2e02      	cmp	r6, #2
    2432:	d904      	bls.n	243e <boot_serial_in_dec.constprop.0+0x52>
        return 0;
    }
    *out_off -= sizeof(crc);
    2434:	682b      	ldr	r3, [r5, #0]
    2436:	1e9a      	subs	r2, r3, #2
    2438:	602a      	str	r2, [r5, #0]
    out[*out_off] = '\0';
    243a:	54fc      	strb	r4, [r7, r3]

    return 1;
    243c:	2401      	movs	r4, #1
}
    243e:	4620      	mov	r0, r4
    2440:	b005      	add	sp, #20
    2442:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
    2444:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    2448:	e7f9      	b.n	243e <boot_serial_in_dec.constprop.0+0x52>
    244a:	bf00      	nop
    244c:	2000ea58 	.word	0x2000ea58
    2450:	2000ee5b 	.word	0x2000ee5b

00002454 <zcbor_tstr_encode_ptr.constprop.0.isra.0>:
 */
static inline bool zcbor_bstr_encode_ptr(zcbor_state_t *state, uint8_t *ptr, size_t len)
{
	return zcbor_bstr_encode(state, &(struct zcbor_string){.value = ptr, .len = len});
}
static inline bool zcbor_tstr_encode_ptr(zcbor_state_t *state, uint8_t *ptr, size_t len)
    2454:	b507      	push	{r0, r1, r2, lr}
{
	return zcbor_tstr_encode(state, &(struct zcbor_string){.value = ptr, .len = len});
    2456:	e9cd 0100 	strd	r0, r1, [sp]
    245a:	4669      	mov	r1, sp
    245c:	4802      	ldr	r0, [pc, #8]	; (2468 <zcbor_tstr_encode_ptr.constprop.0.isra.0+0x14>)
    245e:	f006 f8dc 	bl	861a <zcbor_tstr_encode>
}
    2462:	b003      	add	sp, #12
    2464:	f85d fb04 	ldr.w	pc, [sp], #4
    2468:	2000e5e4 	.word	0x2000e5e4

0000246c <bs_rc_rsp>:
{
    246c:	b538      	push	{r3, r4, r5, lr}
    246e:	4605      	mov	r5, r0
    zcbor_map_start_encode(cbor_state, 10);
    2470:	4c0a      	ldr	r4, [pc, #40]	; (249c <bs_rc_rsp+0x30>)
    2472:	210a      	movs	r1, #10
    2474:	4620      	mov	r0, r4
    2476:	f006 f8e2 	bl	863e <zcbor_map_start_encode>
    zcbor_tstr_put_lit_cast(cbor_state, "rc");
    247a:	2102      	movs	r1, #2
    247c:	4808      	ldr	r0, [pc, #32]	; (24a0 <bs_rc_rsp+0x34>)
    247e:	f7ff ffe9 	bl	2454 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
    zcbor_int32_put(cbor_state, rc_code);
    2482:	4629      	mov	r1, r5
    2484:	4620      	mov	r0, r4
    2486:	f006 f8b8 	bl	85fa <zcbor_int32_put>
    zcbor_map_end_encode(cbor_state, 10);
    248a:	4620      	mov	r0, r4
    248c:	210a      	movs	r1, #10
    248e:	f006 f8f4 	bl	867a <zcbor_map_end_encode>
}
    2492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    boot_serial_output();
    2496:	f7ff beed 	b.w	2274 <boot_serial_output>
    249a:	bf00      	nop
    249c:	2000e5e4 	.word	0x2000e5e4
    24a0:	0000a2f2 	.word	0x0000a2f2

000024a4 <reset_cbor_state>:
    zcbor_new_encode_state(cbor_state, 2, (uint8_t *)bs_obuf,
    24a4:	2300      	movs	r3, #0
{
    24a6:	b507      	push	{r0, r1, r2, lr}
    zcbor_new_encode_state(cbor_state, 2, (uint8_t *)bs_obuf,
    24a8:	4a05      	ldr	r2, [pc, #20]	; (24c0 <reset_cbor_state+0x1c>)
    24aa:	9300      	str	r3, [sp, #0]
    24ac:	2102      	movs	r1, #2
    24ae:	f102 0380 	add.w	r3, r2, #128	; 0x80
    24b2:	4804      	ldr	r0, [pc, #16]	; (24c4 <reset_cbor_state+0x20>)
    24b4:	f006 f8e3 	bl	867e <zcbor_new_encode_state>
}
    24b8:	b003      	add	sp, #12
    24ba:	f85d fb04 	ldr.w	pc, [sp], #4
    24be:	bf00      	nop
    24c0:	2000e9d7 	.word	0x2000e9d7
    24c4:	2000e5e4 	.word	0x2000e5e4

000024c8 <boot_serial_input>:
{
    24c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len < sizeof(*hdr) ||
    24cc:	2907      	cmp	r1, #7
{
    24ce:	4604      	mov	r4, r0
    24d0:	b0a8      	sub	sp, #160	; 0xa0
    if (len < sizeof(*hdr) ||
    24d2:	f240 8094 	bls.w	25fe <FIH_LABEL_FIH_CALL_END_798+0x78>
    24d6:	7803      	ldrb	r3, [r0, #0]
    24d8:	f013 06fd 	ands.w	r6, r3, #253	; 0xfd
    24dc:	f040 808f 	bne.w	25fe <FIH_LABEL_FIH_CALL_END_798+0x78>
      (ntohs(hdr->nh_len) < len - sizeof(*hdr))) {
    24e0:	8843      	ldrh	r3, [r0, #2]
    24e2:	f1a1 0508 	sub.w	r5, r1, #8
    24e6:	ba5b      	rev16	r3, r3
    24e8:	b29b      	uxth	r3, r3
      (hdr->nh_op != NMGR_OP_READ && hdr->nh_op != NMGR_OP_WRITE) ||
    24ea:	42ab      	cmp	r3, r5
    24ec:	f0c0 8087 	bcc.w	25fe <FIH_LABEL_FIH_CALL_END_798+0x78>
    bs_hdr = hdr;
    24f0:	4ba6      	ldr	r3, [pc, #664]	; (278c <FIH_LABEL_FIH_CALL_END_798+0x206>)
    24f2:	6018      	str	r0, [r3, #0]
    hdr->nh_group = ntohs(hdr->nh_group);
    24f4:	8883      	ldrh	r3, [r0, #4]
    24f6:	ba5b      	rev16	r3, r3
    24f8:	8083      	strh	r3, [r0, #4]
    reset_cbor_state();
    24fa:	f7ff ffd3 	bl	24a4 <reset_cbor_state>
    if (hdr->nh_group == MGMT_GROUP_ID_IMAGE) {
    24fe:	88a0      	ldrh	r0, [r4, #4]
    2500:	2801      	cmp	r0, #1
    2502:	f040 81c1 	bne.w	2888 <CONFIG_MAIN_STACK_SIZE+0x88>
        switch (hdr->nh_id) {
    2506:	79e7      	ldrb	r7, [r4, #7]
    2508:	b13f      	cbz	r7, 251a <boot_serial_input+0x52>
    250a:	2f01      	cmp	r7, #1
    250c:	d07c      	beq.n	2608 <FIH_LABEL_FIH_CALL_END_798+0x82>
        bs_rc_rsp(MGMT_ERR_ENOTSUP);
    250e:	2008      	movs	r0, #8
}
    2510:	b028      	add	sp, #160	; 0xa0
    2512:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        bs_rc_rsp(MGMT_ERR_ENOTSUP);
    2516:	f7ff bfa9 	b.w	246c <bs_rc_rsp>
    zcbor_map_start_encode(cbor_state, 1);
    251a:	4601      	mov	r1, r0
    251c:	489c      	ldr	r0, [pc, #624]	; (2790 <FIH_LABEL_FIH_CALL_END_798+0x20a>)
    251e:	f006 f88e 	bl	863e <zcbor_map_start_encode>
    zcbor_tstr_put_lit_cast(cbor_state, "images");
    2522:	2106      	movs	r1, #6
    2524:	489b      	ldr	r0, [pc, #620]	; (2794 <FIH_LABEL_FIH_CALL_END_798+0x20e>)
    2526:	f7ff ff95 	bl	2454 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
    zcbor_list_start_encode(cbor_state, 5);
    252a:	2105      	movs	r1, #5
    252c:	4898      	ldr	r0, [pc, #608]	; (2790 <FIH_LABEL_FIH_CALL_END_798+0x20a>)
    252e:	f006 f877 	bl	8620 <zcbor_list_start_encode>
        for (slot = 0; slot < 2; slot++) {
    2532:	463c      	mov	r4, r7
            if (hdr.ih_magic == IMAGE_MAGIC)
    2534:	f8df 8294 	ldr.w	r8, [pc, #660]	; 27cc <FIH_LABEL_FIH_CALL_END_798+0x246>
            fih_int fih_rc = FIH_FAILURE;
    2538:	4f97      	ldr	r7, [pc, #604]	; (2798 <FIH_LABEL_FIH_CALL_END_798+0x212>)
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    253a:	f8df 9294 	ldr.w	r9, [pc, #660]	; 27d0 <FIH_LABEL_FIH_CALL_END_798+0x24a>
            area_id = flash_area_id_from_multi_image_slot(image_index, slot);
    253e:	4621      	mov	r1, r4
    2540:	2000      	movs	r0, #0
    2542:	f005 f93d 	bl	77c0 <flash_area_id_from_multi_image_slot>
            if (flash_area_open(area_id, &fap)) {
    2546:	a907      	add	r1, sp, #28
    2548:	b2c0      	uxtb	r0, r0
    254a:	f7ff fc5f 	bl	1e0c <flash_area_open>
    254e:	4605      	mov	r5, r0
    2550:	2800      	cmp	r0, #0
    2552:	d149      	bne.n	25e8 <FIH_LABEL_FIH_CALL_END_798+0x62>
                flash_area_read(fap, 0, &hdr, sizeof(hdr));
    2554:	2320      	movs	r3, #32
    2556:	4601      	mov	r1, r0
    2558:	eb0d 0203 	add.w	r2, sp, r3
    255c:	9807      	ldr	r0, [sp, #28]
    255e:	f005 fde9 	bl	8134 <flash_area_read>
            if (hdr.ih_magic == IMAGE_MAGIC)
    2562:	9b08      	ldr	r3, [sp, #32]
            fih_int fih_rc = FIH_FAILURE;
    2564:	683e      	ldr	r6, [r7, #0]
            if (hdr.ih_magic == IMAGE_MAGIC)
    2566:	4543      	cmp	r3, r8
    2568:	d10d      	bne.n	2586 <FIH_LABEL_FIH_CALL_END_798>

0000256a <FIH_LABEL_FIH_CALL_START_774>:
                    FIH_CALL(bootutil_img_validate, fih_rc, NULL, 0, &hdr, fap, tmpbuf, sizeof(tmpbuf),
    256a:	2340      	movs	r3, #64	; 0x40
    256c:	9301      	str	r3, [sp, #4]
    256e:	ab18      	add	r3, sp, #96	; 0x60
    2570:	9300      	str	r3, [sp, #0]
    2572:	4629      	mov	r1, r5
    2574:	4628      	mov	r0, r5
    2576:	e9cd 5503 	strd	r5, r5, [sp, #12]
    257a:	9b07      	ldr	r3, [sp, #28]
    257c:	9502      	str	r5, [sp, #8]
    257e:	aa08      	add	r2, sp, #32
    2580:	f7fe f856 	bl	630 <bootutil_img_validate>
    2584:	4606      	mov	r6, r0

00002586 <FIH_LABEL_FIH_CALL_END_798>:
            flash_area_close(fap);
    2586:	9807      	ldr	r0, [sp, #28]
    2588:	f005 fdd3 	bl	8132 <flash_area_close>
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    258c:	f8d9 3000 	ldr.w	r3, [r9]
    2590:	42b3      	cmp	r3, r6
    2592:	d129      	bne.n	25e8 <FIH_LABEL_FIH_CALL_END_798+0x62>
            zcbor_map_start_encode(cbor_state, 20);
    2594:	2114      	movs	r1, #20
    2596:	487e      	ldr	r0, [pc, #504]	; (2790 <FIH_LABEL_FIH_CALL_END_798+0x20a>)
    2598:	f006 f851 	bl	863e <zcbor_map_start_encode>
            zcbor_tstr_put_lit_cast(cbor_state, "slot");
    259c:	2104      	movs	r1, #4
    259e:	487f      	ldr	r0, [pc, #508]	; (279c <FIH_LABEL_FIH_CALL_END_798+0x216>)
    25a0:	f7ff ff58 	bl	2454 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
            zcbor_uint32_put(cbor_state, slot);
    25a4:	4621      	mov	r1, r4
    25a6:	487a      	ldr	r0, [pc, #488]	; (2790 <FIH_LABEL_FIH_CALL_END_798+0x20a>)
    25a8:	f006 f82b 	bl	8602 <zcbor_uint32_put>
            zcbor_tstr_put_lit_cast(cbor_state, "version");
    25ac:	2107      	movs	r1, #7
    25ae:	487c      	ldr	r0, [pc, #496]	; (27a0 <FIH_LABEL_FIH_CALL_END_798+0x21a>)
    25b0:	f7ff ff50 	bl	2454 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
   snprintf(dst, maxlen, "%hu.%hu.%hu.%u", (uint16_t)ver->iv_major,
    25b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    25b6:	2140      	movs	r1, #64	; 0x40
    25b8:	9302      	str	r3, [sp, #8]
    25ba:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    25be:	4a79      	ldr	r2, [pc, #484]	; (27a4 <FIH_LABEL_FIH_CALL_END_798+0x21e>)
    25c0:	9301      	str	r3, [sp, #4]
    25c2:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    25c6:	a818      	add	r0, sp, #96	; 0x60
    25c8:	9300      	str	r3, [sp, #0]
    25ca:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    25ce:	f000 ff43 	bl	3458 <snprintf>
            zcbor_tstr_encode_ptr(cbor_state, tmpbuf, strlen((char *)tmpbuf));
    25d2:	a818      	add	r0, sp, #96	; 0x60
    25d4:	f006 f8e6 	bl	87a4 <strlen>
    25d8:	4601      	mov	r1, r0
    25da:	a818      	add	r0, sp, #96	; 0x60
    25dc:	f7ff ff3a 	bl	2454 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
            zcbor_map_end_encode(cbor_state, 20);
    25e0:	2114      	movs	r1, #20
    25e2:	486b      	ldr	r0, [pc, #428]	; (2790 <FIH_LABEL_FIH_CALL_END_798+0x20a>)
    25e4:	f006 f849 	bl	867a <zcbor_map_end_encode>
        for (slot = 0; slot < 2; slot++) {
    25e8:	b164      	cbz	r4, 2604 <FIH_LABEL_FIH_CALL_END_798+0x7e>
    zcbor_list_end_encode(cbor_state, 5);
    25ea:	2105      	movs	r1, #5
    25ec:	4868      	ldr	r0, [pc, #416]	; (2790 <FIH_LABEL_FIH_CALL_END_798+0x20a>)
    25ee:	f006 f835 	bl	865c <zcbor_list_end_encode>
    zcbor_map_end_encode(cbor_state, 1);
    25f2:	2101      	movs	r1, #1
    25f4:	4866      	ldr	r0, [pc, #408]	; (2790 <FIH_LABEL_FIH_CALL_END_798+0x20a>)
    25f6:	f006 f840 	bl	867a <zcbor_map_end_encode>
    boot_serial_output();
    25fa:	f7ff fe3b 	bl	2274 <boot_serial_output>
}
    25fe:	b028      	add	sp, #160	; 0xa0
    2600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        for (slot = 0; slot < 2; slot++) {
    2604:	2401      	movs	r4, #1
    2606:	e79a      	b.n	253e <boot_serial_input+0x76>
    uint_fast8_t result = cbor_decode_Upload((const uint8_t *)buf, len, &upload, &decoded_len);
    2608:	4629      	mov	r1, r5
    260a:	ab07      	add	r3, sp, #28
    260c:	aa08      	add	r2, sp, #32
    260e:	f104 0008 	add.w	r0, r4, #8
    const struct flash_area *fap = NULL;
    2612:	9606      	str	r6, [sp, #24]
    uint_fast8_t result = cbor_decode_Upload((const uint8_t *)buf, len, &upload, &decoded_len);
    2614:	f000 fa2c 	bl	2a70 <cbor_decode_Upload>
    if ((result != ZCBOR_SUCCESS) || (len != decoded_len)) {
    2618:	b328      	cbz	r0, 2666 <FIH_LABEL_FIH_CALL_END_798+0xe0>
        rc = MGMT_ERR_EINVAL;
    261a:	2403      	movs	r4, #3
    BOOT_LOG_INF("RX: 0x%x", rc);
    261c:	4622      	mov	r2, r4
    261e:	2149      	movs	r1, #73	; 0x49
    2620:	4861      	ldr	r0, [pc, #388]	; (27a8 <FIH_LABEL_FIH_CALL_END_798+0x222>)
    2622:	f005 fd79 	bl	8118 <z_log_minimal_printk>
    zcbor_map_start_encode(cbor_state, 10);
    2626:	210a      	movs	r1, #10
    2628:	4859      	ldr	r0, [pc, #356]	; (2790 <FIH_LABEL_FIH_CALL_END_798+0x20a>)
    262a:	f006 f808 	bl	863e <zcbor_map_start_encode>
    zcbor_tstr_put_lit_cast(cbor_state, "rc");
    262e:	2102      	movs	r1, #2
    2630:	485e      	ldr	r0, [pc, #376]	; (27ac <FIH_LABEL_FIH_CALL_END_798+0x226>)
    2632:	f7ff ff0f 	bl	2454 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
    zcbor_int32_put(cbor_state, rc);
    2636:	4621      	mov	r1, r4
    2638:	4855      	ldr	r0, [pc, #340]	; (2790 <FIH_LABEL_FIH_CALL_END_798+0x20a>)
    263a:	f005 ffde 	bl	85fa <zcbor_int32_put>
    if (rc == 0) {
    263e:	b944      	cbnz	r4, 2652 <FIH_LABEL_FIH_CALL_END_798+0xcc>
        zcbor_tstr_put_lit_cast(cbor_state, "off");
    2640:	2103      	movs	r1, #3
    2642:	485b      	ldr	r0, [pc, #364]	; (27b0 <FIH_LABEL_FIH_CALL_END_798+0x22a>)
    2644:	f7ff ff06 	bl	2454 <zcbor_tstr_encode_ptr.constprop.0.isra.0>
        zcbor_uint32_put(cbor_state, curr_off);
    2648:	4b5a      	ldr	r3, [pc, #360]	; (27b4 <FIH_LABEL_FIH_CALL_END_798+0x22e>)
    264a:	4851      	ldr	r0, [pc, #324]	; (2790 <FIH_LABEL_FIH_CALL_END_798+0x20a>)
    264c:	6819      	ldr	r1, [r3, #0]
    264e:	f005 ffd8 	bl	8602 <zcbor_uint32_put>
    zcbor_map_end_encode(cbor_state, 10);
    2652:	210a      	movs	r1, #10
    2654:	484e      	ldr	r0, [pc, #312]	; (2790 <FIH_LABEL_FIH_CALL_END_798+0x20a>)
    2656:	f006 f810 	bl	867a <zcbor_map_end_encode>
    boot_serial_output();
    265a:	f7ff fe0b 	bl	2274 <boot_serial_output>
    flash_area_close(fap);
    265e:	9806      	ldr	r0, [sp, #24]
    2660:	f005 fd67 	bl	8132 <flash_area_close>
}
    2664:	e7cb      	b.n	25fe <FIH_LABEL_FIH_CALL_END_798+0x78>
    if ((result != ZCBOR_SUCCESS) || (len != decoded_len)) {
    2666:	9b07      	ldr	r3, [sp, #28]
    2668:	429d      	cmp	r5, r3
    266a:	d1d6      	bne.n	261a <FIH_LABEL_FIH_CALL_END_798+0x94>
    size_t img_size_tmp = SIZE_MAX;     /* Temp variable for image size */
    266c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    for (int i = 0; i < upload._Upload_members_count; i++) {
    2670:	4601      	mov	r1, r0
    size_t img_chunk_off = SIZE_MAX;    /* Offset of image chunk within image  */
    2672:	46c8      	mov	r8, r9
    size_t img_chunk_len = 0;           /* Length of received image chunk */
    2674:	4605      	mov	r5, r0
    const uint8_t *img_chunk = NULL;    /* Pointer to buffer with received image chunk */
    2676:	4607      	mov	r7, r0
    2678:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    267a:	aa08      	add	r2, sp, #32
    for (int i = 0; i < upload._Upload_members_count; i++) {
    267c:	42a1      	cmp	r1, r4
    267e:	d122      	bne.n	26c6 <FIH_LABEL_FIH_CALL_END_798+0x140>
    if (img_chunk_off == SIZE_MAX || img_chunk == NULL) {
    2680:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    2684:	d0c9      	beq.n	261a <FIH_LABEL_FIH_CALL_END_798+0x94>
    2686:	2f00      	cmp	r7, #0
    2688:	d0c7      	beq.n	261a <FIH_LABEL_FIH_CALL_END_798+0x94>
    rc = flash_area_open(flash_area_id_from_multi_image_slot(img_num, 0), &fap);
    268a:	2100      	movs	r1, #0
    268c:	f005 f898 	bl	77c0 <flash_area_id_from_multi_image_slot>
    2690:	a906      	add	r1, sp, #24
    2692:	b2c0      	uxtb	r0, r0
    2694:	f7ff fbba 	bl	1e0c <flash_area_open>
    if (rc) {
    2698:	4604      	mov	r4, r0
    269a:	2800      	cmp	r0, #0
    269c:	d1bd      	bne.n	261a <FIH_LABEL_FIH_CALL_END_798+0x94>
    if (img_chunk_off == 0) {
    269e:	4e45      	ldr	r6, [pc, #276]	; (27b4 <FIH_LABEL_FIH_CALL_END_798+0x22e>)
    26a0:	f1b8 0f00 	cmp.w	r8, #0
    26a4:	d166      	bne.n	2774 <FIH_LABEL_FIH_CALL_END_798+0x1ee>
        const size_t area_size = flash_area_get_size(fap);
    26a6:	9806      	ldr	r0, [sp, #24]
        curr_off = 0;
    26a8:	6034      	str	r4, [r6, #0]
	return (uint32_t)fa->fa_size;
    26aa:	f8d0 8008 	ldr.w	r8, [r0, #8]
        if (flash_area_sector_from_off(boot_status_off(fap), &status_sector)) {
    26ae:	f005 f96d 	bl	798c <boot_status_off>
    26b2:	4941      	ldr	r1, [pc, #260]	; (27b8 <FIH_LABEL_FIH_CALL_END_798+0x232>)
    26b4:	f7fd ffac 	bl	610 <flash_area_sector_from_off>
    26b8:	b1c8      	cbz	r0, 26ee <FIH_LABEL_FIH_CALL_END_798+0x168>
            BOOT_LOG_ERR("Unable to determine flash sector of the image trailer");
    26ba:	2145      	movs	r1, #69	; 0x45
    26bc:	483f      	ldr	r0, [pc, #252]	; (27bc <FIH_LABEL_FIH_CALL_END_798+0x236>)
    26be:	f005 fd2b 	bl	8118 <z_log_minimal_printk>
            rc = MGMT_ERR_EUNKNOWN;
    26c2:	2401      	movs	r4, #1
            goto out;
    26c4:	e7aa      	b.n	261c <FIH_LABEL_FIH_CALL_END_798+0x96>
        switch(member->_Member_choice) {
    26c6:	7a13      	ldrb	r3, [r2, #8]
    26c8:	2b03      	cmp	r3, #3
    26ca:	d804      	bhi.n	26d6 <FIH_LABEL_FIH_CALL_END_798+0x150>
    26cc:	e8df f003 	tbb	[pc, r3]
    26d0:	0c090602 	.word	0x0c090602
                img_num = member->_Member_image;
    26d4:	6810      	ldr	r0, [r2, #0]
    for (int i = 0; i < upload._Upload_members_count; i++) {
    26d6:	3101      	adds	r1, #1
    26d8:	320c      	adds	r2, #12
    26da:	e7cf      	b.n	267c <FIH_LABEL_FIH_CALL_END_798+0xf6>
                img_chunk_len = member->_Member_data.len;
    26dc:	e9d2 7500 	ldrd	r7, r5, [r2]
                break;
    26e0:	e7f9      	b.n	26d6 <FIH_LABEL_FIH_CALL_END_798+0x150>
                img_size_tmp = member->_Member_len;
    26e2:	f8d2 9000 	ldr.w	r9, [r2]
                break;
    26e6:	e7f6      	b.n	26d6 <FIH_LABEL_FIH_CALL_END_798+0x150>
                img_chunk_off = member->_Member_off;
    26e8:	f8d2 8000 	ldr.w	r8, [r2]
                break;
    26ec:	e7f3      	b.n	26d6 <FIH_LABEL_FIH_CALL_END_798+0x150>
        if (img_size_tmp > area_size) {
    26ee:	45c8      	cmp	r8, r9
    26f0:	d393      	bcc.n	261a <FIH_LABEL_FIH_CALL_END_798+0x94>
        not_yet_erased = 0;
    26f2:	4b33      	ldr	r3, [pc, #204]	; (27c0 <FIH_LABEL_FIH_CALL_END_798+0x23a>)
    26f4:	601c      	str	r4, [r3, #0]
        img_size = img_size_tmp;
    26f6:	4b33      	ldr	r3, [pc, #204]	; (27c4 <FIH_LABEL_FIH_CALL_END_798+0x23e>)
    26f8:	f8c3 9000 	str.w	r9, [r3]
                                 curr_off + img_chunk_len - 1);
    26fc:	6832      	ldr	r2, [r6, #0]
    not_yet_erased = erase_range(fap, not_yet_erased,
    26fe:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 27c0 <FIH_LABEL_FIH_CALL_END_798+0x23a>
                                 curr_off + img_chunk_len - 1);
    2702:	3a01      	subs	r2, #1
    not_yet_erased = erase_range(fap, not_yet_erased,
    2704:	f8d8 1000 	ldr.w	r1, [r8]
    2708:	9806      	ldr	r0, [sp, #24]
    270a:	442a      	add	r2, r5
    270c:	f7ff fe3c 	bl	2388 <erase_range>
    if (not_yet_erased < 0) {
    2710:	2800      	cmp	r0, #0
    not_yet_erased = erase_range(fap, not_yet_erased,
    2712:	f8c8 0000 	str.w	r0, [r8]
    if (not_yet_erased < 0) {
    2716:	db80      	blt.n	261a <FIH_LABEL_FIH_CALL_END_798+0x94>
    rem_bytes = img_chunk_len % flash_area_align(fap);
    2718:	9806      	ldr	r0, [sp, #24]
    271a:	f005 fd4b 	bl	81b4 <flash_area_align>
    271e:	fbb5 f3f0 	udiv	r3, r5, r0
    2722:	fb03 5010 	mls	r0, r3, r0, r5
    if (curr_off + img_chunk_len + rem_bytes < img_size) {
    2726:	6832      	ldr	r2, [r6, #0]
    2728:	b2c1      	uxtb	r1, r0
    272a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 27c4 <FIH_LABEL_FIH_CALL_END_798+0x23e>
    img_chunk_len -= rem_bytes;
    272e:	eba5 0801 	sub.w	r8, r5, r1
    if (curr_off + img_chunk_len + rem_bytes < img_size) {
    2732:	eb08 0302 	add.w	r3, r8, r2
    2736:	f8d9 5000 	ldr.w	r5, [r9]
    273a:	4419      	add	r1, r3
    273c:	42a9      	cmp	r1, r5
    273e:	bf38      	it	cc
    2740:	2000      	movcc	r0, #0
    BOOT_LOG_INF("Writing at 0x%x until 0x%x", curr_off, curr_off + img_chunk_len);
    2742:	2149      	movs	r1, #73	; 0x49
    2744:	b2c5      	uxtb	r5, r0
    2746:	4820      	ldr	r0, [pc, #128]	; (27c8 <FIH_LABEL_FIH_CALL_END_798+0x242>)
    2748:	f005 fce6 	bl	8118 <z_log_minimal_printk>
    if (flash_area_align(fap) > 1 &&
    274c:	9806      	ldr	r0, [sp, #24]
    274e:	f005 fd31 	bl	81b4 <flash_area_align>
    2752:	2801      	cmp	r0, #1
    2754:	d905      	bls.n	2762 <FIH_LABEL_FIH_CALL_END_798+0x1dc>
        (((size_t)img_chunk) & (flash_area_align(fap) - 1)) != 0) {
    2756:	9806      	ldr	r0, [sp, #24]
    2758:	f005 fd2c 	bl	81b4 <flash_area_align>
    275c:	3801      	subs	r0, #1
    if (flash_area_align(fap) > 1 &&
    275e:	4207      	tst	r7, r0
    2760:	d16f      	bne.n	2842 <CONFIG_MAIN_STACK_SIZE+0x42>
        rc = flash_area_write(fap, curr_off, img_chunk, img_chunk_len);
    2762:	4643      	mov	r3, r8
    2764:	463a      	mov	r2, r7
    2766:	6831      	ldr	r1, [r6, #0]
    2768:	9806      	ldr	r0, [sp, #24]
    276a:	f005 fcf8 	bl	815e <flash_area_write>
    if (rc == 0 && rem_bytes) {
    276e:	2800      	cmp	r0, #0
    2770:	d055      	beq.n	281e <CONFIG_MAIN_STACK_SIZE+0x1e>
    2772:	e752      	b.n	261a <FIH_LABEL_FIH_CALL_END_798+0x94>
    } else if (img_chunk_off != curr_off) {
    2774:	6833      	ldr	r3, [r6, #0]
    2776:	4543      	cmp	r3, r8
    2778:	f47f af50 	bne.w	261c <FIH_LABEL_FIH_CALL_END_798+0x96>
    } else if (curr_off + img_chunk_len > img_size) {
    277c:	4a11      	ldr	r2, [pc, #68]	; (27c4 <FIH_LABEL_FIH_CALL_END_798+0x23e>)
    277e:	eb05 0308 	add.w	r3, r5, r8
    2782:	6812      	ldr	r2, [r2, #0]
    2784:	4293      	cmp	r3, r2
    2786:	d9b9      	bls.n	26fc <FIH_LABEL_FIH_CALL_END_798+0x176>
    2788:	e747      	b.n	261a <FIH_LABEL_FIH_CALL_END_798+0x94>
    278a:	bf00      	nop
    278c:	2000e614 	.word	0x2000e614
    2790:	2000e5e4 	.word	0x2000e5e4
    2794:	0000a2f5 	.word	0x0000a2f5
    2798:	2000c4e8 	.word	0x2000c4e8
    279c:	0000a2fc 	.word	0x0000a2fc
    27a0:	0000a301 	.word	0x0000a301
    27a4:	0000a309 	.word	0x0000a309
    27a8:	0000a338 	.word	0x0000a338
    27ac:	0000a2f2 	.word	0x0000a2f2
    27b0:	0000a346 	.word	0x0000a346
    27b4:	2000e5e0 	.word	0x2000e5e0
    27b8:	2000e5d8 	.word	0x2000e5d8
    27bc:	00009d84 	.word	0x00009d84
    27c0:	2000e5d4 	.word	0x2000e5d4
    27c4:	2000e5d0 	.word	0x2000e5d0
    27c8:	0000a318 	.word	0x0000a318
    27cc:	96f3b83d 	.word	0x96f3b83d
    27d0:	2000c820 	.word	0x2000c820
            if (write_size > img_chunk_len) {
    27d4:	45c2      	cmp	sl, r8
            memset(wbs_aligned, flash_area_erased_val(fap), sizeof(wbs_aligned));
    27d6:	9806      	ldr	r0, [sp, #24]
                write_size = img_chunk_len;
    27d8:	bf88      	it	hi
    27da:	fa5f fa88 	uxtbhi.w	sl, r8
            memset(wbs_aligned, flash_area_erased_val(fap), sizeof(wbs_aligned));
    27de:	f005 fcf0 	bl	81c2 <flash_area_erased_val>
    27e2:	2240      	movs	r2, #64	; 0x40
    27e4:	4601      	mov	r1, r0
    27e6:	a818      	add	r0, sp, #96	; 0x60
    27e8:	f006 f815 	bl	8816 <memset>
            memcpy(wbs_aligned, img_chunk, write_size);
    27ec:	4652      	mov	r2, sl
    27ee:	4639      	mov	r1, r7
    27f0:	a818      	add	r0, sp, #96	; 0x60
    27f2:	f006 f805 	bl	8800 <memcpy>
            rc = flash_area_write(fap, curr_off, wbs_aligned, write_size);
    27f6:	4653      	mov	r3, sl
    27f8:	6831      	ldr	r1, [r6, #0]
    27fa:	9806      	ldr	r0, [sp, #24]
    27fc:	aa18      	add	r2, sp, #96	; 0x60
    27fe:	f005 fcae 	bl	815e <flash_area_write>
            if (rc != 0) {
    2802:	2800      	cmp	r0, #0
    2804:	f47f af09 	bne.w	261a <FIH_LABEL_FIH_CALL_END_798+0x94>
            curr_off += write_size;
    2808:	6833      	ldr	r3, [r6, #0]
            img_chunk += write_size;
    280a:	4457      	add	r7, sl
            curr_off += write_size;
    280c:	4453      	add	r3, sl
    280e:	6033      	str	r3, [r6, #0]
            img_chunk_len -= write_size;
    2810:	eba8 080a 	sub.w	r8, r8, sl
        while (img_chunk_len >= flash_area_align(fap)) {
    2814:	9806      	ldr	r0, [sp, #24]
    2816:	f005 fccd 	bl	81b4 <flash_area_align>
    281a:	4580      	cmp	r8, r0
    281c:	d2da      	bcs.n	27d4 <FIH_LABEL_FIH_CALL_END_798+0x24e>
    if (rc == 0 && rem_bytes) {
    281e:	b99d      	cbnz	r5, 2848 <CONFIG_MAIN_STACK_SIZE+0x48>
        curr_off += img_chunk_len + rem_bytes;
    2820:	6833      	ldr	r3, [r6, #0]
        if (curr_off == img_size) {
    2822:	f8d9 2000 	ldr.w	r2, [r9]
        curr_off += img_chunk_len + rem_bytes;
    2826:	442b      	add	r3, r5
    2828:	4443      	add	r3, r8
        if (curr_off == img_size) {
    282a:	4293      	cmp	r3, r2
        curr_off += img_chunk_len + rem_bytes;
    282c:	6033      	str	r3, [r6, #0]
        if (curr_off == img_size) {
    282e:	f47f aef5 	bne.w	261c <FIH_LABEL_FIH_CALL_END_798+0x96>
	return fs->fs_off;
    2832:	4b21      	ldr	r3, [pc, #132]	; (28b8 <CONFIG_MAIN_STACK_SIZE+0xb8>)
            if (erase_range(fap, start, start) < 0) {
    2834:	9806      	ldr	r0, [sp, #24]
    2836:	681a      	ldr	r2, [r3, #0]
    2838:	4611      	mov	r1, r2
    283a:	f7ff fda5 	bl	2388 <erase_range>
    283e:	0fc4      	lsrs	r4, r0, #31
    2840:	e6ec      	b.n	261c <FIH_LABEL_FIH_CALL_END_798+0x96>
        uint8_t write_size = MCUBOOT_SERIAL_UNALIGNED_BUFFER_SIZE;
    2842:	f04f 0a40 	mov.w	sl, #64	; 0x40
    2846:	e7e5      	b.n	2814 <CONFIG_MAIN_STACK_SIZE+0x14>
        memset(wbs_aligned, flash_area_erased_val(fap), sizeof(wbs_aligned));
    2848:	9806      	ldr	r0, [sp, #24]
    284a:	f005 fcba 	bl	81c2 <flash_area_erased_val>
    284e:	2208      	movs	r2, #8
    2850:	4601      	mov	r1, r0
    2852:	a818      	add	r0, sp, #96	; 0x60
    2854:	f005 ffdf 	bl	8816 <memset>
        memcpy(wbs_aligned, img_chunk + img_chunk_len, rem_bytes);
    2858:	462a      	mov	r2, r5
    285a:	eb07 0108 	add.w	r1, r7, r8
    285e:	a818      	add	r0, sp, #96	; 0x60
    2860:	f005 ffce 	bl	8800 <memcpy>
        rc = flash_area_write(fap, curr_off + img_chunk_len, wbs_aligned,
    2864:	f8dd a018 	ldr.w	sl, [sp, #24]
    2868:	6831      	ldr	r1, [r6, #0]
    286a:	4650      	mov	r0, sl
    286c:	eb08 0701 	add.w	r7, r8, r1
    2870:	f005 fca0 	bl	81b4 <flash_area_align>
    2874:	4639      	mov	r1, r7
    2876:	4603      	mov	r3, r0
    2878:	aa18      	add	r2, sp, #96	; 0x60
    287a:	4650      	mov	r0, sl
    287c:	f005 fc6f 	bl	815e <flash_area_write>
    if (rc == 0) {
    2880:	2800      	cmp	r0, #0
    2882:	f47f aeca 	bne.w	261a <FIH_LABEL_FIH_CALL_END_798+0x94>
    2886:	e7cb      	b.n	2820 <CONFIG_MAIN_STACK_SIZE+0x20>
    } else if (hdr->nh_group == MGMT_GROUP_ID_DEFAULT) {
    2888:	2800      	cmp	r0, #0
    288a:	f47f ae40 	bne.w	250e <boot_serial_input+0x46>
        switch (hdr->nh_id) {
    288e:	79e3      	ldrb	r3, [r4, #7]
    2890:	2b01      	cmp	r3, #1
    2892:	f43f ae3d 	beq.w	2510 <boot_serial_input+0x48>
    2896:	2b05      	cmp	r3, #5
    2898:	d003      	beq.n	28a2 <CONFIG_MAIN_STACK_SIZE+0xa2>
    289a:	2b00      	cmp	r3, #0
    289c:	f47f ae37 	bne.w	250e <boot_serial_input+0x46>
    28a0:	e6ad      	b.n	25fe <FIH_LABEL_FIH_CALL_END_798+0x78>
    bs_rc_rsp(0);
    28a2:	f7ff fde3 	bl	246c <bs_rc_rsp>
	return z_impl_k_sleep(timeout);
    28a6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    28aa:	2100      	movs	r1, #0
    28ac:	f003 f96c 	bl	5b88 <z_impl_k_sleep>
    sys_reboot(SYS_REBOOT_COLD);
    28b0:	2001      	movs	r0, #1
    28b2:	f7ff fa77 	bl	1da4 <sys_reboot>
    28b6:	bf00      	nop
    28b8:	2000e5d8 	.word	0x2000e5d8

000028bc <boot_serial_start>:
 * serial port.
 */
void
boot_serial_start(const struct boot_uart_funcs *f)
{
    bs_entry = true;
    28bc:	2301      	movs	r3, #1
{
    28be:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    int dec_off = 0;
    28c2:	2400      	movs	r4, #0
{
    28c4:	4605      	mov	r5, r0
    bs_entry = true;
    28c6:	4f26      	ldr	r7, [pc, #152]	; (2960 <boot_serial_start+0xa4>)
    28c8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 2974 <boot_serial_start+0xb8>
    28cc:	703b      	strb	r3, [r7, #0]
    boot_uf = f;
    28ce:	4b25      	ldr	r3, [pc, #148]	; (2964 <boot_serial_start+0xa8>)
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    28d0:	4e25      	ldr	r6, [pc, #148]	; (2968 <boot_serial_start+0xac>)
    int dec_off = 0;
    28d2:	9400      	str	r4, [sp, #0]
    boot_uf = f;
    28d4:	6018      	str	r0, [r3, #0]
    while (timeout_in_ms > 0 || bs_entry) {
    28d6:	783b      	ldrb	r3, [r7, #0]
    28d8:	b913      	cbnz	r3, 28e0 <boot_serial_start+0x24>
    boot_serial_read_console(f,0);
}
    28da:	b002      	add	sp, #8
    28dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    28e0:	4b22      	ldr	r3, [pc, #136]	; (296c <boot_serial_start+0xb0>)
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    28e2:	f5c4 6180 	rsb	r1, r4, #1024	; 0x400
    28e6:	f8c3 8600 	str.w	r8, [r3, #1536]	; 0x600
    28ea:	f8c3 8604 	str.w	r8, [r3, #1540]	; 0x604
    28ee:	f8c3 8608 	str.w	r8, [r3, #1544]	; 0x608
    28f2:	f8c3 860c 	str.w	r8, [r3, #1548]	; 0x60c
    28f6:	f8c3 8610 	str.w	r8, [r3, #1552]	; 0x610
    28fa:	f8c3 8614 	str.w	r8, [r3, #1556]	; 0x614
    28fe:	f8c3 8618 	str.w	r8, [r3, #1560]	; 0x618
    2902:	f8c3 861c 	str.w	r8, [r3, #1564]	; 0x61c
    2906:	682b      	ldr	r3, [r5, #0]
    2908:	aa01      	add	r2, sp, #4
    290a:	3101      	adds	r1, #1
    290c:	1930      	adds	r0, r6, r4
    290e:	4798      	blx	r3
        if (rc <= 0 && !full_line) {
    2910:	2800      	cmp	r0, #0
    2912:	9b01      	ldr	r3, [sp, #4]
    2914:	dc01      	bgt.n	291a <boot_serial_start+0x5e>
    2916:	2b00      	cmp	r3, #0
    2918:	d0dd      	beq.n	28d6 <boot_serial_start+0x1a>
        off += rc;
    291a:	4404      	add	r4, r0
        if (!full_line) {
    291c:	b92b      	cbnz	r3, 292a <boot_serial_start+0x6e>
            if (off == max_input) {
    291e:	f240 4301 	movw	r3, #1025	; 0x401
    2922:	429c      	cmp	r4, r3
    2924:	d1d7      	bne.n	28d6 <boot_serial_start+0x1a>
                off = 0;
    2926:	2400      	movs	r4, #0
    2928:	e7d5      	b.n	28d6 <boot_serial_start+0x1a>
        if (in_buf[0] == SHELL_NLIP_PKT_START1 &&
    292a:	7833      	ldrb	r3, [r6, #0]
    292c:	2b06      	cmp	r3, #6
    292e:	d109      	bne.n	2944 <boot_serial_start+0x88>
    2930:	7873      	ldrb	r3, [r6, #1]
    2932:	2b09      	cmp	r3, #9
    2934:	d10b      	bne.n	294e <boot_serial_start+0x92>
            dec_off = 0;
    2936:	2300      	movs	r3, #0
    2938:	9300      	str	r3, [sp, #0]
            rc = boot_serial_in_dec(&in_buf[2], off - 2, dec_buf, &dec_off, max_input);
    293a:	4669      	mov	r1, sp
    293c:	1ea0      	subs	r0, r4, #2
    293e:	f7ff fd55 	bl	23ec <boot_serial_in_dec.constprop.0>
    2942:	e004      	b.n	294e <boot_serial_start+0x92>
        } else if (in_buf[0] == SHELL_NLIP_DATA_START1 &&
    2944:	2b04      	cmp	r3, #4
    2946:	d102      	bne.n	294e <boot_serial_start+0x92>
    2948:	7873      	ldrb	r3, [r6, #1]
    294a:	2b14      	cmp	r3, #20
    294c:	d0f5      	beq.n	293a <boot_serial_start+0x7e>
        if (rc == 1) {
    294e:	2801      	cmp	r0, #1
    2950:	d1e9      	bne.n	2926 <boot_serial_start+0x6a>
            boot_serial_input(&dec_buf[2], dec_off - 2);
    2952:	9900      	ldr	r1, [sp, #0]
    2954:	4806      	ldr	r0, [pc, #24]	; (2970 <boot_serial_start+0xb4>)
    2956:	3902      	subs	r1, #2
    2958:	f7ff fdb6 	bl	24c8 <boot_serial_input>
    295c:	e7e3      	b.n	2926 <boot_serial_start+0x6a>
    295e:	bf00      	nop
    2960:	2000ea57 	.word	0x2000ea57
    2964:	2000e618 	.word	0x2000e618
    2968:	2000ee59 	.word	0x2000ee59
    296c:	50018000 	.word	0x50018000
    2970:	2000ea5a 	.word	0x2000ea5a
    2974:	6e524635 	.word	0x6e524635

00002978 <decode_repeated_Upload_members>:
	return tmp_result;
}

static bool decode_repeated_Upload_members(
		zcbor_state_t *state, struct Upload_members *result)
{
    2978:	b573      	push	{r0, r1, r4, r5, r6, lr}
    297a:	4604      	mov	r4, r0
    297c:	460d      	mov	r5, r1
	bool tmp_result = (((zcbor_union_start_code(state) && (int_res = (((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"image", tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    297e:	f005 fed1 	bl	8724 <zcbor_union_start_code>
    2982:	2800      	cmp	r0, #0
    2984:	d068      	beq.n	2a58 <decode_repeated_Upload_members+0xe0>
    2986:	4b35      	ldr	r3, [pc, #212]	; (2a5c <decode_repeated_Upload_members+0xe4>)
    2988:	4669      	mov	r1, sp
    298a:	9300      	str	r3, [sp, #0]
    298c:	2305      	movs	r3, #5
    298e:	4620      	mov	r0, r4
    2990:	9301      	str	r3, [sp, #4]
    2992:	f005 fd9d 	bl	84d0 <zcbor_tstr_expect>
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"sha", tmp_str.len = sizeof("sha") - 1, &tmp_str)))))
    2996:	b160      	cbz	r0, 29b2 <decode_repeated_Upload_members+0x3a>
	&& (zcbor_int32_decode(state, (&(*result)._Member_image)))) && (((*result)._Member_choice = _Member_image) || 1))
    2998:	4629      	mov	r1, r5
    299a:	4620      	mov	r0, r4
    299c:	f005 fd79 	bl	8492 <zcbor_int32_decode>
    29a0:	b138      	cbz	r0, 29b2 <decode_repeated_Upload_members+0x3a>
    29a2:	2300      	movs	r3, #0
    29a4:	722b      	strb	r3, [r5, #8]
	&& (zcbor_bstr_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), zcbor_union_end_code(state), int_res))));
    29a6:	4620      	mov	r0, r4
    29a8:	f005 fec3 	bl	8732 <zcbor_union_end_code>
	bool tmp_result = (((zcbor_union_start_code(state) && (int_res = (((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"image", tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    29ac:	2001      	movs	r0, #1

	if (!tmp_result)
		zcbor_trace();

	return tmp_result;
}
    29ae:	b002      	add	sp, #8
    29b0:	bd70      	pop	{r4, r5, r6, pc}
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"data", tmp_str.len = sizeof("data") - 1, &tmp_str)))))
    29b2:	4620      	mov	r0, r4
    29b4:	f005 feb9 	bl	872a <zcbor_union_elem_code>
    29b8:	b178      	cbz	r0, 29da <decode_repeated_Upload_members+0x62>
    29ba:	4b29      	ldr	r3, [pc, #164]	; (2a60 <decode_repeated_Upload_members+0xe8>)
    29bc:	4669      	mov	r1, sp
    29be:	9300      	str	r3, [sp, #0]
    29c0:	2304      	movs	r3, #4
    29c2:	4620      	mov	r0, r4
    29c4:	9301      	str	r3, [sp, #4]
    29c6:	f005 fd83 	bl	84d0 <zcbor_tstr_expect>
    29ca:	b130      	cbz	r0, 29da <decode_repeated_Upload_members+0x62>
	&& (zcbor_bstr_decode(state, (&(*result)._Member_data)))) && (((*result)._Member_choice = _Member_data) || 1)))
    29cc:	4629      	mov	r1, r5
    29ce:	4620      	mov	r0, r4
    29d0:	f005 fd7b 	bl	84ca <zcbor_bstr_decode>
    29d4:	b108      	cbz	r0, 29da <decode_repeated_Upload_members+0x62>
    29d6:	2301      	movs	r3, #1
    29d8:	e7e4      	b.n	29a4 <decode_repeated_Upload_members+0x2c>
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"len", tmp_str.len = sizeof("len") - 1, &tmp_str)))))
    29da:	4620      	mov	r0, r4
    29dc:	f005 fea5 	bl	872a <zcbor_union_elem_code>
    29e0:	b178      	cbz	r0, 2a02 <decode_repeated_Upload_members+0x8a>
    29e2:	4b20      	ldr	r3, [pc, #128]	; (2a64 <decode_repeated_Upload_members+0xec>)
    29e4:	4669      	mov	r1, sp
    29e6:	9300      	str	r3, [sp, #0]
    29e8:	2303      	movs	r3, #3
    29ea:	4620      	mov	r0, r4
    29ec:	9301      	str	r3, [sp, #4]
    29ee:	f005 fd6f 	bl	84d0 <zcbor_tstr_expect>
    29f2:	b130      	cbz	r0, 2a02 <decode_repeated_Upload_members+0x8a>
	&& (zcbor_int32_decode(state, (&(*result)._Member_len)))) && (((*result)._Member_choice = _Member_len) || 1)))
    29f4:	4629      	mov	r1, r5
    29f6:	4620      	mov	r0, r4
    29f8:	f005 fd4b 	bl	8492 <zcbor_int32_decode>
    29fc:	b108      	cbz	r0, 2a02 <decode_repeated_Upload_members+0x8a>
    29fe:	2302      	movs	r3, #2
    2a00:	e7d0      	b.n	29a4 <decode_repeated_Upload_members+0x2c>
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"off", tmp_str.len = sizeof("off") - 1, &tmp_str)))))
    2a02:	4620      	mov	r0, r4
    2a04:	f005 fe91 	bl	872a <zcbor_union_elem_code>
    2a08:	b178      	cbz	r0, 2a2a <decode_repeated_Upload_members+0xb2>
    2a0a:	2603      	movs	r6, #3
    2a0c:	4b16      	ldr	r3, [pc, #88]	; (2a68 <decode_repeated_Upload_members+0xf0>)
    2a0e:	4669      	mov	r1, sp
    2a10:	4620      	mov	r0, r4
    2a12:	9300      	str	r3, [sp, #0]
    2a14:	9601      	str	r6, [sp, #4]
    2a16:	f005 fd5b 	bl	84d0 <zcbor_tstr_expect>
    2a1a:	b130      	cbz	r0, 2a2a <decode_repeated_Upload_members+0xb2>
	&& (zcbor_int32_decode(state, (&(*result)._Member_off)))) && (((*result)._Member_choice = _Member_off) || 1)))
    2a1c:	4629      	mov	r1, r5
    2a1e:	4620      	mov	r0, r4
    2a20:	f005 fd37 	bl	8492 <zcbor_int32_decode>
    2a24:	b108      	cbz	r0, 2a2a <decode_repeated_Upload_members+0xb2>
    2a26:	722e      	strb	r6, [r5, #8]
    2a28:	e7bd      	b.n	29a6 <decode_repeated_Upload_members+0x2e>
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"sha", tmp_str.len = sizeof("sha") - 1, &tmp_str)))))
    2a2a:	4620      	mov	r0, r4
    2a2c:	f005 fe7d 	bl	872a <zcbor_union_elem_code>
    2a30:	b178      	cbz	r0, 2a52 <decode_repeated_Upload_members+0xda>
    2a32:	4b0e      	ldr	r3, [pc, #56]	; (2a6c <decode_repeated_Upload_members+0xf4>)
    2a34:	4669      	mov	r1, sp
    2a36:	9300      	str	r3, [sp, #0]
    2a38:	2303      	movs	r3, #3
    2a3a:	4620      	mov	r0, r4
    2a3c:	9301      	str	r3, [sp, #4]
    2a3e:	f005 fd47 	bl	84d0 <zcbor_tstr_expect>
    2a42:	b130      	cbz	r0, 2a52 <decode_repeated_Upload_members+0xda>
	&& (zcbor_bstr_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), zcbor_union_end_code(state), int_res))));
    2a44:	4629      	mov	r1, r5
    2a46:	4620      	mov	r0, r4
    2a48:	f005 fd3f 	bl	84ca <zcbor_bstr_decode>
    2a4c:	b108      	cbz	r0, 2a52 <decode_repeated_Upload_members+0xda>
    2a4e:	2304      	movs	r3, #4
    2a50:	e7a8      	b.n	29a4 <decode_repeated_Upload_members+0x2c>
    2a52:	4620      	mov	r0, r4
    2a54:	f005 fe6d 	bl	8732 <zcbor_union_end_code>
	bool tmp_result = (((zcbor_union_start_code(state) && (int_res = (((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"image", tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    2a58:	2000      	movs	r0, #0
    2a5a:	e7a8      	b.n	29ae <decode_repeated_Upload_members+0x36>
    2a5c:	00009fea 	.word	0x00009fea
    2a60:	0000a34a 	.word	0x0000a34a
    2a64:	0000a34f 	.word	0x0000a34f
    2a68:	0000a346 	.word	0x0000a346
    2a6c:	0000a353 	.word	0x0000a353

00002a70 <cbor_decode_Upload>:

int cbor_decode_Upload(
		const uint8_t *payload, size_t payload_len,
		struct Upload *result,
		size_t *payload_len_out)
{
    2a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	zcbor_state_t states[4];

	zcbor_new_state(states, sizeof(states) / sizeof(zcbor_state_t), payload, payload_len, 1);
    2a74:	f04f 0901 	mov.w	r9, #1
{
    2a78:	b09d      	sub	sp, #116	; 0x74
	zcbor_new_state(states, sizeof(states) / sizeof(zcbor_state_t), payload, payload_len, 1);
    2a7a:	ac04      	add	r4, sp, #16
{
    2a7c:	4607      	mov	r7, r0
    2a7e:	460e      	mov	r6, r1
    2a80:	4690      	mov	r8, r2
    2a82:	461d      	mov	r5, r3
	zcbor_new_state(states, sizeof(states) / sizeof(zcbor_state_t), payload, payload_len, 1);
    2a84:	4602      	mov	r2, r0
    2a86:	460b      	mov	r3, r1
    2a88:	4620      	mov	r0, r4
    2a8a:	2104      	movs	r1, #4
    2a8c:	f8cd 9000 	str.w	r9, [sp]
    2a90:	f005 fe53 	bl	873a <zcbor_new_state>
	bool tmp_result = (((zcbor_map_start_decode(state) && ((zcbor_multi_decode(1, 5, &(*result)._Upload_members_count, (zcbor_decoder_t *)decode_repeated_Upload_members, state, (&(*result)._Upload_members), sizeof(struct Upload_members))) || (zcbor_list_map_end_force_decode(state), false)) && zcbor_map_end_decode(state))));
    2a94:	4620      	mov	r0, r4
    2a96:	f005 fd1e 	bl	84d6 <zcbor_map_start_decode>
    2a9a:	b170      	cbz	r0, 2aba <cbor_decode_Upload+0x4a>
    2a9c:	230c      	movs	r3, #12
    2a9e:	2105      	movs	r1, #5
    2aa0:	e9cd 8301 	strd	r8, r3, [sp, #4]
    2aa4:	4648      	mov	r0, r9
    2aa6:	4b11      	ldr	r3, [pc, #68]	; (2aec <cbor_decode_Upload+0x7c>)
    2aa8:	9400      	str	r4, [sp, #0]
    2aaa:	f108 023c 	add.w	r2, r8, #60	; 0x3c
    2aae:	f005 fd32 	bl	8516 <zcbor_multi_decode>
    2ab2:	b960      	cbnz	r0, 2ace <cbor_decode_Upload+0x5e>
    2ab4:	4620      	mov	r0, r4
    2ab6:	f005 fd29 	bl	850c <zcbor_list_map_end_force_decode>
/** Return the current error state, replacing it with SUCCESS. */
static inline int zcbor_pop_error(zcbor_state_t *state)
{
	int err = state->constant_state->error;

	state->constant_state->error = ZCBOR_SUCCESS;
    2aba:	2200      	movs	r2, #0
	int err = state->constant_state->error;
    2abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2abe:	68d8      	ldr	r0, [r3, #12]
	state->constant_state->error = ZCBOR_SUCCESS;
    2ac0:	60da      	str	r2, [r3, #12]
				(size_t)states[0].payload - (size_t)payload);
	}

	if (!ret) {
		int status = zcbor_pop_error(states);
		return (status == ZCBOR_SUCCESS) ? ZCBOR_ERR_UNKNOWN : status;
    2ac2:	4290      	cmp	r0, r2
    2ac4:	bf08      	it	eq
    2ac6:	201f      	moveq	r0, #31
	}
	return ZCBOR_SUCCESS;
}
    2ac8:	b01d      	add	sp, #116	; 0x74
    2aca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bool tmp_result = (((zcbor_map_start_decode(state) && ((zcbor_multi_decode(1, 5, &(*result)._Upload_members_count, (zcbor_decoder_t *)decode_repeated_Upload_members, state, (&(*result)._Upload_members), sizeof(struct Upload_members))) || (zcbor_list_map_end_force_decode(state), false)) && zcbor_map_end_decode(state))));
    2ace:	4620      	mov	r0, r4
    2ad0:	f005 fd1a 	bl	8508 <zcbor_map_end_decode>
    2ad4:	2800      	cmp	r0, #0
    2ad6:	d0f0      	beq.n	2aba <cbor_decode_Upload+0x4a>
	if (ret && (payload_len_out != NULL)) {
    2ad8:	b90d      	cbnz	r5, 2ade <cbor_decode_Upload+0x6e>
	return ZCBOR_SUCCESS;
    2ada:	2000      	movs	r0, #0
    2adc:	e7f4      	b.n	2ac8 <cbor_decode_Upload+0x58>
		*payload_len_out = MIN(payload_len,
    2ade:	9b04      	ldr	r3, [sp, #16]
    2ae0:	1bdb      	subs	r3, r3, r7
    2ae2:	42b3      	cmp	r3, r6
    2ae4:	bf94      	ite	ls
    2ae6:	602b      	strls	r3, [r5, #0]
    2ae8:	602e      	strhi	r6, [r5, #0]
    2aea:	e7f6      	b.n	2ada <cbor_decode_Upload+0x6a>
    2aec:	00002979 	.word	0x00002979

00002af0 <get_result_len>:
	return true;
}


static uint_fast32_t get_result_len(const void *const input, uint_fast32_t max_result_len)
{
    2af0:	4602      	mov	r2, r0

	for (; len > 0; len--) {
#ifdef CONFIG_BIG_ENDIAN
		if (u8_result[max_result_len - len] != 0) {
#else
		if (u8_result[len - 1] != 0) {
    2af2:	1e4b      	subs	r3, r1, #1
{
    2af4:	4608      	mov	r0, r1
		if (u8_result[len - 1] != 0) {
    2af6:	5cd1      	ldrb	r1, [r2, r3]
    2af8:	b151      	cbz	r1, 2b10 <get_result_len+0x20>
			break;
		}
	}

	/* Round up to nearest power of 2. */
	return len <= 2 ? len : (uint8_t)(1 << log2ceil(len));
    2afa:	2802      	cmp	r0, #2
    2afc:	d90f      	bls.n	2b1e <get_result_len+0x2e>
    2afe:	4b08      	ldr	r3, [pc, #32]	; (2b20 <get_result_len+0x30>)
    2b00:	4403      	add	r3, r0
    2b02:	2001      	movs	r0, #1
    2b04:	f813 3c02 	ldrb.w	r3, [r3, #-2]
    2b08:	4098      	lsls	r0, r3
    2b0a:	b2c0      	uxtb	r0, r0
    2b0c:	4770      	bx	lr
	for (; len > 0; len--) {
    2b0e:	b12b      	cbz	r3, 2b1c <get_result_len+0x2c>
		if (u8_result[len - 1] != 0) {
    2b10:	4618      	mov	r0, r3
    2b12:	3b01      	subs	r3, #1
    2b14:	5cd1      	ldrb	r1, [r2, r3]
    2b16:	2900      	cmp	r1, #0
    2b18:	d0f9      	beq.n	2b0e <get_result_len+0x1e>
    2b1a:	e7ee      	b.n	2afa <get_result_len+0xa>
    2b1c:	4618      	mov	r0, r3
}
    2b1e:	4770      	bx	lr
    2b20:	0000a357 	.word	0x0000a357

00002b24 <value_encode>:
}


static bool value_encode(zcbor_state_t *state, zcbor_major_type_t major_type,
		const void *const input, uint_fast32_t max_result_len)
{
    2b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b26:	4605      	mov	r5, r0
    2b28:	460f      	mov	r7, r1
	zcbor_assert(max_result_len != 0, "0-length result not supported.\r\n");

	uint_fast32_t result_len = get_result_len(input, max_result_len);
    2b2a:	4610      	mov	r0, r2
    2b2c:	4619      	mov	r1, r3
{
    2b2e:	4616      	mov	r6, r2
	uint_fast32_t result_len = get_result_len(input, max_result_len);
    2b30:	f7ff ffde 	bl	2af0 <get_result_len>
	if ((result_len == 1) && (u8_result[0] <= ZCBOR_VALUE_IN_HEADER)) {
    2b34:	2801      	cmp	r0, #1
	uint_fast32_t result_len = get_result_len(input, max_result_len);
    2b36:	4604      	mov	r4, r0
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    2b38:	682a      	ldr	r2, [r5, #0]
    2b3a:	68e9      	ldr	r1, [r5, #12]
	if ((result_len == 1) && (u8_result[0] <= ZCBOR_VALUE_IN_HEADER)) {
    2b3c:	d11c      	bne.n	2b78 <value_encode+0x54>
    2b3e:	7833      	ldrb	r3, [r6, #0]
    2b40:	2b17      	cmp	r3, #23
    2b42:	d904      	bls.n	2b4e <value_encode+0x2a>
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    2b44:	1c93      	adds	r3, r2, #2
    2b46:	4299      	cmp	r1, r3
    2b48:	d31a      	bcc.n	2b80 <value_encode+0x5c>
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
    2b4a:	2300      	movs	r3, #0
    2b4c:	e025      	b.n	2b9a <value_encode+0x76>
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    2b4e:	1c50      	adds	r0, r2, #1
    2b50:	4281      	cmp	r1, r0
    2b52:	d315      	bcc.n	2b80 <value_encode+0x5c>
		return 0;
    2b54:	2400      	movs	r4, #0
	ZCBOR_CHECK_PAYLOAD();
    2b56:	428a      	cmp	r2, r1
    2b58:	d212      	bcs.n	2b80 <value_encode+0x5c>
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    2b5a:	1c51      	adds	r1, r2, #1
    2b5c:	f003 031f 	and.w	r3, r3, #31
    2b60:	6029      	str	r1, [r5, #0]
    2b62:	ea43 1147 	orr.w	r1, r3, r7, lsl #5
    2b66:	7011      	strb	r1, [r2, #0]
	for (; encoded_len > 0; encoded_len--) {
    2b68:	4434      	add	r4, r6
    2b6a:	42b4      	cmp	r4, r6
    2b6c:	d118      	bne.n	2ba0 <value_encode+0x7c>
	state->elem_count++;
    2b6e:	68ab      	ldr	r3, [r5, #8]
	return true;
    2b70:	2001      	movs	r0, #1
	state->elem_count++;
    2b72:	3301      	adds	r3, #1
    2b74:	60ab      	str	r3, [r5, #8]
	return true;
    2b76:	e007      	b.n	2b88 <value_encode+0x64>
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    2b78:	1c43      	adds	r3, r0, #1
    2b7a:	4413      	add	r3, r2
    2b7c:	4299      	cmp	r1, r3
    2b7e:	d204      	bcs.n	2b8a <value_encode+0x66>
{
#ifdef ZCBOR_STOP_ON_ERROR
	if (zcbor_check_error(state))
#endif
	{
		state->constant_state->error = err;
    2b80:	2208      	movs	r2, #8
		ZCBOR_ERR(ZCBOR_ERR_NO_PAYLOAD);
    2b82:	2000      	movs	r0, #0
    2b84:	696b      	ldr	r3, [r5, #20]
    2b86:	60da      	str	r2, [r3, #12]
	const void *const result = get_result(input, max_result_len, result_len);

	return value_encode_len(state, major_type, result, result_len);
}
    2b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
    2b8a:	b908      	cbnz	r0, 2b90 <value_encode+0x6c>
	if (!encode_header_byte(state, major_type,
    2b8c:	7833      	ldrb	r3, [r6, #0]
    2b8e:	e7e2      	b.n	2b56 <value_encode+0x32>
	switch(val) {
    2b90:	1e83      	subs	r3, r0, #2
    2b92:	2b06      	cmp	r3, #6
    2b94:	d8d9      	bhi.n	2b4a <value_encode+0x26>
    2b96:	4806      	ldr	r0, [pc, #24]	; (2bb0 <value_encode+0x8c>)
    2b98:	5cc3      	ldrb	r3, [r0, r3]
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
    2b9a:	3318      	adds	r3, #24
    2b9c:	b2db      	uxtb	r3, r3
    2b9e:	e7da      	b.n	2b56 <value_encode+0x32>
		*(state->payload_mut++) = u8_result[encoded_len - 1];
    2ba0:	682b      	ldr	r3, [r5, #0]
    2ba2:	1c5a      	adds	r2, r3, #1
    2ba4:	602a      	str	r2, [r5, #0]
    2ba6:	f814 2d01 	ldrb.w	r2, [r4, #-1]!
    2baa:	701a      	strb	r2, [r3, #0]
	for (; encoded_len > 0; encoded_len--) {
    2bac:	e7dd      	b.n	2b6a <value_encode+0x46>
    2bae:	bf00      	nop
    2bb0:	0000a357 	.word	0x0000a357

00002bb4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2bb4:	4901      	ldr	r1, [pc, #4]	; (2bbc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2bb6:	2210      	movs	r2, #16
	str	r2, [r1]
    2bb8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2bba:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2bbc:	e000ed10 	.word	0xe000ed10

00002bc0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2bc0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2bc2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2bc4:	f380 8811 	msr	BASEPRI, r0
	isb
    2bc8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2bcc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2bd0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2bd2:	b662      	cpsie	i
	isb
    2bd4:	f3bf 8f6f 	isb	sy

	bx	lr
    2bd8:	4770      	bx	lr
    2bda:	bf00      	nop

00002bdc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2bdc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2bde:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2be0:	f381 8811 	msr	BASEPRI, r1

	wfe
    2be4:	bf20      	wfe

	msr	BASEPRI, r0
    2be6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2bea:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2bec:	4770      	bx	lr
    2bee:	bf00      	nop

00002bf0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2bf4:	4607      	mov	r7, r0

	if (esf != NULL) {
    2bf6:	460c      	mov	r4, r1
{
    2bf8:	b086      	sub	sp, #24
	if (esf != NULL) {
    2bfa:	2900      	cmp	r1, #0
    2bfc:	d04a      	beq.n	2c94 <z_arm_fatal_error+0xa4>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2bfe:	688b      	ldr	r3, [r1, #8]
    2c00:	4828      	ldr	r0, [pc, #160]	; (2ca4 <z_arm_fatal_error+0xb4>)
    2c02:	9300      	str	r3, [sp, #0]
    2c04:	e9d1 2300 	ldrd	r2, r3, [r1]
    2c08:	2145      	movs	r1, #69	; 0x45
    2c0a:	f005 fa85 	bl	8118 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2c0e:	6963      	ldr	r3, [r4, #20]
    2c10:	2145      	movs	r1, #69	; 0x45
    2c12:	9300      	str	r3, [sp, #0]
    2c14:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    2c18:	4823      	ldr	r0, [pc, #140]	; (2ca8 <z_arm_fatal_error+0xb8>)
    2c1a:	f005 fa7d 	bl	8118 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2c1e:	2145      	movs	r1, #69	; 0x45
    2c20:	69e2      	ldr	r2, [r4, #28]
    2c22:	4822      	ldr	r0, [pc, #136]	; (2cac <z_arm_fatal_error+0xbc>)
    2c24:	f005 fa78 	bl	8118 <z_log_minimal_printk>
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
    2c28:	4626      	mov	r6, r4
    2c2a:	2500      	movs	r5, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    2c2c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 2cb8 <z_arm_fatal_error+0xc8>
    2c30:	edd6 7a0b 	vldr	s15, [r6, #44]	; 0x2c
    2c34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2c38:	ed96 7a08 	vldr	s14, [r6, #32]
    2c3c:	edcd 7a05 	vstr	s15, [sp, #20]
    2c40:	1ceb      	adds	r3, r5, #3
    2c42:	9304      	str	r3, [sp, #16]
    2c44:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
    2c48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2c4c:	edcd 7a03 	vstr	s15, [sp, #12]
    2c50:	1cab      	adds	r3, r5, #2
    2c52:	9302      	str	r3, [sp, #8]
    2c54:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
    2c58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2c5c:	edcd 7a01 	vstr	s15, [sp, #4]
    2c60:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    2c64:	1c6b      	adds	r3, r5, #1
    2c66:	462a      	mov	r2, r5
    2c68:	9300      	str	r3, [sp, #0]
    2c6a:	2145      	movs	r1, #69	; 0x45
    2c6c:	ee17 3a90 	vmov	r3, s15
    2c70:	4640      	mov	r0, r8
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
    2c72:	3504      	adds	r5, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    2c74:	f005 fa50 	bl	8118 <z_log_minimal_printk>
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
    2c78:	2d10      	cmp	r5, #16
    2c7a:	f106 0610 	add.w	r6, r6, #16
    2c7e:	d1d7      	bne.n	2c30 <z_arm_fatal_error+0x40>
	LOG_ERR("fpscr:  0x%08x", esf->fpu.fpscr);
    2c80:	2145      	movs	r1, #69	; 0x45
    2c82:	6e22      	ldr	r2, [r4, #96]	; 0x60
    2c84:	480a      	ldr	r0, [pc, #40]	; (2cb0 <z_arm_fatal_error+0xc0>)
    2c86:	f005 fa47 	bl	8118 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2c8a:	2145      	movs	r1, #69	; 0x45
    2c8c:	69a2      	ldr	r2, [r4, #24]
    2c8e:	4809      	ldr	r0, [pc, #36]	; (2cb4 <z_arm_fatal_error+0xc4>)
    2c90:	f005 fa42 	bl	8118 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2c94:	4621      	mov	r1, r4
    2c96:	4638      	mov	r0, r7
}
    2c98:	b006      	add	sp, #24
    2c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_fatal_error(reason, esf);
    2c9e:	f002 b9ad 	b.w	4ffc <z_fatal_error>
    2ca2:	bf00      	nop
    2ca4:	0000a35e 	.word	0x0000a35e
    2ca8:	0000a392 	.word	0x0000a392
    2cac:	0000a3c6 	.word	0x0000a3c6
    2cb0:	0000a422 	.word	0x0000a422
    2cb4:	0000a436 	.word	0x0000a436
    2cb8:	0000a3da 	.word	0x0000a3da

00002cbc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2cbc:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2cbe:	2800      	cmp	r0, #0
    2cc0:	db07      	blt.n	2cd2 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2cc2:	2301      	movs	r3, #1
    2cc4:	0941      	lsrs	r1, r0, #5
    2cc6:	4a03      	ldr	r2, [pc, #12]	; (2cd4 <arch_irq_enable+0x18>)
    2cc8:	f000 001f 	and.w	r0, r0, #31
    2ccc:	4083      	lsls	r3, r0
    2cce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    2cd2:	4770      	bx	lr
    2cd4:	e000e100 	.word	0xe000e100

00002cd8 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2cd8:	4b05      	ldr	r3, [pc, #20]	; (2cf0 <arch_irq_is_enabled+0x18>)
    2cda:	0942      	lsrs	r2, r0, #5
    2cdc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2ce0:	2301      	movs	r3, #1
    2ce2:	f000 001f 	and.w	r0, r0, #31
    2ce6:	fa03 f000 	lsl.w	r0, r3, r0
}
    2cea:	4010      	ands	r0, r2
    2cec:	4770      	bx	lr
    2cee:	bf00      	nop
    2cf0:	e000e100 	.word	0xe000e100

00002cf4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2cf4:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2cf6:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    2cf8:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2cfc:	bfac      	ite	ge
    2cfe:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d02:	4b06      	ldrlt	r3, [pc, #24]	; (2d1c <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d04:	ea4f 1141 	mov.w	r1, r1, lsl #5
    2d08:	b2c9      	uxtb	r1, r1
    2d0a:	bfab      	itete	ge
    2d0c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d10:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d14:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d18:	5419      	strblt	r1, [r3, r0]
}
    2d1a:	4770      	bx	lr
    2d1c:	e000ed14 	.word	0xe000ed14

00002d20 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2d20:	bf30      	wfi
    b z_SysNmiOnReset
    2d22:	f7ff bffd 	b.w	2d20 <z_SysNmiOnReset>
    2d26:	bf00      	nop

00002d28 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2d28:	4a14      	ldr	r2, [pc, #80]	; (2d7c <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2d2a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2d2c:	4b14      	ldr	r3, [pc, #80]	; (2d80 <z_arm_prep_c+0x58>)
    2d2e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2d32:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    2d34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2d38:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2d3c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2d40:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2d44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    2d48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2d4c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    2d50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    2d54:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    2d58:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    2d5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2d60:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
    2d64:	2300      	movs	r3, #0
    2d66:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2d6a:	f002 f9d1 	bl	5110 <z_bss_zero>
	z_data_copy();
    2d6e:	f002 ff8b 	bl	5c88 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2d72:	f000 fad5 	bl	3320 <z_arm_interrupt_init>
	z_cstart();
    2d76:	f002 fa0b 	bl	5190 <z_cstart>
    2d7a:	bf00      	nop
    2d7c:	00000000 	.word	0x00000000
    2d80:	e000ed00 	.word	0xe000ed00

00002d84 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2d84:	4a09      	ldr	r2, [pc, #36]	; (2dac <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2d86:	490a      	ldr	r1, [pc, #40]	; (2db0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2d88:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2d8a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    2d8c:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    2d8e:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2d90:	4908      	ldr	r1, [pc, #32]	; (2db4 <arch_swap+0x30>)
    2d92:	684b      	ldr	r3, [r1, #4]
    2d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2d98:	604b      	str	r3, [r1, #4]
    2d9a:	2300      	movs	r3, #0
    2d9c:	f383 8811 	msr	BASEPRI, r3
    2da0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2da4:	6893      	ldr	r3, [r2, #8]
}
    2da6:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2da8:	4770      	bx	lr
    2daa:	bf00      	nop
    2dac:	2000e6c0 	.word	0x2000e6c0
    2db0:	00009a58 	.word	0x00009a58
    2db4:	e000ed00 	.word	0xe000ed00

00002db8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2db8:	4922      	ldr	r1, [pc, #136]	; (2e44 <in_fp_endif+0x2e>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2dba:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    2dbc:	f882 e0bd 	strb.w	lr, [r2, #189]	; 0xbd
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2dc0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2dc4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2dc6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2dca:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
    2dce:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
    2dd2:	d103      	bne.n	2ddc <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
    2dd4:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vstmia r0, {s16-s31}
    2dd8:	ec80 8a10 	vstmia	r0, {s16-s31}

00002ddc <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2ddc:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2dde:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2de2:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2de6:	4f18      	ldr	r7, [pc, #96]	; (2e48 <in_fp_endif+0x32>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2de8:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2dec:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2dee:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2df0:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    2df2:	f992 e0bd 	ldrsb.w	lr, [r2, #189]	; 0xbd

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2df6:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    2df8:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2dfa:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2dfc:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
    2e00:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
    2e04:	d003      	beq.n	2e0e <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    2e06:	2300      	movs	r3, #0
    vmsr fpscr, r3
    2e08:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
    2e0c:	e003      	b.n	2e16 <in_fp_endif>

00002e0e <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
    2e0e:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vldmia r0, {s16-s31}
    2e12:	ec90 8a10 	vldmia	r0, {s16-s31}

00002e16 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    2e16:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
    2e1a:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    2e1e:	f383 8814 	msr	CONTROL, r3
    isb
    2e22:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2e26:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2e2a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2e2e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    2e32:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    2e36:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    2e38:	f005 fcb0 	bl	879c <configure_builtin_stack_guard>
    pop {r2, lr}
    2e3c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2e40:	4770      	bx	lr
    2e42:	0000      	.short	0x0000
    ldr r1, =_kernel
    2e44:	2000e6c0 	.word	0x2000e6c0
    ldr v4, =_SCS_ICSR
    2e48:	e000ed04 	.word	0xe000ed04

00002e4c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2e4c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2e50:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2e52:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2e56:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2e5a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2e5c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2e60:	2902      	cmp	r1, #2
    beq _oops
    2e62:	d0ff      	beq.n	2e64 <_oops>

00002e64 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2e64:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    2e66:	f005 fc8a 	bl	877e <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    2e6a:	bd01      	pop	{r0, pc}

00002e6c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2e6c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2e70:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    2e72:	490d      	ldr	r1, [pc, #52]	; (2ea8 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
    2e74:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    2e78:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    2e7a:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    2e7e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2e82:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    2e84:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    2e88:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2e8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2e90:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2e94:	2300      	movs	r3, #0
    2e96:	6743      	str	r3, [r0, #116]	; 0x74

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    2e98:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2e9c:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2e9e:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    2ea0:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2ea4:	4770      	bx	lr
    2ea6:	bf00      	nop
    2ea8:	00007ef9 	.word	0x00007ef9

00002eac <arch_switch_to_main_thread>:
    2eac:	2300      	movs	r3, #0
    2eae:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    2eb2:	f3ef 8314 	mrs	r3, CONTROL
#else
	__set_FPSCR(0);
#endif
#if defined(CONFIG_CPU_CORTEX_M) && defined(CONFIG_FPU_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    2eb6:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    2eba:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    2ebe:	f3bf 8f6f 	isb	sy
    2ec2:	f3bf 8f6f 	isb	sy
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2ec6:	4b09      	ldr	r3, [pc, #36]	; (2eec <arch_switch_to_main_thread+0x40>)
    2ec8:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    2eca:	6e43      	ldr	r3, [r0, #100]	; 0x64
    2ecc:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2ed0:	4610      	mov	r0, r2
    2ed2:	f381 8809 	msr	PSP, r1
    2ed6:	2100      	movs	r1, #0
    2ed8:	b663      	cpsie	if
    2eda:	f381 8811 	msr	BASEPRI, r1
    2ede:	f3bf 8f6f 	isb	sy
    2ee2:	2200      	movs	r2, #0
    2ee4:	2300      	movs	r3, #0
    2ee6:	f005 f807 	bl	7ef8 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2eea:	bf00      	nop
    2eec:	2000e6c0 	.word	0x2000e6c0

00002ef0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2ef0:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2ef2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2ef6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2efa:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2efe:	4904      	ldr	r1, [pc, #16]	; (2f10 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2f00:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2f02:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2f04:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2f06:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2f0a:	4902      	ldr	r1, [pc, #8]	; (2f14 <_isr_wrapper+0x24>)
	bx r1
    2f0c:	4708      	bx	r1
    2f0e:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    2f10:	00009598 	.word	0x00009598
	ldr r1, =z_arm_int_exit
    2f14:	00002f19 	.word	0x00002f19

00002f18 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2f18:	4b04      	ldr	r3, [pc, #16]	; (2f2c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2f1a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2f1c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2f1e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2f20:	d003      	beq.n	2f2a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2f22:	4903      	ldr	r1, [pc, #12]	; (2f30 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2f28:	600a      	str	r2, [r1, #0]

00002f2a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2f2a:	4770      	bx	lr
	ldr r3, =_kernel
    2f2c:	2000e6c0 	.word	0x2000e6c0
	ldr r1, =_SCS_ICSR
    2f30:	e000ed04 	.word	0xe000ed04

00002f34 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    2f34:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2f36:	4c21      	ldr	r4, [pc, #132]	; (2fbc <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    2f38:	2145      	movs	r1, #69	; 0x45
    2f3a:	4821      	ldr	r0, [pc, #132]	; (2fc0 <usage_fault.constprop.0+0x8c>)
    2f3c:	f005 f8ec 	bl	8118 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2f40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2f42:	019d      	lsls	r5, r3, #6
    2f44:	d503      	bpl.n	2f4e <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    2f46:	2145      	movs	r1, #69	; 0x45
    2f48:	481e      	ldr	r0, [pc, #120]	; (2fc4 <usage_fault.constprop.0+0x90>)
    2f4a:	f005 f8e5 	bl	8118 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2f4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2f50:	01dc      	lsls	r4, r3, #7
    2f52:	d503      	bpl.n	2f5c <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    2f54:	2145      	movs	r1, #69	; 0x45
    2f56:	481c      	ldr	r0, [pc, #112]	; (2fc8 <usage_fault.constprop.0+0x94>)
    2f58:	f005 f8de 	bl	8118 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    2f5c:	4d17      	ldr	r5, [pc, #92]	; (2fbc <usage_fault.constprop.0+0x88>)
    2f5e:	6aac      	ldr	r4, [r5, #40]	; 0x28
    2f60:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    2f64:	d004      	beq.n	2f70 <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    2f66:	2145      	movs	r1, #69	; 0x45
    2f68:	4818      	ldr	r0, [pc, #96]	; (2fcc <usage_fault.constprop.0+0x98>)
    2f6a:	f005 f8d5 	bl	8118 <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    2f6e:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2f70:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2f72:	0318      	lsls	r0, r3, #12
    2f74:	d503      	bpl.n	2f7e <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    2f76:	2145      	movs	r1, #69	; 0x45
    2f78:	4815      	ldr	r0, [pc, #84]	; (2fd0 <usage_fault.constprop.0+0x9c>)
    2f7a:	f005 f8cd 	bl	8118 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2f7e:	4d0f      	ldr	r5, [pc, #60]	; (2fbc <usage_fault.constprop.0+0x88>)
    2f80:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2f82:	0359      	lsls	r1, r3, #13
    2f84:	d503      	bpl.n	2f8e <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    2f86:	2145      	movs	r1, #69	; 0x45
    2f88:	4812      	ldr	r0, [pc, #72]	; (2fd4 <usage_fault.constprop.0+0xa0>)
    2f8a:	f005 f8c5 	bl	8118 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2f8e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2f90:	039a      	lsls	r2, r3, #14
    2f92:	d503      	bpl.n	2f9c <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2f94:	2145      	movs	r1, #69	; 0x45
    2f96:	4810      	ldr	r0, [pc, #64]	; (2fd8 <usage_fault.constprop.0+0xa4>)
    2f98:	f005 f8be 	bl	8118 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2f9c:	4d07      	ldr	r5, [pc, #28]	; (2fbc <usage_fault.constprop.0+0x88>)
    2f9e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2fa0:	03db      	lsls	r3, r3, #15
    2fa2:	d503      	bpl.n	2fac <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2fa4:	2145      	movs	r1, #69	; 0x45
    2fa6:	480d      	ldr	r0, [pc, #52]	; (2fdc <usage_fault.constprop.0+0xa8>)
    2fa8:	f005 f8b6 	bl	8118 <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2fac:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    2fae:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2fb0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2fb4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    2fb8:	62ab      	str	r3, [r5, #40]	; 0x28
}
    2fba:	bd38      	pop	{r3, r4, r5, pc}
    2fbc:	e000ed00 	.word	0xe000ed00
    2fc0:	0000a469 	.word	0x0000a469
    2fc4:	0000a486 	.word	0x0000a486
    2fc8:	0000a49e 	.word	0x0000a49e
    2fcc:	0000a4bd 	.word	0x0000a4bd
    2fd0:	0000a4ec 	.word	0x0000a4ec
    2fd4:	0000a50f 	.word	0x0000a50f
    2fd8:	0000a539 	.word	0x0000a539
    2fdc:	0000a558 	.word	0x0000a558

00002fe0 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2fe0:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2fe2:	4c23      	ldr	r4, [pc, #140]	; (3070 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2fe4:	4606      	mov	r6, r0
    2fe6:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    2fe8:	4822      	ldr	r0, [pc, #136]	; (3074 <bus_fault.constprop.0+0x94>)
    2fea:	2145      	movs	r1, #69	; 0x45
    2fec:	f005 f894 	bl	8118 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2ff0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2ff2:	04d9      	lsls	r1, r3, #19
    2ff4:	d503      	bpl.n	2ffe <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    2ff6:	2145      	movs	r1, #69	; 0x45
    2ff8:	481f      	ldr	r0, [pc, #124]	; (3078 <bus_fault.constprop.0+0x98>)
    2ffa:	f005 f88d 	bl	8118 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2ffe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3000:	051a      	lsls	r2, r3, #20
    3002:	d503      	bpl.n	300c <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    3004:	2145      	movs	r1, #69	; 0x45
    3006:	481d      	ldr	r0, [pc, #116]	; (307c <bus_fault.constprop.0+0x9c>)
    3008:	f005 f886 	bl	8118 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    300c:	4c18      	ldr	r4, [pc, #96]	; (3070 <bus_fault.constprop.0+0x90>)
    300e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3010:	059b      	lsls	r3, r3, #22
    3012:	d510      	bpl.n	3036 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    3014:	481a      	ldr	r0, [pc, #104]	; (3080 <bus_fault.constprop.0+0xa0>)
    3016:	2145      	movs	r1, #69	; 0x45
    3018:	f005 f87e 	bl	8118 <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
    301c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    301e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3020:	0418      	lsls	r0, r3, #16
    3022:	d508      	bpl.n	3036 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3024:	2145      	movs	r1, #69	; 0x45
    3026:	4817      	ldr	r0, [pc, #92]	; (3084 <bus_fault.constprop.0+0xa4>)
    3028:	f005 f876 	bl	8118 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    302c:	b11e      	cbz	r6, 3036 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    302e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3030:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3034:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3036:	4c0e      	ldr	r4, [pc, #56]	; (3070 <bus_fault.constprop.0+0x90>)
    3038:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    303a:	0559      	lsls	r1, r3, #21
    303c:	d503      	bpl.n	3046 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    303e:	2145      	movs	r1, #69	; 0x45
    3040:	4811      	ldr	r0, [pc, #68]	; (3088 <bus_fault.constprop.0+0xa8>)
    3042:	f005 f869 	bl	8118 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3046:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3048:	05da      	lsls	r2, r3, #23
    304a:	d50b      	bpl.n	3064 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    304c:	2145      	movs	r1, #69	; 0x45
    304e:	480f      	ldr	r0, [pc, #60]	; (308c <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3050:	f005 f862 	bl	8118 <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
    3054:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3056:	4a06      	ldr	r2, [pc, #24]	; (3070 <bus_fault.constprop.0+0x90>)
    3058:	6a93      	ldr	r3, [r2, #40]	; 0x28
    305a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    305e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3060:	7028      	strb	r0, [r5, #0]
}
    3062:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3064:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3066:	049b      	lsls	r3, r3, #18
    3068:	d5f4      	bpl.n	3054 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    306a:	2145      	movs	r1, #69	; 0x45
    306c:	4808      	ldr	r0, [pc, #32]	; (3090 <bus_fault.constprop.0+0xb0>)
    306e:	e7ef      	b.n	3050 <bus_fault.constprop.0+0x70>
    3070:	e000ed00 	.word	0xe000ed00
    3074:	0000a588 	.word	0x0000a588
    3078:	0000a5a3 	.word	0x0000a5a3
    307c:	0000a5b9 	.word	0x0000a5b9
    3080:	0000a5d1 	.word	0x0000a5d1
    3084:	0000a5ef 	.word	0x0000a5ef
    3088:	0000a609 	.word	0x0000a609
    308c:	0000a629 	.word	0x0000a629
    3090:	0000a646 	.word	0x0000a646

00003094 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    3094:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3096:	4c26      	ldr	r4, [pc, #152]	; (3130 <mem_manage_fault.constprop.0+0x9c>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    3098:	4606      	mov	r6, r0
    309a:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    309c:	4825      	ldr	r0, [pc, #148]	; (3134 <mem_manage_fault.constprop.0+0xa0>)
    309e:	2145      	movs	r1, #69	; 0x45
    30a0:	f005 f83a 	bl	8118 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    30a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    30a6:	06d8      	lsls	r0, r3, #27
    30a8:	d503      	bpl.n	30b2 <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    30aa:	2145      	movs	r1, #69	; 0x45
    30ac:	4822      	ldr	r0, [pc, #136]	; (3138 <mem_manage_fault.constprop.0+0xa4>)
    30ae:	f005 f833 	bl	8118 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    30b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    30b4:	0719      	lsls	r1, r3, #28
    30b6:	d503      	bpl.n	30c0 <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    30b8:	2145      	movs	r1, #69	; 0x45
    30ba:	4820      	ldr	r0, [pc, #128]	; (313c <mem_manage_fault.constprop.0+0xa8>)
    30bc:	f005 f82c 	bl	8118 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    30c0:	4c1b      	ldr	r4, [pc, #108]	; (3130 <mem_manage_fault.constprop.0+0x9c>)
    30c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    30c4:	079a      	lsls	r2, r3, #30
    30c6:	d510      	bpl.n	30ea <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    30c8:	2145      	movs	r1, #69	; 0x45
    30ca:	481d      	ldr	r0, [pc, #116]	; (3140 <mem_manage_fault.constprop.0+0xac>)
    30cc:	f005 f824 	bl	8118 <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
    30d0:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    30d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    30d4:	061b      	lsls	r3, r3, #24
    30d6:	d508      	bpl.n	30ea <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    30d8:	2145      	movs	r1, #69	; 0x45
    30da:	481a      	ldr	r0, [pc, #104]	; (3144 <mem_manage_fault.constprop.0+0xb0>)
    30dc:	f005 f81c 	bl	8118 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    30e0:	b11e      	cbz	r6, 30ea <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    30e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    30e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    30e8:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    30ea:	4c11      	ldr	r4, [pc, #68]	; (3130 <mem_manage_fault.constprop.0+0x9c>)
    30ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    30ee:	07de      	lsls	r6, r3, #31
    30f0:	d503      	bpl.n	30fa <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    30f2:	2145      	movs	r1, #69	; 0x45
    30f4:	4814      	ldr	r0, [pc, #80]	; (3148 <mem_manage_fault.constprop.0+0xb4>)
    30f6:	f005 f80f 	bl	8118 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    30fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    30fc:	0698      	lsls	r0, r3, #26
    30fe:	d503      	bpl.n	3108 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
    3100:	2145      	movs	r1, #69	; 0x45
    3102:	4812      	ldr	r0, [pc, #72]	; (314c <mem_manage_fault.constprop.0+0xb8>)
    3104:	f005 f808 	bl	8118 <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
    3108:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    310a:	4b09      	ldr	r3, [pc, #36]	; (3130 <mem_manage_fault.constprop.0+0x9c>)
    310c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    310e:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3110:	bf58      	it	pl
    3112:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3114:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3116:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    3118:	bf42      	ittt	mi
    311a:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    311c:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    3120:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3122:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3124:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    3128:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    312a:	7028      	strb	r0, [r5, #0]
}
    312c:	bd70      	pop	{r4, r5, r6, pc}
    312e:	bf00      	nop
    3130:	e000ed00 	.word	0xe000ed00
    3134:	0000a67a 	.word	0x0000a67a
    3138:	0000a695 	.word	0x0000a695
    313c:	0000a5b9 	.word	0x0000a5b9
    3140:	0000a6cd 	.word	0x0000a6cd
    3144:	0000a6ea 	.word	0x0000a6ea
    3148:	0000a705 	.word	0x0000a705
    314c:	0000a646 	.word	0x0000a646

00003150 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3154:	4b5c      	ldr	r3, [pc, #368]	; (32c8 <z_arm_fault+0x178>)
{
    3156:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3158:	685f      	ldr	r7, [r3, #4]
    315a:	2600      	movs	r6, #0
{
    315c:	b09c      	sub	sp, #112	; 0x70
    315e:	f3c7 0408 	ubfx	r4, r7, #0, #9
    3162:	f386 8811 	msr	BASEPRI, r6
    3166:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    316a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    316e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    3172:	d107      	bne.n	3184 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3174:	f002 030c 	and.w	r3, r2, #12
    3178:	2b08      	cmp	r3, #8
    317a:	d114      	bne.n	31a6 <z_arm_fault+0x56>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    317c:	2145      	movs	r1, #69	; 0x45
    317e:	4853      	ldr	r0, [pc, #332]	; (32cc <z_arm_fault+0x17c>)
    3180:	f004 ffca 	bl	8118 <z_log_minimal_printk>
	*nested_exc = false;
    3184:	2600      	movs	r6, #0
		return NULL;
    3186:	4635      	mov	r5, r6
	*recoverable = false;
    3188:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    318c:	1ee3      	subs	r3, r4, #3
	*recoverable = false;
    318e:	f88d 8007 	strb.w	r8, [sp, #7]
	switch (fault) {
    3192:	2b09      	cmp	r3, #9
    3194:	f200 8086 	bhi.w	32a4 <z_arm_fault+0x154>
    3198:	e8df f003 	tbb	[pc, r3]
    319c:	757d790a 	.word	0x757d790a
    31a0:	84848484 	.word	0x84848484
    31a4:	8184      	.short	0x8184
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    31a6:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    31a8:	bf4c      	ite	mi
    31aa:	460d      	movmi	r5, r1
			*nested_exc = true;
    31ac:	2601      	movpl	r6, #1
    31ae:	e7eb      	b.n	3188 <z_arm_fault+0x38>
	PR_FAULT_INFO("***** HARD FAULT *****");
    31b0:	2145      	movs	r1, #69	; 0x45
    31b2:	4847      	ldr	r0, [pc, #284]	; (32d0 <z_arm_fault+0x180>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    31b4:	4c44      	ldr	r4, [pc, #272]	; (32c8 <z_arm_fault+0x178>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    31b6:	f004 ffaf 	bl	8118 <z_log_minimal_printk>
	*recoverable = false;
    31ba:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    31be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    31c0:	079a      	lsls	r2, r3, #30
    31c2:	d505      	bpl.n	31d0 <z_arm_fault+0x80>
		PR_EXC("  Bus fault on vector table read");
    31c4:	2145      	movs	r1, #69	; 0x45
    31c6:	4843      	ldr	r0, [pc, #268]	; (32d4 <z_arm_fault+0x184>)
	PR_FAULT_INFO(
    31c8:	f004 ffa6 	bl	8118 <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    31cc:	2400      	movs	r4, #0
    31ce:	e032      	b.n	3236 <z_arm_fault+0xe6>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    31d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    31d2:	2b00      	cmp	r3, #0
    31d4:	da02      	bge.n	31dc <z_arm_fault+0x8c>
		PR_EXC("  Debug event");
    31d6:	2145      	movs	r1, #69	; 0x45
    31d8:	483f      	ldr	r0, [pc, #252]	; (32d8 <z_arm_fault+0x188>)
    31da:	e7f5      	b.n	31c8 <z_arm_fault+0x78>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    31dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    31de:	005b      	lsls	r3, r3, #1
    31e0:	d5f4      	bpl.n	31cc <z_arm_fault+0x7c>
		PR_EXC("  Fault escalation (see below)");
    31e2:	2145      	movs	r1, #69	; 0x45
    31e4:	483d      	ldr	r0, [pc, #244]	; (32dc <z_arm_fault+0x18c>)
    31e6:	f004 ff97 	bl	8118 <z_log_minimal_printk>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    31ea:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    31ec:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    31ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    31f2:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    31f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    31f8:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    31fc:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    31fe:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    3202:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3206:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    3208:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    320c:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3210:	f64d 7302 	movw	r3, #57090	; 0xdf02
    3214:	429a      	cmp	r2, r3
    3216:	d008      	beq.n	322a <z_arm_fault+0xda>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    3218:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    321a:	b2db      	uxtb	r3, r3
    321c:	b32b      	cbz	r3, 326a <z_arm_fault+0x11a>
			reason = mem_manage_fault(esf, 1, recoverable);
    321e:	2001      	movs	r0, #1
    3220:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    3224:	f7ff ff36 	bl	3094 <mem_manage_fault.constprop.0>
    3228:	e02f      	b.n	328a <z_arm_fault+0x13a>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    322a:	2145      	movs	r1, #69	; 0x45
    322c:	682a      	ldr	r2, [r5, #0]
    322e:	482c      	ldr	r0, [pc, #176]	; (32e0 <z_arm_fault+0x190>)
    3230:	f004 ff72 	bl	8118 <z_log_minimal_printk>
			reason = esf->basic.r0;
    3234:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3236:	f89d 3007 	ldrb.w	r3, [sp, #7]
    323a:	b99b      	cbnz	r3, 3264 <z_arm_fault+0x114>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    323c:	2268      	movs	r2, #104	; 0x68
    323e:	4629      	mov	r1, r5
    3240:	a802      	add	r0, sp, #8
    3242:	f005 fadd 	bl	8800 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3246:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3248:	2e00      	cmp	r6, #0
    324a:	d038      	beq.n	32be <z_arm_fault+0x16e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    324c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    3250:	b922      	cbnz	r2, 325c <z_arm_fault+0x10c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3252:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3256:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    325a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    325c:	4620      	mov	r0, r4
    325e:	a902      	add	r1, sp, #8
    3260:	f7ff fcc6 	bl	2bf0 <z_arm_fatal_error>
}
    3264:	b01c      	add	sp, #112	; 0x70
    3266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    326a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    326c:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    3270:	d005      	beq.n	327e <z_arm_fault+0x12e>
			reason = bus_fault(esf, 1, recoverable);
    3272:	2001      	movs	r0, #1
    3274:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    3278:	f7ff feb2 	bl	2fe0 <bus_fault.constprop.0>
    327c:	e005      	b.n	328a <z_arm_fault+0x13a>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    327e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    3284:	d3a2      	bcc.n	31cc <z_arm_fault+0x7c>
			reason = usage_fault(esf);
    3286:	f7ff fe55 	bl	2f34 <usage_fault.constprop.0>
    328a:	4604      	mov	r4, r0
    328c:	e7d3      	b.n	3236 <z_arm_fault+0xe6>
		reason = mem_manage_fault(esf, 0, recoverable);
    328e:	2000      	movs	r0, #0
    3290:	f10d 0107 	add.w	r1, sp, #7
    3294:	e7c6      	b.n	3224 <z_arm_fault+0xd4>
		reason = bus_fault(esf, 0, recoverable);
    3296:	2000      	movs	r0, #0
    3298:	f10d 0107 	add.w	r1, sp, #7
    329c:	e7ec      	b.n	3278 <z_arm_fault+0x128>
	PR_FAULT_INFO(
    329e:	2145      	movs	r1, #69	; 0x45
    32a0:	4810      	ldr	r0, [pc, #64]	; (32e4 <z_arm_fault+0x194>)
    32a2:	e791      	b.n	31c8 <z_arm_fault+0x78>
	PR_FAULT_INFO("***** %s %d) *****",
    32a4:	4910      	ldr	r1, [pc, #64]	; (32e8 <z_arm_fault+0x198>)
    32a6:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    32aa:	4a10      	ldr	r2, [pc, #64]	; (32ec <z_arm_fault+0x19c>)
    32ac:	4810      	ldr	r0, [pc, #64]	; (32f0 <z_arm_fault+0x1a0>)
    32ae:	bf08      	it	eq
    32b0:	460a      	moveq	r2, r1
    32b2:	f1a4 0310 	sub.w	r3, r4, #16
    32b6:	2145      	movs	r1, #69	; 0x45
    32b8:	f004 ff2e 	bl	8118 <z_log_minimal_printk>
}
    32bc:	e786      	b.n	31cc <z_arm_fault+0x7c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    32be:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    32c2:	f023 0301 	bic.w	r3, r3, #1
    32c6:	e7c8      	b.n	325a <z_arm_fault+0x10a>
    32c8:	e000ed00 	.word	0xe000ed00
    32cc:	0000a757 	.word	0x0000a757
    32d0:	0000a787 	.word	0x0000a787
    32d4:	0000a7a3 	.word	0x0000a7a3
    32d8:	0000a7c9 	.word	0x0000a7c9
    32dc:	0000a7dc 	.word	0x0000a7dc
    32e0:	0000a800 	.word	0x0000a800
    32e4:	0000a821 	.word	0x0000a821
    32e8:	0000a729 	.word	0x0000a729
    32ec:	0000a73e 	.word	0x0000a73e
    32f0:	0000a84a 	.word	0x0000a84a

000032f4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    32f4:	4b04      	ldr	r3, [pc, #16]	; (3308 <z_arm_fault_init+0x14>)
    32f6:	695a      	ldr	r2, [r3, #20]
    32f8:	f042 0210 	orr.w	r2, r2, #16
    32fc:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    32fe:	695a      	ldr	r2, [r3, #20]
    3300:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    3304:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    3306:	4770      	bx	lr
    3308:	e000ed00 	.word	0xe000ed00

0000330c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    330c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3310:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3314:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    3316:	4672      	mov	r2, lr
	bl z_arm_fault
    3318:	f7ff ff1a 	bl	3150 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    331c:	bd01      	pop	{r0, pc}
    331e:	bf00      	nop

00003320 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3320:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3322:	2120      	movs	r1, #32
    3324:	4803      	ldr	r0, [pc, #12]	; (3334 <z_arm_interrupt_init+0x14>)
    3326:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3328:	3301      	adds	r3, #1
    332a:	2b41      	cmp	r3, #65	; 0x41
    332c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3330:	d1f9      	bne.n	3326 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    3332:	4770      	bx	lr
    3334:	e000e100 	.word	0xe000e100

00003338 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    3338:	2000      	movs	r0, #0
    msr CONTROL, r0
    333a:	f380 8814 	msr	CONTROL, r0
    isb
    333e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    3342:	2000      	movs	r0, #0
    msr MSPLIM, r0
    3344:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    3348:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    334c:	f7fe fd5c 	bl	1e08 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    3350:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    3352:	490e      	ldr	r1, [pc, #56]	; (338c <__start+0x54>)
    str r0, [r1]
    3354:	6008      	str	r0, [r1, #0]
    dsb
    3356:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    335a:	480d      	ldr	r0, [pc, #52]	; (3390 <__start+0x58>)
    msr msp, r0
    335c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    3360:	f000 f83e 	bl	33e0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3364:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3366:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    336a:	480a      	ldr	r0, [pc, #40]	; (3394 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    336c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    3370:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3372:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3376:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    337a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    337c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    337e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3382:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3386:	f7ff fccf 	bl	2d28 <z_arm_prep_c>
    338a:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    338c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3390:	200123c0 	.word	0x200123c0
    ldr r0, =z_interrupt_stacks
    3394:	2000f280 	.word	0x2000f280

00003398 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    3398:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    339c:	4905      	ldr	r1, [pc, #20]	; (33b4 <sys_arch_reboot+0x1c>)
    339e:	4b06      	ldr	r3, [pc, #24]	; (33b8 <sys_arch_reboot+0x20>)
    33a0:	68ca      	ldr	r2, [r1, #12]
    33a2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    33a6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    33a8:	60cb      	str	r3, [r1, #12]
    33aa:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    33ae:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    33b0:	e7fd      	b.n	33ae <sys_arch_reboot+0x16>
    33b2:	bf00      	nop
    33b4:	e000ed00 	.word	0xe000ed00
    33b8:	05fa0004 	.word	0x05fa0004

000033bc <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    33bc:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    33be:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    33c0:	4906      	ldr	r1, [pc, #24]	; (33dc <z_arm_clear_arm_mpu_config+0x20>)
    33c2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    33c6:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    33ca:	4293      	cmp	r3, r2
    33cc:	db00      	blt.n	33d0 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    33ce:	4770      	bx	lr
  mpu->RNR = rnr;
    33d0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    33d4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    33d8:	3301      	adds	r3, #1
    33da:	e7f6      	b.n	33ca <z_arm_clear_arm_mpu_config+0xe>
    33dc:	e000ed00 	.word	0xe000ed00

000033e0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    33e0:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    33e2:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    33e4:	2400      	movs	r4, #0
    33e6:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    33ea:	f7ff ffe7 	bl	33bc <z_arm_clear_arm_mpu_config>
    33ee:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    33f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    33f4:	4a0c      	ldr	r2, [pc, #48]	; (3428 <z_arm_init_arch_hw_at_boot+0x48>)
    33f6:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    33fa:	3301      	adds	r3, #1
    33fc:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    33fe:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    3402:	d1f8      	bne.n	33f6 <z_arm_init_arch_hw_at_boot+0x16>
    3404:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3406:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    340a:	4a07      	ldr	r2, [pc, #28]	; (3428 <z_arm_init_arch_hw_at_boot+0x48>)
    340c:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    3410:	3301      	adds	r3, #1
    3412:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3414:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    3418:	d1f8      	bne.n	340c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    341a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    341c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3420:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3424:	bd10      	pop	{r4, pc}
    3426:	bf00      	nop
    3428:	e000e100 	.word	0xe000e100

0000342c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    342c:	4b08      	ldr	r3, [pc, #32]	; (3450 <z_impl_k_thread_abort+0x24>)
    342e:	689b      	ldr	r3, [r3, #8]
    3430:	4283      	cmp	r3, r0
    3432:	d10b      	bne.n	344c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3434:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3438:	b143      	cbz	r3, 344c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    343a:	4b06      	ldr	r3, [pc, #24]	; (3454 <z_impl_k_thread_abort+0x28>)
    343c:	685a      	ldr	r2, [r3, #4]
    343e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    3442:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    3444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3446:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    344a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    344c:	f002 bbbc 	b.w	5bc8 <z_thread_abort>
    3450:	2000e6c0 	.word	0x2000e6c0
    3454:	e000ed00 	.word	0xe000ed00

00003458 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
    3458:	b40c      	push	{r2, r3}
    345a:	b510      	push	{r4, lr}
    345c:	b086      	sub	sp, #24

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    345e:	b909      	cbnz	r1, 3464 <snprintf+0xc>
		str = &dummy; /* write final NUL to dummy, can't change *s */
    3460:	f10d 000b 	add.w	r0, sp, #11
    3464:	2400      	movs	r4, #0
	}

	p.ptr = str;
	p.len = (int) len;
    3466:	e9cd 0104 	strd	r0, r1, [sp, #16]

	va_start(vargs, format);
    346a:	ab09      	add	r3, sp, #36	; 0x24
    346c:	9a08      	ldr	r2, [sp, #32]
    346e:	9400      	str	r4, [sp, #0]
    3470:	a904      	add	r1, sp, #16
    3472:	4805      	ldr	r0, [pc, #20]	; (3488 <snprintf+0x30>)
    3474:	9303      	str	r3, [sp, #12]
    3476:	f7fe fa75 	bl	1964 <z_cbvprintf_impl>
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
	va_end(vargs);

	*(p.ptr) = 0;
    347a:	9b04      	ldr	r3, [sp, #16]
    347c:	701c      	strb	r4, [r3, #0]
	return r;
}
    347e:	b006      	add	sp, #24
    3480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3484:	b002      	add	sp, #8
    3486:	4770      	bx	lr
    3488:	00008829 	.word	0x00008829

0000348c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    348c:	4b08      	ldr	r3, [pc, #32]	; (34b0 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    348e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3490:	1ac3      	subs	r3, r0, r3
{
    3492:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3494:	4907      	ldr	r1, [pc, #28]	; (34b4 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    3496:	109b      	asrs	r3, r3, #2
{
    3498:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    349a:	4359      	muls	r1, r3
    349c:	2240      	movs	r2, #64	; 0x40
    349e:	4806      	ldr	r0, [pc, #24]	; (34b8 <onoff_stop+0x2c>)
    34a0:	f005 f9eb 	bl	887a <stop>
	notify(mgr, res);
    34a4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    34a6:	4601      	mov	r1, r0
	notify(mgr, res);
    34a8:	4620      	mov	r0, r4
}
    34aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    34ae:	4718      	bx	r3
    34b0:	2000e630 	.word	0x2000e630
    34b4:	b6db6db7 	.word	0xb6db6db7
    34b8:	00009520 	.word	0x00009520

000034bc <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    34bc:	2340      	movs	r3, #64	; 0x40
{
    34be:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    34c0:	4c0b      	ldr	r4, [pc, #44]	; (34f0 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    34c2:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    34c4:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    34c6:	460b      	mov	r3, r1
{
    34c8:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    34ca:	490a      	ldr	r1, [pc, #40]	; (34f4 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    34cc:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    34ce:	4361      	muls	r1, r4
{
    34d0:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    34d2:	4a09      	ldr	r2, [pc, #36]	; (34f8 <onoff_start+0x3c>)
    34d4:	4809      	ldr	r0, [pc, #36]	; (34fc <onoff_start+0x40>)
    34d6:	f005 f9fc 	bl	88d2 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    34da:	1e01      	subs	r1, r0, #0
    34dc:	da05      	bge.n	34ea <onoff_start+0x2e>
		notify(mgr, err);
    34de:	4630      	mov	r0, r6
    34e0:	462b      	mov	r3, r5
	}
}
    34e2:	b002      	add	sp, #8
    34e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    34e8:	4718      	bx	r3
}
    34ea:	b002      	add	sp, #8
    34ec:	bd70      	pop	{r4, r5, r6, pc}
    34ee:	bf00      	nop
    34f0:	2000e630 	.word	0x2000e630
    34f4:	b6db6db7 	.word	0xb6db6db7
    34f8:	0000893d 	.word	0x0000893d
    34fc:	00009520 	.word	0x00009520

00003500 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    3500:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3502:	2200      	movs	r2, #0
    3504:	2101      	movs	r1, #1
{
    3506:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3508:	2005      	movs	r0, #5
    350a:	f7ff fbf3 	bl	2cf4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    350e:	480f      	ldr	r0, [pc, #60]	; (354c <clk_init+0x4c>)
    3510:	f001 f9a6 	bl	4860 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    3514:	4b0e      	ldr	r3, [pc, #56]	; (3550 <clk_init+0x50>)
    3516:	4298      	cmp	r0, r3
    3518:	d115      	bne.n	3546 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    351a:	f005 fde9 	bl	90f0 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    351e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    3520:	490c      	ldr	r1, [pc, #48]	; (3554 <clk_init+0x54>)
    3522:	4630      	mov	r0, r6
    3524:	f004 fd43 	bl	7fae <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    3528:	2800      	cmp	r0, #0
    352a:	db0b      	blt.n	3544 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    352c:	2501      	movs	r5, #1
    352e:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    3530:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    3532:	4908      	ldr	r1, [pc, #32]	; (3554 <clk_init+0x54>)
    3534:	f104 001c 	add.w	r0, r4, #28
    3538:	f004 fd39 	bl	7fae <onoff_manager_init>
		if (err < 0) {
    353c:	2800      	cmp	r0, #0
    353e:	db01      	blt.n	3544 <clk_init+0x44>
	}

	return 0;
    3540:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3542:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    3544:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3546:	f06f 0004 	mvn.w	r0, #4
    354a:	e7fb      	b.n	3544 <clk_init+0x44>
    354c:	0000358d 	.word	0x0000358d
    3550:	0bad0000 	.word	0x0bad0000
    3554:	00009930 	.word	0x00009930

00003558 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    3558:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    355a:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    355c:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
    355e:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    3560:	434b      	muls	r3, r1
    3562:	4808      	ldr	r0, [pc, #32]	; (3584 <clkstarted_handle.constprop.0+0x2c>)
    3564:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    3566:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
    3568:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    356c:	4418      	add	r0, r3
	sub_data->cb = NULL;
    356e:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    3570:	f005 f970 	bl	8854 <set_on_state>
	if (callback) {
    3574:	b12d      	cbz	r5, 3582 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    3576:	4632      	mov	r2, r6
    3578:	462b      	mov	r3, r5
}
    357a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    357e:	4802      	ldr	r0, [pc, #8]	; (3588 <clkstarted_handle.constprop.0+0x30>)
    3580:	4718      	bx	r3
}
    3582:	bd70      	pop	{r4, r5, r6, pc}
    3584:	2000e630 	.word	0x2000e630
    3588:	00009520 	.word	0x00009520

0000358c <clock_event_handler>:
	switch (event) {
    358c:	b110      	cbz	r0, 3594 <clock_event_handler+0x8>
    358e:	2801      	cmp	r0, #1
    3590:	d004      	beq.n	359c <clock_event_handler+0x10>
    3592:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3594:	4b03      	ldr	r3, [pc, #12]	; (35a4 <clock_event_handler+0x18>)
    3596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3598:	075b      	lsls	r3, r3, #29
    359a:	d101      	bne.n	35a0 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    359c:	f7ff bfdc 	b.w	3558 <clkstarted_handle.constprop.0>
}
    35a0:	4770      	bx	lr
    35a2:	bf00      	nop
    35a4:	2000e630 	.word	0x2000e630

000035a8 <generic_hfclk_start>:
{
    35a8:	b508      	push	{r3, lr}
	__asm__ volatile(
    35aa:	f04f 0320 	mov.w	r3, #32
    35ae:	f3ef 8111 	mrs	r1, BASEPRI
    35b2:	f383 8812 	msr	BASEPRI_MAX, r3
    35b6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    35ba:	4a12      	ldr	r2, [pc, #72]	; (3604 <generic_hfclk_start+0x5c>)
    35bc:	6813      	ldr	r3, [r2, #0]
    35be:	f043 0002 	orr.w	r0, r3, #2
    35c2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    35c4:	07da      	lsls	r2, r3, #31
    35c6:	d408      	bmi.n	35da <generic_hfclk_start+0x32>
	__asm__ volatile(
    35c8:	f381 8811 	msr	BASEPRI, r1
    35cc:	f3bf 8f6f 	isb	sy
}
    35d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    35d4:	2001      	movs	r0, #1
    35d6:	f005 bd99 	b.w	910c <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    35da:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    35de:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    35e2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    35e6:	07d3      	lsls	r3, r2, #31
    35e8:	d5ee      	bpl.n	35c8 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    35ea:	4807      	ldr	r0, [pc, #28]	; (3608 <generic_hfclk_start+0x60>)
    35ec:	f005 f932 	bl	8854 <set_on_state>
    35f0:	f381 8811 	msr	BASEPRI, r1
    35f4:	f3bf 8f6f 	isb	sy
}
    35f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    35fc:	2000      	movs	r0, #0
    35fe:	f7ff bfab 	b.w	3558 <clkstarted_handle.constprop.0>
    3602:	bf00      	nop
    3604:	2000e680 	.word	0x2000e680
    3608:	2000e670 	.word	0x2000e670

0000360c <api_blocking_start>:
{
    360c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    360e:	2200      	movs	r2, #0
    3610:	2301      	movs	r3, #1
    3612:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3616:	466b      	mov	r3, sp
    3618:	4a08      	ldr	r2, [pc, #32]	; (363c <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    361a:	f8cd d000 	str.w	sp, [sp]
    361e:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3622:	f005 f984 	bl	892e <api_start>
	if (err < 0) {
    3626:	2800      	cmp	r0, #0
    3628:	db05      	blt.n	3636 <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    362a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    362e:	2300      	movs	r3, #0
    3630:	4668      	mov	r0, sp
    3632:	f001 ffb9 	bl	55a8 <z_impl_k_sem_take>
}
    3636:	b005      	add	sp, #20
    3638:	f85d fb04 	ldr.w	pc, [sp], #4
    363c:	0000895d 	.word	0x0000895d

00003640 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3640:	4b07      	ldr	r3, [pc, #28]	; (3660 <generic_hfclk_stop+0x20>)
    3642:	e8d3 2fef 	ldaex	r2, [r3]
    3646:	f022 0102 	bic.w	r1, r2, #2
    364a:	e8c3 1fe0 	stlex	r0, r1, [r3]
    364e:	2800      	cmp	r0, #0
    3650:	d1f7      	bne.n	3642 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    3652:	07d3      	lsls	r3, r2, #31
    3654:	d402      	bmi.n	365c <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    3656:	2001      	movs	r0, #1
    3658:	f005 bd98 	b.w	918c <nrfx_clock_stop>
}
    365c:	4770      	bx	lr
    365e:	bf00      	nop
    3660:	2000e680 	.word	0x2000e680

00003664 <z_nrf_clock_control_lf_on>:
{
    3664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3668:	2201      	movs	r2, #1
    366a:	4607      	mov	r7, r0
    366c:	4937      	ldr	r1, [pc, #220]	; (374c <z_nrf_clock_control_lf_on+0xe8>)
    366e:	e8d1 3fef 	ldaex	r3, [r1]
    3672:	e8c1 2fe0 	stlex	r0, r2, [r1]
    3676:	2800      	cmp	r0, #0
    3678:	d1f9      	bne.n	366e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    367a:	b933      	cbnz	r3, 368a <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    367c:	4934      	ldr	r1, [pc, #208]	; (3750 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    367e:	4835      	ldr	r0, [pc, #212]	; (3754 <z_nrf_clock_control_lf_on+0xf0>)
    3680:	604b      	str	r3, [r1, #4]
    3682:	60cb      	str	r3, [r1, #12]
    3684:	608a      	str	r2, [r1, #8]
    3686:	f004 fca5 	bl	7fd4 <onoff_request>
	switch (start_mode) {
    368a:	1e7b      	subs	r3, r7, #1
    368c:	2b01      	cmp	r3, #1
    368e:	d82b      	bhi.n	36e8 <z_nrf_clock_control_lf_on+0x84>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3690:	2f01      	cmp	r7, #1
    3692:	d107      	bne.n	36a4 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3694:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3698:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    369c:	f003 0303 	and.w	r3, r3, #3
    36a0:	2b02      	cmp	r3, #2
    36a2:	d021      	beq.n	36e8 <z_nrf_clock_control_lf_on+0x84>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    36a4:	f005 fdda 	bl	925c <k_is_in_isr>
    36a8:	4605      	mov	r5, r0
    36aa:	b9f8      	cbnz	r0, 36ec <z_nrf_clock_control_lf_on+0x88>
	return !z_sys_post_kernel;
    36ac:	4b2a      	ldr	r3, [pc, #168]	; (3758 <z_nrf_clock_control_lf_on+0xf4>)
    36ae:	781b      	ldrb	r3, [r3, #0]
    36b0:	b1e3      	cbz	r3, 36ec <z_nrf_clock_control_lf_on+0x88>
    p_reg->INTENCLR = mask;
    36b2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    36b6:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    36b8:	4606      	mov	r6, r0
    36ba:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    36be:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    36c2:	f8df 8098 	ldr.w	r8, [pc, #152]	; 375c <z_nrf_clock_control_lf_on+0xf8>
    36c6:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    36ca:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    36ce:	03d2      	lsls	r2, r2, #15
    36d0:	d516      	bpl.n	3700 <z_nrf_clock_control_lf_on+0x9c>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    36d2:	f003 0303 	and.w	r3, r3, #3
    36d6:	2b02      	cmp	r3, #2
    36d8:	d001      	beq.n	36de <z_nrf_clock_control_lf_on+0x7a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    36da:	2f01      	cmp	r7, #1
    36dc:	d110      	bne.n	3700 <z_nrf_clock_control_lf_on+0x9c>
	if (isr_mode) {
    36de:	b375      	cbz	r5, 373e <z_nrf_clock_control_lf_on+0xda>
    36e0:	f386 8811 	msr	BASEPRI, r6
    36e4:	f3bf 8f6f 	isb	sy
}
    36e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    36ec:	f04f 0320 	mov.w	r3, #32
    36f0:	f3ef 8611 	mrs	r6, BASEPRI
    36f4:	f383 8812 	msr	BASEPRI_MAX, r3
    36f8:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    36fc:	2501      	movs	r5, #1
    36fe:	e7de      	b.n	36be <z_nrf_clock_control_lf_on+0x5a>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    3700:	b1c5      	cbz	r5, 3734 <z_nrf_clock_control_lf_on+0xd0>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    3702:	4630      	mov	r0, r6
    3704:	f7ff fa6a 	bl	2bdc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    3708:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    370c:	b2db      	uxtb	r3, r3
    370e:	2b01      	cmp	r3, #1
    3710:	d1d9      	bne.n	36c6 <z_nrf_clock_control_lf_on+0x62>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3712:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    3716:	2a00      	cmp	r2, #0
    3718:	d0d5      	beq.n	36c6 <z_nrf_clock_control_lf_on+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    371a:	2200      	movs	r2, #0
    371c:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3720:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    3724:	2202      	movs	r2, #2
    3726:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
    372a:	2220      	movs	r2, #32
    372c:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3730:	60a3      	str	r3, [r4, #8]
}
    3732:	e7c8      	b.n	36c6 <z_nrf_clock_control_lf_on+0x62>
	return z_impl_k_sleep(timeout);
    3734:	2100      	movs	r1, #0
    3736:	2021      	movs	r0, #33	; 0x21
    3738:	f002 fa26 	bl	5b88 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    373c:	e7e4      	b.n	3708 <z_nrf_clock_control_lf_on+0xa4>
    p_reg->INTENSET = mask;
    373e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3742:	2202      	movs	r2, #2
    3744:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3748:	e7ce      	b.n	36e8 <z_nrf_clock_control_lf_on+0x84>
    374a:	bf00      	nop
    374c:	2000e62c 	.word	0x2000e62c
    3750:	2000e61c 	.word	0x2000e61c
    3754:	2000e64c 	.word	0x2000e64c
    3758:	2000f27c 	.word	0x2000f27c
    375c:	e000e100 	.word	0xe000e100

00003760 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    3760:	b530      	push	{r4, r5, lr}
	return port->config;
    3762:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3764:	f001 041f 	and.w	r4, r1, #31
    3768:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    376a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    376e:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3770:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    3774:	d105      	bne.n	3782 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    3776:	4620      	mov	r0, r4
    3778:	f001 fb08 	bl	4d8c <nrfx_gpiote_trigger_disable>

		return 0;
    377c:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    377e:	b005      	add	sp, #20
    3780:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    3782:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    3784:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    3788:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    378c:	d114      	bne.n	37b8 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    378e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    3792:	bf0c      	ite	eq
    3794:	2304      	moveq	r3, #4
    3796:	2305      	movne	r3, #5
    3798:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    379c:	2300      	movs	r3, #0
    379e:	4620      	mov	r0, r4
    37a0:	4619      	mov	r1, r3
    37a2:	aa02      	add	r2, sp, #8
    37a4:	f001 f928 	bl	49f8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    37a8:	4b1c      	ldr	r3, [pc, #112]	; (381c <gpio_nrfx_pin_interrupt_configure+0xbc>)
    37aa:	4298      	cmp	r0, r3
    37ac:	d133      	bne.n	3816 <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    37ae:	2101      	movs	r1, #1
    37b0:	4620      	mov	r0, r4
    37b2:	f001 faa7 	bl	4d04 <nrfx_gpiote_trigger_enable>
	return 0;
    37b6:	e7e1      	b.n	377c <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    37b8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    37bc:	d020      	beq.n	3800 <gpio_nrfx_pin_interrupt_configure+0xa0>
    37be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    37c2:	bf14      	ite	ne
    37c4:	2301      	movne	r3, #1
    37c6:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    37c8:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    37cc:	6883      	ldr	r3, [r0, #8]
    37ce:	40cb      	lsrs	r3, r1
    37d0:	07d9      	lsls	r1, r3, #31
    37d2:	d4e3      	bmi.n	379c <gpio_nrfx_pin_interrupt_configure+0x3c>
    37d4:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    37d8:	d1e0      	bne.n	379c <gpio_nrfx_pin_interrupt_configure+0x3c>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    37da:	4a11      	ldr	r2, [pc, #68]	; (3820 <gpio_nrfx_pin_interrupt_configure+0xc0>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    37dc:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    37e0:	3380      	adds	r3, #128	; 0x80
    37e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    37e6:	07db      	lsls	r3, r3, #31
    37e8:	d4d8      	bmi.n	379c <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    37ea:	f10d 0507 	add.w	r5, sp, #7
    37ee:	4629      	mov	r1, r5
    37f0:	4620      	mov	r0, r4
    37f2:	f001 fa33 	bl	4c5c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    37f6:	4b0b      	ldr	r3, [pc, #44]	; (3824 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    37f8:	4298      	cmp	r0, r3
    37fa:	d003      	beq.n	3804 <gpio_nrfx_pin_interrupt_configure+0xa4>
		trigger_config.p_in_channel = &ch;
    37fc:	9503      	str	r5, [sp, #12]
    37fe:	e7cd      	b.n	379c <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    3800:	2303      	movs	r3, #3
    3802:	e7e1      	b.n	37c8 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    3804:	4628      	mov	r0, r5
    3806:	f001 fa77 	bl	4cf8 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    380a:	4b04      	ldr	r3, [pc, #16]	; (381c <gpio_nrfx_pin_interrupt_configure+0xbc>)
    380c:	4298      	cmp	r0, r3
    380e:	d0f5      	beq.n	37fc <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
    3810:	f06f 000b 	mvn.w	r0, #11
    3814:	e7b3      	b.n	377e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    3816:	f06f 0015 	mvn.w	r0, #21
    381a:	e7b0      	b.n	377e <gpio_nrfx_pin_interrupt_configure+0x1e>
    381c:	0bad0000 	.word	0x0bad0000
    3820:	50842500 	.word	0x50842500
    3824:	0bad0004 	.word	0x0bad0004

00003828 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    3828:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    382a:	f001 fa55 	bl	4cd8 <nrfx_gpiote_is_init>
    382e:	4604      	mov	r4, r0
    3830:	b968      	cbnz	r0, 384e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    3832:	f001 fa29 	bl	4c88 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    3836:	4b08      	ldr	r3, [pc, #32]	; (3858 <gpio_nrfx_init+0x30>)
    3838:	4298      	cmp	r0, r3
    383a:	d10a      	bne.n	3852 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    383c:	4621      	mov	r1, r4
    383e:	4807      	ldr	r0, [pc, #28]	; (385c <gpio_nrfx_init+0x34>)
    3840:	f001 fa06 	bl	4c50 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    3844:	4622      	mov	r2, r4
    3846:	2105      	movs	r1, #5
    3848:	200d      	movs	r0, #13
    384a:	f7ff fa53 	bl	2cf4 <z_arm_irq_priority_set>
		return 0;
    384e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    3850:	bd10      	pop	{r4, pc}
		return -EIO;
    3852:	f06f 0004 	mvn.w	r0, #4
    3856:	e7fb      	b.n	3850 <gpio_nrfx_init+0x28>
    3858:	0bad0000 	.word	0x0bad0000
    385c:	00003861 	.word	0x00003861

00003860 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3860:	0943      	lsrs	r3, r0, #5
{
    3862:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3864:	d107      	bne.n	3876 <nrfx_gpio_handler+0x16>
	return list->head;
    3866:	4b0b      	ldr	r3, [pc, #44]	; (3894 <nrfx_gpio_handler+0x34>)
    3868:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    386a:	b121      	cbz	r1, 3876 <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    386c:	2501      	movs	r5, #1
	return node->next;
    386e:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    3870:	4e09      	ldr	r6, [pc, #36]	; (3898 <nrfx_gpio_handler+0x38>)
    3872:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3874:	b901      	cbnz	r1, 3878 <nrfx_gpio_handler+0x18>
}
    3876:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    3878:	688a      	ldr	r2, [r1, #8]
    387a:	402a      	ands	r2, r5
    387c:	d002      	beq.n	3884 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    387e:	4630      	mov	r0, r6
    3880:	684b      	ldr	r3, [r1, #4]
    3882:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3884:	b11c      	cbz	r4, 388e <nrfx_gpio_handler+0x2e>
    3886:	6823      	ldr	r3, [r4, #0]
    3888:	4621      	mov	r1, r4
    388a:	461c      	mov	r4, r3
    388c:	e7f2      	b.n	3874 <nrfx_gpio_handler+0x14>
    388e:	4623      	mov	r3, r4
    3890:	e7fa      	b.n	3888 <nrfx_gpio_handler+0x28>
    3892:	bf00      	nop
    3894:	2000e684 	.word	0x2000e684
    3898:	00009538 	.word	0x00009538

0000389c <gpio_nrfx_pin_configure>:
{
    389c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    38a0:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    38a2:	f001 051f 	and.w	r5, r1, #31
    38a6:	7b3b      	ldrb	r3, [r7, #12]
{
    38a8:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    38aa:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    38ae:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    38b0:	4628      	mov	r0, r5
    38b2:	f10d 0103 	add.w	r1, sp, #3
    38b6:	f001 f9d1 	bl	4c5c <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    38ba:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    38be:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    38c0:	d10b      	bne.n	38da <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    38c2:	4628      	mov	r0, r5
    38c4:	f001 fa8a 	bl	4ddc <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    38c8:	4b3c      	ldr	r3, [pc, #240]	; (39bc <gpio_nrfx_pin_configure+0x120>)
    38ca:	4598      	cmp	r8, r3
    38cc:	d103      	bne.n	38d6 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    38ce:	f89d 0003 	ldrb.w	r0, [sp, #3]
    38d2:	f001 fa0b 	bl	4cec <nrfx_gpiote_channel_free>
		return 0;
    38d6:	2000      	movs	r0, #0
    38d8:	e00c      	b.n	38f4 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    38da:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    38dc:	4628      	mov	r0, r5
    38de:	4619      	mov	r1, r3
    38e0:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    38e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    38e6:	f001 f887 	bl	49f8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    38ea:	4b34      	ldr	r3, [pc, #208]	; (39bc <gpio_nrfx_pin_configure+0x120>)
    38ec:	4298      	cmp	r0, r3
    38ee:	d004      	beq.n	38fa <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    38f0:	f06f 0015 	mvn.w	r0, #21
}
    38f4:	b004      	add	sp, #16
    38f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    38fa:	4580      	cmp	r8, r0
    38fc:	d103      	bne.n	3906 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    38fe:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3902:	f001 f9f3 	bl	4cec <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    3906:	03a3      	lsls	r3, r4, #14
    3908:	d549      	bpl.n	399e <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    390a:	f240 3306 	movw	r3, #774	; 0x306
    390e:	4023      	ands	r3, r4
    3910:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    3914:	d019      	beq.n	394a <gpio_nrfx_pin_configure+0xae>
    3916:	d80c      	bhi.n	3932 <gpio_nrfx_pin_configure+0x96>
    3918:	2b06      	cmp	r3, #6
    391a:	d017      	beq.n	394c <gpio_nrfx_pin_configure+0xb0>
    391c:	d804      	bhi.n	3928 <gpio_nrfx_pin_configure+0x8c>
    391e:	b1ab      	cbz	r3, 394c <gpio_nrfx_pin_configure+0xb0>
    3920:	2b02      	cmp	r3, #2
    3922:	d1e5      	bne.n	38f0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    3924:	2304      	movs	r3, #4
    3926:	e011      	b.n	394c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    392c:	d1e0      	bne.n	38f0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    392e:	2301      	movs	r3, #1
    3930:	e00c      	b.n	394c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3932:	f240 2202 	movw	r2, #514	; 0x202
    3936:	4293      	cmp	r3, r2
    3938:	d026      	beq.n	3988 <gpio_nrfx_pin_configure+0xec>
    393a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    393e:	d025      	beq.n	398c <gpio_nrfx_pin_configure+0xf0>
    3940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3944:	d1d4      	bne.n	38f0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    3946:	2302      	movs	r3, #2
    3948:	e000      	b.n	394c <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    394a:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    394c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    3950:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    3954:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    3958:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    395a:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    395e:	bf4c      	ite	mi
    3960:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
    3962:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3966:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    3968:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    396c:	d510      	bpl.n	3990 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    396e:	2301      	movs	r3, #1
    3970:	687a      	ldr	r2, [r7, #4]
    3972:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    3974:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    3976:	2200      	movs	r2, #0
    3978:	4628      	mov	r0, r5
    397a:	a901      	add	r1, sp, #4
    397c:	f001 f8e8 	bl	4b50 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3980:	4b0e      	ldr	r3, [pc, #56]	; (39bc <gpio_nrfx_pin_configure+0x120>)
    3982:	4298      	cmp	r0, r3
    3984:	d0a7      	beq.n	38d6 <gpio_nrfx_pin_configure+0x3a>
    3986:	e7b3      	b.n	38f0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    3988:	2305      	movs	r3, #5
    398a:	e7df      	b.n	394c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    398c:	2303      	movs	r3, #3
    398e:	e7dd      	b.n	394c <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    3990:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    3992:	bf41      	itttt	mi
    3994:	2301      	movmi	r3, #1
    3996:	687a      	ldrmi	r2, [r7, #4]
    3998:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    399a:	60d3      	strmi	r3, [r2, #12]
}
    399c:	e7eb      	b.n	3976 <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
    399e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    39a0:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    39a4:	bf4c      	ite	mi
    39a6:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
    39a8:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    39ac:	461a      	mov	r2, r3
    39ae:	4628      	mov	r0, r5
    39b0:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    39b2:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    39b6:	f001 f81f 	bl	49f8 <nrfx_gpiote_input_configure>
    39ba:	e7e1      	b.n	3980 <gpio_nrfx_pin_configure+0xe4>
    39bc:	0bad0000 	.word	0x0bad0000

000039c0 <regulator_fixed_init_sync>:
	.enable = enable_sync,
	.disable = disable_sync,
};

static int regulator_fixed_init_sync(const struct device *dev)
{
    39c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39c2:	6845      	ldr	r5, [r0, #4]
    39c4:	4606      	mov	r6, r0
	if (!device_is_ready(cfg->enable.port)) {
    39c6:	68e8      	ldr	r0, [r5, #12]
    39c8:	f005 fbec 	bl	91a4 <z_device_is_ready>
    39cc:	b978      	cbnz	r0, 39ee <regulator_fixed_init_sync+0x2e>
		LOG_ERR("GPIO port: %s not ready", cfg->enable.port->name);
    39ce:	68eb      	ldr	r3, [r5, #12]
    39d0:	2145      	movs	r1, #69	; 0x45
    39d2:	681a      	ldr	r2, [r3, #0]
    39d4:	481c      	ldr	r0, [pc, #112]	; (3a48 <regulator_fixed_init_sync+0x88>)
    39d6:	f004 fb9f 	bl	8118 <z_log_minimal_printk>
		return -ENODEV;
    39da:	f06f 0512 	mvn.w	r5, #18
	__ASSERT(cfg->startup_delay_us == 0,
		 "sync not valid with startup delay");
	__ASSERT(cfg->off_on_delay_us == 0,
		 "sync not valid with shutdown delay");

	LOG_INF("%s sync: %d", dev->name, rc);
    39de:	462b      	mov	r3, r5
    39e0:	2149      	movs	r1, #73	; 0x49
    39e2:	6832      	ldr	r2, [r6, #0]
    39e4:	4819      	ldr	r0, [pc, #100]	; (3a4c <regulator_fixed_init_sync+0x8c>)
    39e6:	f004 fb97 	bl	8118 <z_log_minimal_printk>

	return rc;
}
    39ea:	4628      	mov	r0, r5
    39ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (on) {
    39ee:	7d2c      	ldrb	r4, [r5, #20]
				  spec->dt_flags | extra_flags);
    39f0:	8a6b      	ldrh	r3, [r5, #18]
    39f2:	f014 0403 	ands.w	r4, r4, #3
		flags = GPIO_OUTPUT_ACTIVE;
    39f6:	bf16      	itet	ne
    39f8:	f44f 12d0 	movne.w	r2, #1703936	; 0x1a0000
		flags = GPIO_OUTPUT_INACTIVE;
    39fc:	f44f 12b0 	moveq.w	r2, #1441792	; 0x160000
		delay_us = cfg->startup_delay_us;
    3a00:	686c      	ldrne	r4, [r5, #4]
	return gpio_pin_configure(spec->port,
    3a02:	68e8      	ldr	r0, [r5, #12]
				  spec->pin,
    3a04:	7c29      	ldrb	r1, [r5, #16]
	return gpio_pin_configure(spec->port,
    3a06:	4313      	orrs	r3, r2
		data->invert |= (gpio_port_pins_t)BIT(pin);
    3a08:	2701      	movs	r7, #1
	struct gpio_driver_data *data =
    3a0a:	f8d0 c010 	ldr.w	ip, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    3a0e:	07da      	lsls	r2, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    3a10:	f8dc 5000 	ldr.w	r5, [ip]
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    3a14:	bf48      	it	mi
    3a16:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    3a1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    3a1e:	408f      	lsls	r7, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    3a20:	07db      	lsls	r3, r3, #31
	const struct gpio_driver_api *api =
    3a22:	f8d0 e008 	ldr.w	lr, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    3a26:	bf4c      	ite	mi
    3a28:	433d      	orrmi	r5, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    3a2a:	43bd      	bicpl	r5, r7
    3a2c:	f8cc 5000 	str.w	r5, [ip]
	return api->pin_configure(port, pin, flags);
    3a30:	f8de 3000 	ldr.w	r3, [lr]
    3a34:	4798      	blx	r3
	if ((rc == 0) && (delay_us > 0)) {
    3a36:	4605      	mov	r5, r0
    3a38:	2800      	cmp	r0, #0
    3a3a:	d1d0      	bne.n	39de <regulator_fixed_init_sync+0x1e>
    3a3c:	2c00      	cmp	r4, #0
    3a3e:	d0ce      	beq.n	39de <regulator_fixed_init_sync+0x1e>
	z_impl_k_busy_wait(usec_to_wait);
    3a40:	4620      	mov	r0, r4
    3a42:	f005 fd10 	bl	9466 <z_impl_k_busy_wait>
}
    3a46:	e7ca      	b.n	39de <regulator_fixed_init_sync+0x1e>
    3a48:	0000a893 	.word	0x0000a893
    3a4c:	0000a8b0 	.word	0x0000a8b0

00003a50 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    3a50:	4b02      	ldr	r3, [pc, #8]	; (3a5c <flash_nrf_pages_layout+0xc>)
    3a52:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    3a54:	2301      	movs	r3, #1
    3a56:	6013      	str	r3, [r2, #0]
}
    3a58:	4770      	bx	lr
    3a5a:	bf00      	nop
    3a5c:	2000e694 	.word	0x2000e694

00003a60 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    3a60:	4800      	ldr	r0, [pc, #0]	; (3a64 <flash_nrf_get_parameters+0x4>)
    3a62:	4770      	bx	lr
    3a64:	000099d8 	.word	0x000099d8

00003a68 <flash_nrf_read>:
{
    3a68:	b570      	push	{r4, r5, r6, lr}
    3a6a:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    3a6c:	4619      	mov	r1, r3
    3a6e:	4628      	mov	r0, r5
{
    3a70:	4616      	mov	r6, r2
    3a72:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    3a74:	f005 f816 	bl	8aa4 <is_regular_addr_valid>
    3a78:	b940      	cbnz	r0, 3a8c <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    3a7a:	4808      	ldr	r0, [pc, #32]	; (3a9c <flash_nrf_read+0x34>)
    3a7c:	4623      	mov	r3, r4
    3a7e:	462a      	mov	r2, r5
    3a80:	2145      	movs	r1, #69	; 0x45
    3a82:	f004 fb49 	bl	8118 <z_log_minimal_printk>
    3a86:	f06f 0015 	mvn.w	r0, #21
}
    3a8a:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
    3a8c:	b124      	cbz	r4, 3a98 <flash_nrf_read+0x30>
	memcpy(data, (void *)addr, len);
    3a8e:	4622      	mov	r2, r4
    3a90:	4629      	mov	r1, r5
    3a92:	4630      	mov	r0, r6
    3a94:	f004 feb4 	bl	8800 <memcpy>
		return 0;
    3a98:	2000      	movs	r0, #0
    3a9a:	e7f6      	b.n	3a8a <flash_nrf_read+0x22>
    3a9c:	0000a8e5 	.word	0x0000a8e5

00003aa0 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    3aa0:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    3aa2:	2201      	movs	r2, #1
    3aa4:	4806      	ldr	r0, [pc, #24]	; (3ac0 <nrf_flash_init+0x20>)
    3aa6:	4611      	mov	r1, r2
    3aa8:	f005 fbfb 	bl	92a2 <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    3aac:	f005 fb76 	bl	919c <nrfx_nvmc_flash_page_count_get>
    3ab0:	4c04      	ldr	r4, [pc, #16]	; (3ac4 <nrf_flash_init+0x24>)
    3ab2:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    3ab4:	f005 fb6f 	bl	9196 <nrfx_nvmc_flash_page_size_get>
    3ab8:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    3aba:	2000      	movs	r0, #0
    3abc:	bd10      	pop	{r4, pc}
    3abe:	bf00      	nop
    3ac0:	2000e69c 	.word	0x2000e69c
    3ac4:	2000e694 	.word	0x2000e694

00003ac8 <flash_nrf_erase>:
{
    3ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3aca:	460e      	mov	r6, r1
    3acc:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    3ace:	f005 fb62 	bl	9196 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    3ad2:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    3ad4:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
    3ad6:	4630      	mov	r0, r6
    3ad8:	f004 ffe4 	bl	8aa4 <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    3adc:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
    3ade:	b350      	cbz	r0, 3b36 <flash_nrf_erase+0x6e>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    3ae0:	fbb6 f3f5 	udiv	r3, r6, r5
    3ae4:	fb05 6313 	mls	r3, r5, r3, r6
    3ae8:	b923      	cbnz	r3, 3af4 <flash_nrf_erase+0x2c>
    3aea:	fbb4 f3f5 	udiv	r3, r4, r5
    3aee:	fb05 4313 	mls	r3, r5, r3, r4
    3af2:	b143      	cbz	r3, 3b06 <flash_nrf_erase+0x3e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    3af4:	4623      	mov	r3, r4
    3af6:	4632      	mov	r2, r6
    3af8:	2145      	movs	r1, #69	; 0x45
    3afa:	4811      	ldr	r0, [pc, #68]	; (3b40 <flash_nrf_erase+0x78>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
    3afc:	f004 fb0c 	bl	8118 <z_log_minimal_printk>
			return -EINVAL;
    3b00:	f06f 0015 	mvn.w	r0, #21
    3b04:	e002      	b.n	3b0c <flash_nrf_erase+0x44>
		if (!n_pages) {
    3b06:	42a5      	cmp	r5, r4
    3b08:	d901      	bls.n	3b0e <flash_nrf_erase+0x46>
			return 0;
    3b0a:	2000      	movs	r0, #0
}
    3b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return z_impl_k_sem_take(sem, timeout);
    3b0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3b16:	480b      	ldr	r0, [pc, #44]	; (3b44 <flash_nrf_erase+0x7c>)
    3b18:	f001 fd46 	bl	55a8 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    3b1c:	f005 fb3b 	bl	9196 <nrfx_nvmc_flash_page_size_get>
    3b20:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    3b22:	4638      	mov	r0, r7
    3b24:	f001 fa3c 	bl	4fa0 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
    3b28:	1b64      	subs	r4, r4, r5
    3b2a:	442f      	add	r7, r5
    3b2c:	d1f9      	bne.n	3b22 <flash_nrf_erase+0x5a>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    3b2e:	4805      	ldr	r0, [pc, #20]	; (3b44 <flash_nrf_erase+0x7c>)
    3b30:	f001 fd1a 	bl	5568 <z_impl_k_sem_give>
}
    3b34:	e7e9      	b.n	3b0a <flash_nrf_erase+0x42>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    3b36:	4623      	mov	r3, r4
    3b38:	4632      	mov	r2, r6
    3b3a:	2145      	movs	r1, #69	; 0x45
    3b3c:	4802      	ldr	r0, [pc, #8]	; (3b48 <flash_nrf_erase+0x80>)
    3b3e:	e7dd      	b.n	3afc <flash_nrf_erase+0x34>
    3b40:	0000a907 	.word	0x0000a907
    3b44:	2000e69c 	.word	0x2000e69c
    3b48:	0000a8e5 	.word	0x0000a8e5

00003b4c <flash_nrf_write>:
{
    3b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b4e:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    3b50:	4619      	mov	r1, r3
    3b52:	4630      	mov	r0, r6
{
    3b54:	4617      	mov	r7, r2
    3b56:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    3b58:	f004 ffa4 	bl	8aa4 <is_regular_addr_valid>
    3b5c:	b940      	cbnz	r0, 3b70 <flash_nrf_write+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    3b5e:	4623      	mov	r3, r4
    3b60:	4632      	mov	r2, r6
    3b62:	2145      	movs	r1, #69	; 0x45
    3b64:	4816      	ldr	r0, [pc, #88]	; (3bc0 <flash_nrf_write+0x74>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    3b66:	f004 fad7 	bl	8118 <z_log_minimal_printk>
		return -EINVAL;
    3b6a:	f06f 0015 	mvn.w	r0, #21
}
    3b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    3b70:	ea46 0504 	orr.w	r5, r6, r4
    3b74:	f015 0503 	ands.w	r5, r5, #3
    3b78:	d004      	beq.n	3b84 <flash_nrf_write+0x38>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    3b7a:	4623      	mov	r3, r4
    3b7c:	4632      	mov	r2, r6
    3b7e:	2145      	movs	r1, #69	; 0x45
    3b80:	4810      	ldr	r0, [pc, #64]	; (3bc4 <flash_nrf_write+0x78>)
    3b82:	e7f0      	b.n	3b66 <flash_nrf_write+0x1a>
	if (!len) {
    3b84:	b1a4      	cbz	r4, 3bb0 <flash_nrf_write+0x64>
	return z_impl_k_sem_take(sem, timeout);
    3b86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3b8e:	480e      	ldr	r0, [pc, #56]	; (3bc8 <flash_nrf_write+0x7c>)
    3b90:	f001 fd0a 	bl	55a8 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
    3b94:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    3b98:	42ac      	cmp	r4, r5
    3b9a:	eb06 0005 	add.w	r0, r6, r5
    3b9e:	d109      	bne.n	3bb4 <flash_nrf_write+0x68>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    3ba0:	4a0a      	ldr	r2, [pc, #40]	; (3bcc <flash_nrf_write+0x80>)
    3ba2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    3ba6:	07db      	lsls	r3, r3, #31
    3ba8:	d5fb      	bpl.n	3ba2 <flash_nrf_write+0x56>
	z_impl_k_sem_give(sem);
    3baa:	4807      	ldr	r0, [pc, #28]	; (3bc8 <flash_nrf_write+0x7c>)
    3bac:	f001 fcdc 	bl	5568 <z_impl_k_sem_give>
	return ret;
    3bb0:	2000      	movs	r0, #0
    3bb2:	e7dc      	b.n	3b6e <flash_nrf_write+0x22>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
    3bb4:	5979      	ldr	r1, [r7, r5]
    3bb6:	f001 fa11 	bl	4fdc <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    3bba:	3504      	adds	r5, #4
}
    3bbc:	e7ec      	b.n	3b98 <flash_nrf_write+0x4c>
    3bbe:	bf00      	nop
    3bc0:	0000a8e5 	.word	0x0000a8e5
    3bc4:	0000a92b 	.word	0x0000a92b
    3bc8:	2000e69c 	.word	0x2000e69c
    3bcc:	50039000 	.word	0x50039000

00003bd0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    3bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    3bd2:	794b      	ldrb	r3, [r1, #5]
    3bd4:	2b01      	cmp	r3, #1
    3bd6:	d026      	beq.n	3c26 <uarte_nrfx_configure+0x56>
    3bd8:	2b03      	cmp	r3, #3
    3bda:	d121      	bne.n	3c20 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    3bdc:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3bde:	798b      	ldrb	r3, [r1, #6]
    3be0:	2b03      	cmp	r3, #3
    3be2:	d11d      	bne.n	3c20 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3be4:	79ce      	ldrb	r6, [r1, #7]
    3be6:	b10e      	cbz	r6, 3bec <uarte_nrfx_configure+0x1c>
    3be8:	2e01      	cmp	r6, #1
    3bea:	d119      	bne.n	3c20 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3bec:	790a      	ldrb	r2, [r1, #4]
    3bee:	b112      	cbz	r2, 3bf6 <uarte_nrfx_configure+0x26>
    3bf0:	2a02      	cmp	r2, #2
    3bf2:	d115      	bne.n	3c20 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3bf4:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3bf6:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3bf8:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    3bfa:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    3bfe:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
    3c00:	d067      	beq.n	3cd2 <uarte_nrfx_configure+0x102>
    3c02:	d82d      	bhi.n	3c60 <uarte_nrfx_configure+0x90>
    3c04:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3c08:	d066      	beq.n	3cd8 <uarte_nrfx_configure+0x108>
    3c0a:	d816      	bhi.n	3c3a <uarte_nrfx_configure+0x6a>
    3c0c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3c10:	d064      	beq.n	3cdc <uarte_nrfx_configure+0x10c>
    3c12:	d80a      	bhi.n	3c2a <uarte_nrfx_configure+0x5a>
    3c14:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3c18:	d063      	beq.n	3ce2 <uarte_nrfx_configure+0x112>
    3c1a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3c1e:	d063      	beq.n	3ce8 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
    3c20:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3c24:	e054      	b.n	3cd0 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    3c26:	2500      	movs	r5, #0
    3c28:	e7d9      	b.n	3bde <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    3c2a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3c2e:	d05e      	beq.n	3cee <uarte_nrfx_configure+0x11e>
    3c30:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3c34:	d1f4      	bne.n	3c20 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3c36:	4b38      	ldr	r3, [pc, #224]	; (3d18 <uarte_nrfx_configure+0x148>)
    3c38:	e03c      	b.n	3cb4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3c3a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3c3e:	d059      	beq.n	3cf4 <uarte_nrfx_configure+0x124>
    3c40:	d807      	bhi.n	3c52 <uarte_nrfx_configure+0x82>
    3c42:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3c46:	d057      	beq.n	3cf8 <uarte_nrfx_configure+0x128>
    3c48:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3c4c:	d1e8      	bne.n	3c20 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    3c4e:	4b33      	ldr	r3, [pc, #204]	; (3d1c <uarte_nrfx_configure+0x14c>)
    3c50:	e030      	b.n	3cb4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3c52:	f647 2412 	movw	r4, #31250	; 0x7a12
    3c56:	42a3      	cmp	r3, r4
    3c58:	d1e2      	bne.n	3c20 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    3c5a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3c5e:	e029      	b.n	3cb4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3c60:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3c64:	d04a      	beq.n	3cfc <uarte_nrfx_configure+0x12c>
    3c66:	d813      	bhi.n	3c90 <uarte_nrfx_configure+0xc0>
    3c68:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3c6c:	d049      	beq.n	3d02 <uarte_nrfx_configure+0x132>
    3c6e:	d809      	bhi.n	3c84 <uarte_nrfx_configure+0xb4>
    3c70:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    3c74:	42a3      	cmp	r3, r4
    3c76:	d046      	beq.n	3d06 <uarte_nrfx_configure+0x136>
    3c78:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3c7c:	d1d0      	bne.n	3c20 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3c7e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3c82:	e017      	b.n	3cb4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3c84:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3c88:	d1ca      	bne.n	3c20 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    3c8a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3c8e:	e011      	b.n	3cb4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3c90:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3c94:	d03a      	beq.n	3d0c <uarte_nrfx_configure+0x13c>
    3c96:	d808      	bhi.n	3caa <uarte_nrfx_configure+0xda>
    3c98:	4c21      	ldr	r4, [pc, #132]	; (3d20 <uarte_nrfx_configure+0x150>)
    3c9a:	42a3      	cmp	r3, r4
    3c9c:	d039      	beq.n	3d12 <uarte_nrfx_configure+0x142>
    3c9e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3ca2:	d1bd      	bne.n	3c20 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3ca4:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3ca8:	e004      	b.n	3cb4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3caa:	4c1e      	ldr	r4, [pc, #120]	; (3d24 <uarte_nrfx_configure+0x154>)
    3cac:	42a3      	cmp	r3, r4
    3cae:	d1b7      	bne.n	3c20 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3cb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    3cb4:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3cb6:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
    3cba:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
    3cbc:	4335      	orrs	r5, r6
    3cbe:	681b      	ldr	r3, [r3, #0]
    3cc0:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3cc2:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    3cc6:	1d23      	adds	r3, r4, #4
    3cc8:	c903      	ldmia	r1, {r0, r1}
    3cca:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    3cce:	2000      	movs	r0, #0
}
    3cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    3cd2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3cd6:	e7ed      	b.n	3cb4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3cd8:	4b13      	ldr	r3, [pc, #76]	; (3d28 <uarte_nrfx_configure+0x158>)
    3cda:	e7eb      	b.n	3cb4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3cdc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3ce0:	e7e8      	b.n	3cb4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    3ce2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3ce6:	e7e5      	b.n	3cb4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3ce8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3cec:	e7e2      	b.n	3cb4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3cee:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3cf2:	e7df      	b.n	3cb4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3cf4:	4b0d      	ldr	r3, [pc, #52]	; (3d2c <uarte_nrfx_configure+0x15c>)
    3cf6:	e7dd      	b.n	3cb4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3cf8:	4b0d      	ldr	r3, [pc, #52]	; (3d30 <uarte_nrfx_configure+0x160>)
    3cfa:	e7db      	b.n	3cb4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3cfc:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3d00:	e7d8      	b.n	3cb4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3d02:	4b0c      	ldr	r3, [pc, #48]	; (3d34 <uarte_nrfx_configure+0x164>)
    3d04:	e7d6      	b.n	3cb4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3d06:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3d0a:	e7d3      	b.n	3cb4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3d0c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3d10:	e7d0      	b.n	3cb4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3d12:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3d16:	e7cd      	b.n	3cb4 <uarte_nrfx_configure+0xe4>
    3d18:	0013b000 	.word	0x0013b000
    3d1c:	004ea000 	.word	0x004ea000
    3d20:	0003d090 	.word	0x0003d090
    3d24:	000f4240 	.word	0x000f4240
    3d28:	00275000 	.word	0x00275000
    3d2c:	0075c000 	.word	0x0075c000
    3d30:	003af000 	.word	0x003af000
    3d34:	013a9000 	.word	0x013a9000

00003d38 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    3d38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    3d3c:	4680      	mov	r8, r0
    3d3e:	2200      	movs	r2, #0
    3d40:	2101      	movs	r1, #1
    3d42:	2008      	movs	r0, #8
    3d44:	f7fe ffd6 	bl	2cf4 <z_arm_irq_priority_set>
    3d48:	2008      	movs	r0, #8
    3d4a:	f7fe ffb7 	bl	2cbc <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    3d4e:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
    3d50:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    3d54:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    3d58:	683c      	ldr	r4, [r7, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    3d5a:	aa01      	add	r2, sp, #4
    3d5c:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    3d60:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    3d64:	f8d7 900c 	ldr.w	r9, [r7, #12]
    3d68:	4648      	mov	r0, r9
    3d6a:	f005 f888 	bl	8e7e <pinctrl_lookup_state>
	if (ret < 0) {
    3d6e:	1e05      	subs	r5, r0, #0
    3d70:	db1e      	blt.n	3db0 <uarte_0_init+0x78>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    3d72:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    3d74:	f8d9 2000 	ldr.w	r2, [r9]
    3d78:	7919      	ldrb	r1, [r3, #4]
    3d7a:	6818      	ldr	r0, [r3, #0]
    3d7c:	f000 fad4 	bl	4328 <pinctrl_configure_pins>
	if (err < 0) {
    3d80:	1e05      	subs	r5, r0, #0
    3d82:	db15      	blt.n	3db0 <uarte_0_init+0x78>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    3d84:	4640      	mov	r0, r8
    3d86:	1d31      	adds	r1, r6, #4
    3d88:	f7ff ff22 	bl	3bd0 <uarte_nrfx_configure>
	if (err) {
    3d8c:	4605      	mov	r5, r0
    3d8e:	b978      	cbnz	r0, 3db0 <uarte_0_init+0x78>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    3d90:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    3d92:	0799      	lsls	r1, r3, #30
    3d94:	d51d      	bpl.n	3dd2 <uarte_0_init+0x9a>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3d96:	f106 001c 	add.w	r0, r6, #28
    3d9a:	f000 fda5 	bl	48e8 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3d9e:	4b21      	ldr	r3, [pc, #132]	; (3e24 <uarte_0_init+0xec>)
    3da0:	4298      	cmp	r0, r3
    3da2:	d009      	beq.n	3db8 <uarte_0_init+0x80>
		LOG_ERR("Failed to allocate PPI Channel");
    3da4:	2145      	movs	r1, #69	; 0x45
    3da6:	4820      	ldr	r0, [pc, #128]	; (3e28 <uarte_0_init+0xf0>)
    3da8:	f004 f9b6 	bl	8118 <z_log_minimal_printk>
		return -EIO;
    3dac:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    3db0:	4628      	mov	r0, r5
    3db2:	b003      	add	sp, #12
    3db4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    3db8:	7f33      	ldrb	r3, [r6, #28]
    3dba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3dbe:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    3dc2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3dc6:	2301      	movs	r3, #1
    3dc8:	7f32      	ldrb	r2, [r6, #28]
    3dca:	4093      	lsls	r3, r2
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    3dcc:	4a17      	ldr	r2, [pc, #92]	; (3e2c <uarte_0_init+0xf4>)
    3dce:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3dd2:	2308      	movs	r3, #8
    3dd4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    3dd8:	7a3b      	ldrb	r3, [r7, #8]
    3dda:	b953      	cbnz	r3, 3df2 <uarte_0_init+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3ddc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    3de0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3de4:	69b3      	ldr	r3, [r6, #24]
    3de6:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3dea:	2301      	movs	r3, #1
    3dec:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3df0:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3df2:	687b      	ldr	r3, [r7, #4]
    3df4:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    3df6:	bf5c      	itt	pl
    3df8:	f44f 7380 	movpl.w	r3, #256	; 0x100
    3dfc:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3e00:	687b      	ldr	r3, [r7, #4]
    3e02:	06db      	lsls	r3, r3, #27
    3e04:	bf44      	itt	mi
    3e06:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    3e0a:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3e0e:	6973      	ldr	r3, [r6, #20]
    3e10:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3e14:	2300      	movs	r3, #0
    3e16:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3e1a:	2301      	movs	r3, #1
    3e1c:	60a3      	str	r3, [r4, #8]
    3e1e:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    3e20:	e7c6      	b.n	3db0 <uarte_0_init+0x78>
    3e22:	bf00      	nop
    3e24:	0bad0000 	.word	0x0bad0000
    3e28:	0000a96f 	.word	0x0000a96f
    3e2c:	50017000 	.word	0x50017000

00003e30 <uarte_nrfx_poll_out>:
{
    3e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e32:	4604      	mov	r4, r0
    3e34:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
    3e36:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3e38:	f005 fa10 	bl	925c <k_is_in_isr>
    3e3c:	b9b0      	cbnz	r0, 3e6c <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    3e3e:	4b21      	ldr	r3, [pc, #132]	; (3ec4 <uarte_nrfx_poll_out+0x94>)
    3e40:	781b      	ldrb	r3, [r3, #0]
    3e42:	b19b      	cbz	r3, 3e6c <uarte_nrfx_poll_out+0x3c>
{
    3e44:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    3e46:	6860      	ldr	r0, [r4, #4]
    3e48:	f004 ff6f 	bl	8d2a <is_tx_ready.isra.0>
    3e4c:	bb00      	cbnz	r0, 3e90 <uarte_nrfx_poll_out+0x60>
    3e4e:	2001      	movs	r0, #1
    3e50:	f005 f8f2 	bl	9038 <nrfx_busy_wait>
    3e54:	3e01      	subs	r6, #1
    3e56:	d1f6      	bne.n	3e46 <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
    3e58:	2100      	movs	r1, #0
    3e5a:	2021      	movs	r0, #33	; 0x21
    3e5c:	f001 fe94 	bl	5b88 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3e60:	e7f0      	b.n	3e44 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    3e62:	f381 8811 	msr	BASEPRI, r1
    3e66:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3e6a:	e7f5      	b.n	3e58 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    3e6c:	f04f 0320 	mov.w	r3, #32
    3e70:	f3ef 8111 	mrs	r1, BASEPRI
    3e74:	f383 8812 	msr	BASEPRI_MAX, r3
    3e78:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3e7c:	6860      	ldr	r0, [r4, #4]
    3e7e:	460e      	mov	r6, r1
    3e80:	f004 ff53 	bl	8d2a <is_tx_ready.isra.0>
    3e84:	b990      	cbnz	r0, 3eac <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    3e86:	f381 8811 	msr	BASEPRI, r1
    3e8a:	f3bf 8f6f 	isb	sy
}
    3e8e:	e7ed      	b.n	3e6c <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    3e90:	f04f 0320 	mov.w	r3, #32
    3e94:	f3ef 8111 	mrs	r1, BASEPRI
    3e98:	f383 8812 	msr	BASEPRI_MAX, r3
    3e9c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3ea0:	6860      	ldr	r0, [r4, #4]
    3ea2:	460e      	mov	r6, r1
    3ea4:	f004 ff41 	bl	8d2a <is_tx_ready.isra.0>
    3ea8:	2800      	cmp	r0, #0
    3eaa:	d0da      	beq.n	3e62 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    3eac:	697b      	ldr	r3, [r7, #20]
	tx_start(dev, data->char_out, 1);
    3eae:	2201      	movs	r2, #1
	*data->char_out = c;
    3eb0:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
    3eb2:	4620      	mov	r0, r4
    3eb4:	6979      	ldr	r1, [r7, #20]
    3eb6:	f004 fe78 	bl	8baa <tx_start>
	__asm__ volatile(
    3eba:	f386 8811 	msr	BASEPRI, r6
    3ebe:	f3bf 8f6f 	isb	sy
}
    3ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ec4:	2000f27c 	.word	0x2000f27c

00003ec8 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3ec8:	2301      	movs	r3, #1
    3eca:	4083      	lsls	r3, r0
{
    3ecc:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3ece:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3ed0:	4a0b      	ldr	r2, [pc, #44]	; (3f00 <compare_int_lock+0x38>)
    3ed2:	e8d2 1fef 	ldaex	r1, [r2]
    3ed6:	ea01 0504 	and.w	r5, r1, r4
    3eda:	e8c2 5fe6 	stlex	r6, r5, [r2]
    3ede:	2e00      	cmp	r6, #0
    3ee0:	d1f7      	bne.n	3ed2 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3ee2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3ee6:	4082      	lsls	r2, r0
    3ee8:	4806      	ldr	r0, [pc, #24]	; (3f04 <compare_int_lock+0x3c>)
    3eea:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    3eee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3ef2:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    3ef6:	420b      	tst	r3, r1
}
    3ef8:	bf14      	ite	ne
    3efa:	2001      	movne	r0, #1
    3efc:	2000      	moveq	r0, #0
    3efe:	bd70      	pop	{r4, r5, r6, pc}
    3f00:	2000e6b0 	.word	0x2000e6b0
    3f04:	50015000 	.word	0x50015000

00003f08 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    3f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3f0a:	491b      	ldr	r1, [pc, #108]	; (3f78 <sys_clock_timeout_handler+0x70>)
{
    3f0c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    3f0e:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3f12:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    3f14:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3f18:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3f1c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    3f1e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3f22:	d30f      	bcc.n	3f44 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3f24:	f001 ff96 	bl	5e54 <sys_clock_announce>
    return p_reg->CC[ch];
    3f28:	00a3      	lsls	r3, r4, #2
    3f2a:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    3f2e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    3f32:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    3f36:	4295      	cmp	r5, r2
    3f38:	d11d      	bne.n	3f76 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
    3f3a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    3f3e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
    3f42:	e012      	b.n	3f6a <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3f44:	4b0d      	ldr	r3, [pc, #52]	; (3f7c <sys_clock_timeout_handler+0x74>)
    3f46:	681b      	ldr	r3, [r3, #0]
    3f48:	0a1a      	lsrs	r2, r3, #8
    3f4a:	061b      	lsls	r3, r3, #24
    3f4c:	195e      	adds	r6, r3, r5
    3f4e:	4b0c      	ldr	r3, [pc, #48]	; (3f80 <sys_clock_timeout_handler+0x78>)
    3f50:	f142 0700 	adc.w	r7, r2, #0
    3f54:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3f58:	f001 ff7c 	bl	5e54 <sys_clock_announce>
    return p_reg->CC[ch];
    3f5c:	4a09      	ldr	r2, [pc, #36]	; (3f84 <sys_clock_timeout_handler+0x7c>)
    3f5e:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    3f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
    3f66:	429d      	cmp	r5, r3
    3f68:	d105      	bne.n	3f76 <sys_clock_timeout_handler+0x6e>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3f6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->EVTENSET = mask;
    3f6e:	4a05      	ldr	r2, [pc, #20]	; (3f84 <sys_clock_timeout_handler+0x7c>)
    3f70:	40a3      	lsls	r3, r4
    3f72:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    3f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f78:	2000c688 	.word	0x2000c688
    3f7c:	2000e6b4 	.word	0x2000e6b4
    3f80:	2000c690 	.word	0x2000c690
    3f84:	50015000 	.word	0x50015000

00003f88 <compare_int_unlock>:
	if (key) {
    3f88:	b1d9      	cbz	r1, 3fc2 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
    3f8a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3f8c:	4a0d      	ldr	r2, [pc, #52]	; (3fc4 <compare_int_unlock+0x3c>)
    3f8e:	4083      	lsls	r3, r0
    3f90:	e8d2 cfef 	ldaex	ip, [r2]
    3f94:	ea4c 0c03 	orr.w	ip, ip, r3
    3f98:	e8c2 cfe1 	stlex	r1, ip, [r2]
    3f9c:	2900      	cmp	r1, #0
    3f9e:	d1f7      	bne.n	3f90 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3fa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    3fa4:	4a08      	ldr	r2, [pc, #32]	; (3fc8 <compare_int_unlock+0x40>)
    3fa6:	4083      	lsls	r3, r0
    3fa8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3fac:	4b07      	ldr	r3, [pc, #28]	; (3fcc <compare_int_unlock+0x44>)
    3fae:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3fb2:	40c3      	lsrs	r3, r0
    3fb4:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3fb6:	bf42      	ittt	mi
    3fb8:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    3fbc:	4b04      	ldrmi	r3, [pc, #16]	; (3fd0 <compare_int_unlock+0x48>)
    3fbe:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3fc2:	4770      	bx	lr
    3fc4:	2000e6b0 	.word	0x2000e6b0
    3fc8:	50015000 	.word	0x50015000
    3fcc:	2000e6ac 	.word	0x2000e6ac
    3fd0:	e000e100 	.word	0xe000e100

00003fd4 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3fd4:	4b0d      	ldr	r3, [pc, #52]	; (400c <z_nrf_rtc_timer_read+0x38>)
    3fd6:	6818      	ldr	r0, [r3, #0]
    3fd8:	0a01      	lsrs	r1, r0, #8
    3fda:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3fdc:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3fe0:	4b0b      	ldr	r3, [pc, #44]	; (4010 <z_nrf_rtc_timer_read+0x3c>)
    3fe2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    3fe6:	1818      	adds	r0, r3, r0
    3fe8:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3fec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3ff0:	d20a      	bcs.n	4008 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3ff2:	4b08      	ldr	r3, [pc, #32]	; (4014 <z_nrf_rtc_timer_read+0x40>)
    3ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ff8:	4290      	cmp	r0, r2
    3ffa:	eb71 0303 	sbcs.w	r3, r1, r3
    3ffe:	d203      	bcs.n	4008 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    4000:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    4004:	f141 0100 	adc.w	r1, r1, #0
}
    4008:	4770      	bx	lr
    400a:	bf00      	nop
    400c:	2000e6b4 	.word	0x2000e6b4
    4010:	50015000 	.word	0x50015000
    4014:	2000c690 	.word	0x2000c690

00004018 <compare_set>:
{
    4018:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    401c:	4614      	mov	r4, r2
    401e:	461d      	mov	r5, r3
    4020:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
    4022:	f7ff ff51 	bl	3ec8 <compare_int_lock>
    4026:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    4028:	f7ff ffd4 	bl	3fd4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    402c:	42a0      	cmp	r0, r4
    402e:	eb71 0305 	sbcs.w	r3, r1, r5
    4032:	d27a      	bcs.n	412a <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
    4034:	4b44      	ldr	r3, [pc, #272]	; (4148 <compare_set+0x130>)
    4036:	1a20      	subs	r0, r4, r0
    4038:	eb65 0101 	sbc.w	r1, r5, r1
    403c:	4298      	cmp	r0, r3
    403e:	f171 0100 	sbcs.w	r1, r1, #0
    4042:	d27d      	bcs.n	4140 <compare_set+0x128>
		if (target_time != cc_data[chan].target_time) {
    4044:	4b41      	ldr	r3, [pc, #260]	; (414c <compare_set+0x134>)
    4046:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    404a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    404e:	429d      	cmp	r5, r3
    4050:	bf08      	it	eq
    4052:	4294      	cmpeq	r4, r2
    4054:	d054      	beq.n	4100 <compare_set+0xe8>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4056:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
    405a:	f024 4b7f 	bic.w	fp, r4, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    405e:	465e      	mov	r6, fp
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4060:	2100      	movs	r1, #0
    4062:	ea4f 0987 	mov.w	r9, r7, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4066:	f107 0850 	add.w	r8, r7, #80	; 0x50
    406a:	f109 2950 	add.w	r9, r9, #1342197760	; 0x50005000
    406e:	ea4f 0888 	mov.w	r8, r8, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4072:	40bb      	lsls	r3, r7
    4074:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    4078:	fa1f f888 	uxth.w	r8, r8
    407c:	f108 2850 	add.w	r8, r8, #1342197760	; 0x50005000
    4080:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    4082:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    4086:	4b32      	ldr	r3, [pc, #200]	; (4150 <compare_set+0x138>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4088:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
     return p_reg->COUNTER;
    408c:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    4090:	eba0 000a 	sub.w	r0, r0, sl
    4094:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4098:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    409c:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    409e:	f8c9 2540 	str.w	r2, [r9, #1344]	; 0x540
    40a2:	d104      	bne.n	40ae <compare_set+0x96>
	z_impl_k_busy_wait(usec_to_wait);
    40a4:	2013      	movs	r0, #19
    40a6:	f005 f9de 	bl	9466 <z_impl_k_busy_wait>
    40aa:	2100      	movs	r1, #0
    40ac:	4b28      	ldr	r3, [pc, #160]	; (4150 <compare_set+0x138>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    40ae:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    40b2:	eba6 000c 	sub.w	r0, r6, ip
    40b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    40ba:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    40be:	bf88      	it	hi
    40c0:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    40c2:	f8c8 1000 	str.w	r1, [r8]
    p_reg->EVTENSET = mask;
    40c6:	9a01      	ldr	r2, [sp, #4]
    40c8:	f8d8 0000 	ldr.w	r0, [r8]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    40cc:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    40d0:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    40d4:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    40d8:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	} while ((now2 != now) &&
    40dc:	4582      	cmp	sl, r0
    40de:	d006      	beq.n	40ee <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
    40e0:	1a30      	subs	r0, r6, r0
    40e2:	3802      	subs	r0, #2
    40e4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    40e8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    40ec:	d81b      	bhi.n	4126 <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
    40ee:	eba6 060b 	sub.w	r6, r6, fp
    40f2:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    40f6:	1936      	adds	r6, r6, r4
    40f8:	f145 0300 	adc.w	r3, r5, #0
    40fc:	4634      	mov	r4, r6
    40fe:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
    4100:	4912      	ldr	r1, [pc, #72]	; (414c <compare_set+0x134>)
	cc_data[chan].callback = handler;
    4102:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    4104:	eb01 1207 	add.w	r2, r1, r7, lsl #4
    4108:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
    410c:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
    410e:	013b      	lsls	r3, r7, #4
	cc_data[chan].callback = handler;
    4110:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    4112:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4114:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    4116:	4638      	mov	r0, r7
    4118:	9900      	ldr	r1, [sp, #0]
    411a:	f7ff ff35 	bl	3f88 <compare_int_unlock>
}
    411e:	4620      	mov	r0, r4
    4120:	b003      	add	sp, #12
    4122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4126:	4630      	mov	r0, r6
    4128:	e7b0      	b.n	408c <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    412a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    412c:	4a09      	ldr	r2, [pc, #36]	; (4154 <compare_set+0x13c>)
    412e:	40bb      	lsls	r3, r7
    4130:	e8d2 0fef 	ldaex	r0, [r2]
    4134:	4318      	orrs	r0, r3
    4136:	e8c2 0fe1 	stlex	r1, r0, [r2]
    413a:	2900      	cmp	r1, #0
    413c:	d0e0      	beq.n	4100 <compare_set+0xe8>
    413e:	e7f7      	b.n	4130 <compare_set+0x118>
			return -EINVAL;
    4140:	f06f 0415 	mvn.w	r4, #21
    4144:	e7e7      	b.n	4116 <compare_set+0xfe>
    4146:	bf00      	nop
    4148:	01000001 	.word	0x01000001
    414c:	2000c678 	.word	0x2000c678
    4150:	50015000 	.word	0x50015000
    4154:	2000e6ac 	.word	0x2000e6ac

00004158 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    4158:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    415a:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    415c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4160:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4164:	4d16      	ldr	r5, [pc, #88]	; (41c0 <sys_clock_driver_init+0x68>)
    4166:	4b17      	ldr	r3, [pc, #92]	; (41c4 <sys_clock_driver_init+0x6c>)
    4168:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    416c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    4170:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4174:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4176:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    417a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    417e:	4b12      	ldr	r3, [pc, #72]	; (41c8 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    4180:	2101      	movs	r1, #1
    4182:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    4186:	2015      	movs	r0, #21
    4188:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    418c:	4622      	mov	r2, r4
    418e:	f7fe fdb1 	bl	2cf4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    4192:	2015      	movs	r0, #21
    4194:	f7fe fd92 	bl	2cbc <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    4198:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    419a:	4a0c      	ldr	r2, [pc, #48]	; (41cc <sys_clock_driver_init+0x74>)
    419c:	60ab      	str	r3, [r5, #8]
    419e:	602b      	str	r3, [r5, #0]
    41a0:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    41a2:	4b0b      	ldr	r3, [pc, #44]	; (41d0 <sys_clock_driver_init+0x78>)
    41a4:	4a0b      	ldr	r2, [pc, #44]	; (41d4 <sys_clock_driver_init+0x7c>)
    41a6:	9300      	str	r3, [sp, #0]
    41a8:	4620      	mov	r0, r4
    41aa:	2300      	movs	r3, #0
    41ac:	9401      	str	r4, [sp, #4]
    41ae:	f7ff ff33 	bl	4018 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    41b2:	4630      	mov	r0, r6
    41b4:	f7ff fa56 	bl	3664 <z_nrf_clock_control_lf_on>

	return 0;
}
    41b8:	4620      	mov	r0, r4
    41ba:	b002      	add	sp, #8
    41bc:	bd70      	pop	{r4, r5, r6, pc}
    41be:	bf00      	nop
    41c0:	50015000 	.word	0x50015000
    41c4:	2000c678 	.word	0x2000c678
    41c8:	e000e100 	.word	0xe000e100
    41cc:	2000e6b0 	.word	0x2000e6b0
    41d0:	00003f09 	.word	0x00003f09
    41d4:	007fffff 	.word	0x007fffff

000041d8 <rtc_nrf_isr>:
{
    41d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    41dc:	4b31      	ldr	r3, [pc, #196]	; (42a4 <rtc_nrf_isr+0xcc>)
    41de:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    41e2:	0792      	lsls	r2, r2, #30
    41e4:	d50b      	bpl.n	41fe <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    41e6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    41ea:	b142      	cbz	r2, 41fe <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    41ec:	2200      	movs	r2, #0
    41ee:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    41f2:	4a2d      	ldr	r2, [pc, #180]	; (42a8 <rtc_nrf_isr+0xd0>)
    41f4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    41f8:	6813      	ldr	r3, [r2, #0]
    41fa:	3301      	adds	r3, #1
    41fc:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    41fe:	f04f 0320 	mov.w	r3, #32
    4202:	f3ef 8211 	mrs	r2, BASEPRI
    4206:	f383 8812 	msr	BASEPRI_MAX, r3
    420a:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    420e:	4c25      	ldr	r4, [pc, #148]	; (42a4 <rtc_nrf_isr+0xcc>)
    4210:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    4214:	03db      	lsls	r3, r3, #15
    4216:	d525      	bpl.n	4264 <rtc_nrf_isr+0x8c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4218:	4b24      	ldr	r3, [pc, #144]	; (42ac <rtc_nrf_isr+0xd4>)
    421a:	e8d3 1fef 	ldaex	r1, [r3]
    421e:	f021 0001 	bic.w	r0, r1, #1
    4222:	e8c3 0fe5 	stlex	r5, r0, [r3]
    4226:	2d00      	cmp	r5, #0
    4228:	d1f7      	bne.n	421a <rtc_nrf_isr+0x42>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    422a:	b911      	cbnz	r1, 4232 <rtc_nrf_isr+0x5a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    422c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    4230:	b1c3      	cbz	r3, 4264 <rtc_nrf_isr+0x8c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4232:	2500      	movs	r5, #0
    4234:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    4238:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
	__asm__ volatile(
    423c:	f382 8811 	msr	BASEPRI, r2
    4240:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
    4244:	f7ff fec6 	bl	3fd4 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    4248:	f04f 0320 	mov.w	r3, #32
    424c:	f3ef 8211 	mrs	r2, BASEPRI
    4250:	f383 8812 	msr	BASEPRI_MAX, r3
    4254:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    4258:	4b15      	ldr	r3, [pc, #84]	; (42b0 <rtc_nrf_isr+0xd8>)
    425a:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    425e:	42b0      	cmp	r0, r6
    4260:	41b9      	sbcs	r1, r7
    4262:	d206      	bcs.n	4272 <rtc_nrf_isr+0x9a>
	__asm__ volatile(
    4264:	f382 8811 	msr	BASEPRI, r2
    4268:	f3bf 8f6f 	isb	sy
}
    426c:	b003      	add	sp, #12
    426e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4272:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    4276:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    427a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			cc_data[chan].callback = NULL;
    427e:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4280:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENCLR = mask;
    4284:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4288:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    428c:	f382 8811 	msr	BASEPRI, r2
    4290:	f3bf 8f6f 	isb	sy
		if (handler) {
    4294:	2900      	cmp	r1, #0
    4296:	d0e9      	beq.n	426c <rtc_nrf_isr+0x94>
			handler(chan, expire_time, user_context);
    4298:	9000      	str	r0, [sp, #0]
    429a:	4632      	mov	r2, r6
    429c:	463b      	mov	r3, r7
    429e:	4628      	mov	r0, r5
    42a0:	4788      	blx	r1
}
    42a2:	e7e3      	b.n	426c <rtc_nrf_isr+0x94>
    42a4:	50015000 	.word	0x50015000
    42a8:	2000e6b4 	.word	0x2000e6b4
    42ac:	2000e6ac 	.word	0x2000e6ac
    42b0:	2000c678 	.word	0x2000c678

000042b4 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    42b4:	1c43      	adds	r3, r0, #1
{
    42b6:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    42b8:	d020      	beq.n	42fc <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    42ba:	2801      	cmp	r0, #1
    42bc:	dd20      	ble.n	4300 <sys_clock_set_timeout+0x4c>
    42be:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    42c2:	da1f      	bge.n	4304 <sys_clock_set_timeout+0x50>
    42c4:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    42c6:	f7ff fe85 	bl	3fd4 <z_nrf_rtc_timer_read>
    42ca:	4b0f      	ldr	r3, [pc, #60]	; (4308 <sys_clock_set_timeout+0x54>)
    42cc:	e9d3 1300 	ldrd	r1, r3, [r3]
    42d0:	1a42      	subs	r2, r0, r1
		ticks = 0;
    42d2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    42d6:	bf28      	it	cs
    42d8:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
    42da:	480c      	ldr	r0, [pc, #48]	; (430c <sys_clock_set_timeout+0x58>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    42dc:	3201      	adds	r2, #1
    42de:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
    42e0:	4282      	cmp	r2, r0
    42e2:	bf28      	it	cs
    42e4:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
    42e6:	2000      	movs	r0, #0
    42e8:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    42ea:	4909      	ldr	r1, [pc, #36]	; (4310 <sys_clock_set_timeout+0x5c>)
    42ec:	9001      	str	r0, [sp, #4]
    42ee:	9100      	str	r1, [sp, #0]
    42f0:	f143 0300 	adc.w	r3, r3, #0
    42f4:	f7ff fe90 	bl	4018 <compare_set>
}
    42f8:	b002      	add	sp, #8
    42fa:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    42fc:	4803      	ldr	r0, [pc, #12]	; (430c <sys_clock_set_timeout+0x58>)
    42fe:	e7e1      	b.n	42c4 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4300:	2400      	movs	r4, #0
    4302:	e7e0      	b.n	42c6 <sys_clock_set_timeout+0x12>
    4304:	4c01      	ldr	r4, [pc, #4]	; (430c <sys_clock_set_timeout+0x58>)
    4306:	e7de      	b.n	42c6 <sys_clock_set_timeout+0x12>
    4308:	2000c688 	.word	0x2000c688
    430c:	007fffff 	.word	0x007fffff
    4310:	00003f09 	.word	0x00003f09

00004314 <sys_clock_elapsed>:
{
    4314:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    4316:	f7ff fe5d 	bl	3fd4 <z_nrf_rtc_timer_read>
    431a:	4b02      	ldr	r3, [pc, #8]	; (4324 <sys_clock_elapsed+0x10>)
    431c:	681b      	ldr	r3, [r3, #0]
}
    431e:	1ac0      	subs	r0, r0, r3
    4320:	bd08      	pop	{r3, pc}
    4322:	bf00      	nop
    4324:	2000c688 	.word	0x2000c688

00004328 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    4328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    432c:	2701      	movs	r7, #1
    p_reg->OUTSET = set_mask;
    432e:	4e3f      	ldr	r6, [pc, #252]	; (442c <pinctrl_configure_pins+0x104>)
    4330:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4334:	4281      	cmp	r1, r0
    4336:	d102      	bne.n	433e <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    4338:	2000      	movs	r0, #0
}
    433a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    433e:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    4340:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    4344:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
    4348:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    434a:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
    434e:	bf08      	it	eq
    4350:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
    4354:	2d19      	cmp	r5, #25
    4356:	d866      	bhi.n	4426 <pinctrl_configure_pins+0xfe>
    4358:	e8df f005 	tbb	[pc, r5]
    435c:	1e1b160d 	.word	0x1e1b160d
    4360:	651e2d21 	.word	0x651e2d21
    4364:	31656565 	.word	0x31656565
    4368:	65656551 	.word	0x65656551
    436c:	65656565 	.word	0x65656565
    4370:	5c546565 	.word	0x5c546565
    4374:	625f      	.short	0x625f
			NRF_PSEL_UART(reg, TXD) = pin;
    4376:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    437a:	f003 051f 	and.w	r5, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    437e:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
    4382:	60b5      	str	r5, [r6, #8]
}
    4384:	2501      	movs	r5, #1
    4386:	e002      	b.n	438e <pinctrl_configure_pins+0x66>
			NRF_PSEL_UART(reg, RXD) = pin;
    4388:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    438c:	2500      	movs	r5, #0
    438e:	46ac      	mov	ip, r5
    4390:	e01c      	b.n	43cc <pinctrl_configure_pins+0xa4>
			NRF_PSEL_UART(reg, RTS) = pin;
    4392:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    4396:	e7f0      	b.n	437a <pinctrl_configure_pins+0x52>
			NRF_PSEL_UART(reg, CTS) = pin;
    4398:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    439c:	e7f6      	b.n	438c <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    439e:	2500      	movs	r5, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
    43a0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    43a4:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    43a8:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    43ac:	f8c6 c00c 	str.w	ip, [r6, #12]
}
    43b0:	f04f 0c01 	mov.w	ip, #1
    43b4:	e00a      	b.n	43cc <pinctrl_configure_pins+0xa4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    43b6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    43ba:	2501      	movs	r5, #1
    43bc:	e7f2      	b.n	43a4 <pinctrl_configure_pins+0x7c>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    43be:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    43c2:	2c00      	cmp	r4, #0
    43c4:	d1e2      	bne.n	438c <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    43c6:	2500      	movs	r5, #0
				drive = NRF_DRIVE_S0D1;
    43c8:	2406      	movs	r4, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
    43ca:	46ac      	mov	ip, r5
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    43cc:	f850 eb04 	ldr.w	lr, [r0], #4
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    43d0:	0224      	lsls	r4, r4, #8
    43d2:	f40e 5800 	and.w	r8, lr, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    43d6:	f1b8 0f00 	cmp.w	r8, #0
    43da:	bf1c      	itt	ne
    43dc:	f04f 0c00 	movne.w	ip, #0
    43e0:	2501      	movne	r5, #1
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    43e2:	f3ce 1ec1 	ubfx	lr, lr, #7, #2
    43e6:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
    *p_pin = pin_number & 0x1F;
    43ea:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    43ee:	ea44 040c 	orr.w	r4, r4, ip
    43f2:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    43f6:	3380      	adds	r3, #128	; 0x80
    43f8:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    43fc:	e79a      	b.n	4334 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    43fe:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    4402:	e7de      	b.n	43c2 <pinctrl_configure_pins+0x9a>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    4404:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    4408:	6805      	ldr	r5, [r0, #0]
    440a:	f3c5 3580 	ubfx	r5, r5, #14, #1
    if (value == 0)
    440e:	2d00      	cmp	r5, #0
    4410:	d0d3      	beq.n	43ba <pinctrl_configure_pins+0x92>
    4412:	e7b2      	b.n	437a <pinctrl_configure_pins+0x52>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    4414:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    4418:	e7f6      	b.n	4408 <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    441a:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    441e:	e7f3      	b.n	4408 <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    4420:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    4424:	e7f0      	b.n	4408 <pinctrl_configure_pins+0xe0>
		switch (NRF_GET_FUN(pins[i])) {
    4426:	f06f 0085 	mvn.w	r0, #133	; 0x85
    442a:	e786      	b.n	433a <pinctrl_configure_pins+0x12>
    442c:	50842500 	.word	0x50842500

00004430 <fprotect_area>:

#define SPU_BLOCK_SIZE CONFIG_FPROTECT_BLOCK_SIZE

int fprotect_area(uint32_t start, size_t length)
{
	if (start % SPU_BLOCK_SIZE != 0 ||
    4430:	ea40 0301 	orr.w	r3, r0, r1
    4434:	f3c3 030e 	ubfx	r3, r3, #0, #15
{
    4438:	b530      	push	{r4, r5, lr}
	if (start % SPU_BLOCK_SIZE != 0 ||
    443a:	b98b      	cbnz	r3, 4460 <fprotect_area+0x30>
                                               uint32_t       permissions,
                                               bool           lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHREGION[region_id].PERM & SPU_FLASHREGION_PERM_LOCK_Msk));

    p_reg->FLASHREGION[region_id].PERM = permissions         |
    443c:	f240 1515 	movw	r5, #277	; 0x115
    4440:	4c09      	ldr	r4, [pc, #36]	; (4468 <fprotect_area+0x38>)
		length % SPU_BLOCK_SIZE != 0) {
		return -EINVAL;
	}

	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    4442:	0bc9      	lsrs	r1, r1, #15
		nrf_spu_flashregion_set(NRF_SPU_S,
    4444:	f3c0 30c7 	ubfx	r0, r0, #15, #8
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    4448:	4299      	cmp	r1, r3
    444a:	d101      	bne.n	4450 <fprotect_area+0x20>
				NRF_SPU_MEM_PERM_EXECUTE |
				NRF_SPU_MEM_PERM_READ,
				true);
	}

	return 0;
    444c:	2000      	movs	r0, #0
}
    444e:	bd30      	pop	{r4, r5, pc}
		nrf_spu_flashregion_set(NRF_SPU_S,
    4450:	18c2      	adds	r2, r0, r3
    4452:	b2d2      	uxtb	r2, r2
    4454:	f502 72c0 	add.w	r2, r2, #384	; 0x180
    4458:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    445c:	3301      	adds	r3, #1
    445e:	e7f3      	b.n	4448 <fprotect_area+0x18>
		return -EINVAL;
    4460:	f06f 0015 	mvn.w	r0, #21
    4464:	e7f3      	b.n	444e <fprotect_area+0x1e>
    4466:	bf00      	nop
    4468:	50003000 	.word	0x50003000

0000446c <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    446c:	4803      	ldr	r0, [pc, #12]	; (447c <k_sys_fatal_error_handler+0x10>)
    446e:	2145      	movs	r1, #69	; 0x45
{
    4470:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    4472:	f003 fe51 	bl	8118 <z_log_minimal_printk>
		sys_arch_reboot(0);
    4476:	2000      	movs	r0, #0
    4478:	f7fe ff8e 	bl	3398 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    447c:	0000a9ad 	.word	0x0000a9ad

00004480 <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
    4480:	b530      	push	{r4, r5, lr}
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    4482:	6881      	ldr	r1, [r0, #8]
{
    4484:	b085      	sub	sp, #20
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    4486:	3910      	subs	r1, #16
     * returned by boot_magic_off() is the start of magic which is not the
     * start of the flash write boundary and thus writes to the magic will fail.
     * To account for this change, write to magic is first padded with 0xFF
     * before writing to the trailer.
     */
    pad_off = ALIGN_DOWN(off, BOOT_MAX_ALIGN);
    4488:	f021 0407 	bic.w	r4, r1, #7
{
    448c:	4605      	mov	r5, r0

    erased_val = flash_area_erased_val(fap);
    448e:	f003 fe98 	bl	81c2 <flash_area_erased_val>

    memset(&magic[0], erased_val, sizeof(magic));
    4492:	2210      	movs	r2, #16
    erased_val = flash_area_erased_val(fap);
    4494:	4601      	mov	r1, r0
    memset(&magic[0], erased_val, sizeof(magic));
    4496:	4668      	mov	r0, sp
    4498:	f004 f9bd 	bl	8816 <memset>
    memcpy(&magic[BOOT_MAGIC_ALIGN_SIZE - BOOT_MAGIC_SZ], BOOT_IMG_MAGIC, BOOT_MAGIC_SZ);
    449c:	2210      	movs	r2, #16
    449e:	4668      	mov	r0, sp
    44a0:	4906      	ldr	r1, [pc, #24]	; (44bc <boot_write_magic+0x3c>)
    44a2:	f004 f9ad 	bl	8800 <memcpy>

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, pad_off, &magic[0], BOOT_MAGIC_ALIGN_SIZE);
    44a6:	2310      	movs	r3, #16
    44a8:	466a      	mov	r2, sp
    44aa:	4621      	mov	r1, r4
    44ac:	4628      	mov	r0, r5
    44ae:	f003 fe56 	bl	815e <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    44b2:	3800      	subs	r0, #0
    44b4:	bf18      	it	ne
    44b6:	2001      	movne	r0, #1
    44b8:	b005      	add	sp, #20
    44ba:	bd30      	pop	{r4, r5, pc}
    44bc:	00009bfc 	.word	0x00009bfc

000044c0 <boot_read_swap_state>:
{
    44c0:	b530      	push	{r4, r5, lr}
    44c2:	460d      	mov	r5, r1
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    44c4:	6881      	ldr	r1, [r0, #8]
{
    44c6:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    44c8:	2310      	movs	r3, #16
    44ca:	aa02      	add	r2, sp, #8
    44cc:	3910      	subs	r1, #16
{
    44ce:	4604      	mov	r4, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    44d0:	f003 fe30 	bl	8134 <flash_area_read>
    if (rc < 0) {
    44d4:	2800      	cmp	r0, #0
    44d6:	da02      	bge.n	44de <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
    44d8:	2001      	movs	r0, #1
}
    44da:	b007      	add	sp, #28
    44dc:	bd30      	pop	{r4, r5, pc}
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    44de:	2210      	movs	r2, #16
    44e0:	4620      	mov	r0, r4
    44e2:	a902      	add	r1, sp, #8
    44e4:	f004 fd00 	bl	8ee8 <bootutil_buffer_is_erased>
    44e8:	2800      	cmp	r0, #0
    44ea:	d13a      	bne.n	4562 <boot_read_swap_state+0xa2>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
    44ec:	2210      	movs	r2, #16
    44ee:	491e      	ldr	r1, [pc, #120]	; (4568 <boot_read_swap_state+0xa8>)
    44f0:	a802      	add	r0, sp, #8
    44f2:	f004 f95e 	bl	87b2 <memcmp>
    return BOOT_MAGIC_BAD;
    44f6:	2800      	cmp	r0, #0
        state->magic = boot_magic_decode(magic);
    44f8:	bf0c      	ite	eq
    44fa:	2301      	moveq	r3, #1
    44fc:	2302      	movne	r3, #2
        state->magic = BOOT_MAGIC_UNSET;
    44fe:	702b      	strb	r3, [r5, #0]
    off = boot_swap_info_off(fap);
    4500:	4620      	mov	r0, r4
    4502:	f004 fcdd 	bl	8ec0 <boot_swap_info_off>
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    4506:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
    4508:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    450a:	f10d 0207 	add.w	r2, sp, #7
    450e:	4620      	mov	r0, r4
    4510:	f003 fe10 	bl	8134 <flash_area_read>
    if (rc < 0) {
    4514:	2800      	cmp	r0, #0
    4516:	dbdf      	blt.n	44d8 <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    4518:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    451c:	4620      	mov	r0, r4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    451e:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    4522:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    4524:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    4526:	712b      	strb	r3, [r5, #4]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    4528:	2201      	movs	r2, #1
    452a:	f10d 0107 	add.w	r1, sp, #7
    452e:	f004 fcdb 	bl	8ee8 <bootutil_buffer_is_erased>
    4532:	b910      	cbnz	r0, 453a <boot_read_swap_state+0x7a>
    4534:	786b      	ldrb	r3, [r5, #1]
    4536:	2b04      	cmp	r3, #4
    4538:	d903      	bls.n	4542 <boot_read_swap_state+0x82>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    453a:	2301      	movs	r3, #1
    453c:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
    453e:	2300      	movs	r3, #0
    4540:	712b      	strb	r3, [r5, #4]
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    4542:	68a2      	ldr	r2, [r4, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    4544:	4620      	mov	r0, r4
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    4546:	3a18      	subs	r2, #24
    4548:	f022 0207 	bic.w	r2, r2, #7
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    454c:	3a08      	subs	r2, #8
    454e:	1ca9      	adds	r1, r5, #2
    4550:	f004 fcdd 	bl	8f0e <boot_read_flag>
    if (rc) {
    4554:	2800      	cmp	r0, #0
    4556:	d1bf      	bne.n	44d8 <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
    4558:	4620      	mov	r0, r4
    455a:	1ce9      	adds	r1, r5, #3
    455c:	f004 fd30 	bl	8fc0 <boot_read_image_ok>
    4560:	e7bb      	b.n	44da <boot_read_swap_state+0x1a>
    4562:	2303      	movs	r3, #3
    4564:	e7cb      	b.n	44fe <boot_read_swap_state+0x3e>
    4566:	bf00      	nop
    4568:	00009bfc 	.word	0x00009bfc

0000456c <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    456c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    456e:	4605      	mov	r5, r0

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    4570:	4669      	mov	r1, sp
    4572:	2003      	movs	r0, #3
    4574:	f004 fd2a 	bl	8fcc <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
    4578:	4604      	mov	r4, r0
    457a:	b110      	cbz	r0, 4582 <boot_swap_type_multi+0x16>
        return BOOT_SWAP_TYPE_PANIC;
    457c:	20ff      	movs	r0, #255	; 0xff
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    457e:	b004      	add	sp, #16
    4580:	bd70      	pop	{r4, r5, r6, pc}
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    4582:	2009      	movs	r0, #9
    4584:	a902      	add	r1, sp, #8
    4586:	f004 fd21 	bl	8fcc <boot_read_swap_state_by_id>
    if (rc == BOOT_EFLASH) {
    458a:	2801      	cmp	r0, #1
    458c:	d136      	bne.n	45fc <boot_swap_type_multi+0x90>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
    458e:	462a      	mov	r2, r5
    4590:	2149      	movs	r1, #73	; 0x49
    4592:	4828      	ldr	r0, [pc, #160]	; (4634 <boot_swap_type_multi+0xc8>)
    4594:	f003 fdc0 	bl	8118 <z_log_minimal_printk>
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    4598:	4b27      	ldr	r3, [pc, #156]	; (4638 <boot_swap_type_multi+0xcc>)
        secondary_slot.image_num = 0;
    459a:	f88d 400c 	strb.w	r4, [sp, #12]
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    459e:	9302      	str	r3, [sp, #8]
            boot_magic_compatible_check(table->magic_secondary_slot,
    45a0:	2200      	movs	r2, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    45a2:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    45a6:	f89d 6008 	ldrb.w	r6, [sp, #8]
    45aa:	4c24      	ldr	r4, [pc, #144]	; (463c <boot_swap_type_multi+0xd0>)
        if (boot_magic_compatible_check(table->magic_primary_slot,
    45ac:	4629      	mov	r1, r5
    45ae:	7820      	ldrb	r0, [r4, #0]
    45b0:	f004 fc8c 	bl	8ecc <boot_magic_compatible_check>
    45b4:	b348      	cbz	r0, 460a <boot_swap_type_multi+0x9e>
            boot_magic_compatible_check(table->magic_secondary_slot,
    45b6:	4631      	mov	r1, r6
    45b8:	7860      	ldrb	r0, [r4, #1]
    45ba:	f004 fc87 	bl	8ecc <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    45be:	b320      	cbz	r0, 460a <boot_swap_type_multi+0x9e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    45c0:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
    45c2:	2b04      	cmp	r3, #4
    45c4:	d003      	beq.n	45ce <boot_swap_type_multi+0x62>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    45c6:	f89d 1003 	ldrb.w	r1, [sp, #3]
    45ca:	4299      	cmp	r1, r3
    45cc:	d11d      	bne.n	460a <boot_swap_type_multi+0x9e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    45ce:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    45d0:	2b04      	cmp	r3, #4
    45d2:	d003      	beq.n	45dc <boot_swap_type_multi+0x70>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    45d4:	f89d 100b 	ldrb.w	r1, [sp, #11]
    45d8:	4299      	cmp	r1, r3
    45da:	d116      	bne.n	460a <boot_swap_type_multi+0x9e>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    45dc:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    45de:	2b04      	cmp	r3, #4
    45e0:	d10f      	bne.n	4602 <boot_swap_type_multi+0x96>
            BOOT_LOG_INF("Swap type: %s",
    45e2:	7963      	ldrb	r3, [r4, #5]
    45e4:	2b02      	cmp	r3, #2
    45e6:	d11b      	bne.n	4620 <boot_swap_type_multi+0xb4>
    45e8:	4a15      	ldr	r2, [pc, #84]	; (4640 <boot_swap_type_multi+0xd4>)
    45ea:	4816      	ldr	r0, [pc, #88]	; (4644 <boot_swap_type_multi+0xd8>)
    45ec:	2149      	movs	r1, #73	; 0x49
    45ee:	f003 fd93 	bl	8118 <z_log_minimal_printk>
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    45f2:	7960      	ldrb	r0, [r4, #5]
    45f4:	1e83      	subs	r3, r0, #2
    45f6:	2b02      	cmp	r3, #2
    45f8:	d9c1      	bls.n	457e <boot_swap_type_multi+0x12>
    45fa:	e7bf      	b.n	457c <boot_swap_type_multi+0x10>
    } else if (rc) {
    45fc:	2800      	cmp	r0, #0
    45fe:	d0cf      	beq.n	45a0 <boot_swap_type_multi+0x34>
    4600:	e7bc      	b.n	457c <boot_swap_type_multi+0x10>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    4602:	f89d 1002 	ldrb.w	r1, [sp, #2]
    4606:	4299      	cmp	r1, r3
    4608:	d0eb      	beq.n	45e2 <boot_swap_type_multi+0x76>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    460a:	3201      	adds	r2, #1
    460c:	2a03      	cmp	r2, #3
    460e:	f104 0406 	add.w	r4, r4, #6
    4612:	d1cb      	bne.n	45ac <boot_swap_type_multi+0x40>
    BOOT_LOG_INF("Swap type: none");
    4614:	480c      	ldr	r0, [pc, #48]	; (4648 <boot_swap_type_multi+0xdc>)
    4616:	2149      	movs	r1, #73	; 0x49
    4618:	f003 fd7e 	bl	8118 <z_log_minimal_printk>
    return BOOT_SWAP_TYPE_NONE;
    461c:	2001      	movs	r0, #1
    461e:	e7ae      	b.n	457e <boot_swap_type_multi+0x12>
            BOOT_LOG_INF("Swap type: %s",
    4620:	2b03      	cmp	r3, #3
    4622:	d005      	beq.n	4630 <boot_swap_type_multi+0xc4>
    4624:	4a09      	ldr	r2, [pc, #36]	; (464c <boot_swap_type_multi+0xe0>)
    4626:	490a      	ldr	r1, [pc, #40]	; (4650 <boot_swap_type_multi+0xe4>)
    4628:	2b04      	cmp	r3, #4
    462a:	bf08      	it	eq
    462c:	460a      	moveq	r2, r1
    462e:	e7dc      	b.n	45ea <boot_swap_type_multi+0x7e>
    4630:	4a08      	ldr	r2, [pc, #32]	; (4654 <boot_swap_type_multi+0xe8>)
    4632:	e7da      	b.n	45ea <boot_swap_type_multi+0x7e>
    4634:	0000a9f2 	.word	0x0000a9f2
    4638:	03030103 	.word	0x03030103
    463c:	0000aa65 	.word	0x0000aa65
    4640:	0000a9d4 	.word	0x0000a9d4
    4644:	0000aa3d 	.word	0x0000aa3d
    4648:	0000aa50 	.word	0x0000aa50
    464c:	0000a9d9 	.word	0x0000a9d9
    4650:	0000a9eb 	.word	0x0000a9eb
    4654:	0000a9cf 	.word	0x0000a9cf

00004658 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK;
}

void SystemInit(void)
{
    4658:	b508      	push	{r3, lr}
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    465a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    465e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    4662:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  __ASM volatile ("dsb 0xF":::"memory");
    4666:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    466a:	2a09      	cmp	r2, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    466c:	bf01      	itttt	eq
    466e:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    4672:	2200      	moveq	r2, #0
    4674:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    4678:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    467c:	f004 fccb 	bl	9016 <nrf91_errata_14>
    4680:	b128      	cbz	r0, 468e <SystemInit+0x36>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    4682:	2201      	movs	r2, #1
    4684:	4b52      	ldr	r3, [pc, #328]	; (47d0 <SystemInit+0x178>)
    4686:	f8c3 2a38 	str.w	r2, [r3, #2616]	; 0xa38
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    468a:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    468e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    4692:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    4696:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    469a:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    469e:	2a09      	cmp	r2, #9
    46a0:	d105      	bne.n	46ae <SystemInit+0x56>
            {
                switch(var2)
    46a2:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    46a4:	bf1e      	ittt	ne
    46a6:	2201      	movne	r2, #1
    46a8:	4b49      	ldrne	r3, [pc, #292]	; (47d0 <SystemInit+0x178>)
    46aa:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    46ae:	f004 fcb2 	bl	9016 <nrf91_errata_14>
    46b2:	b118      	cbz	r0, 46bc <SystemInit+0x64>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    46b4:	220e      	movs	r2, #14
    46b6:	4b47      	ldr	r3, [pc, #284]	; (47d4 <SystemInit+0x17c>)
    46b8:	f8c3 2ee4 	str.w	r2, [r3, #3812]	; 0xee4
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    46bc:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    46c0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    46c4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    46c8:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    46cc:	2a09      	cmp	r2, #9
    46ce:	d106      	bne.n	46de <SystemInit+0x86>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    46d0:	2200      	movs	r2, #0
    46d2:	4b3f      	ldr	r3, [pc, #252]	; (47d0 <SystemInit+0x178>)
    46d4:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    46d8:	2201      	movs	r2, #1
    46da:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
{
    46de:	2200      	movs	r2, #0
    46e0:	00d3      	lsls	r3, r2, #3
        #endif

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    46e2:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        return false;
    }
    
    bool is_empty_word(uint32_t const volatile * word)
    {
        uint32_t val = *word;
    46e6:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    46ea:	f3bf 8f4f 	dsb	sy
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    46ee:	3101      	adds	r1, #1
    46f0:	d008      	beq.n	4704 <SystemInit+0xac>
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    46f2:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    46f6:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    46f8:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    46fc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    4700:	600b      	str	r3, [r1, #0]
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    4702:	d1ed      	bne.n	46e0 <SystemInit+0x88>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    4704:	4b34      	ldr	r3, [pc, #208]	; (47d8 <SystemInit+0x180>)
    4706:	69da      	ldr	r2, [r3, #28]
    4708:	f3bf 8f4f 	dsb	sy
        if ((HFXOSRC_readout & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    470c:	07d1      	lsls	r1, r2, #31
    470e:	d545      	bpl.n	479c <SystemInit+0x144>
    4710:	f3bf 8f4f 	dsb	sy
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    4714:	4b31      	ldr	r3, [pc, #196]	; (47dc <SystemInit+0x184>)
    4716:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    471a:	2a01      	cmp	r2, #1
    471c:	d1fb      	bne.n	4716 <SystemInit+0xbe>
            NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    471e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    4722:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4726:	2a01      	cmp	r2, #1
    4728:	d1fb      	bne.n	4722 <SystemInit+0xca>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    472a:	4b2b      	ldr	r3, [pc, #172]	; (47d8 <SystemInit+0x180>)
    472c:	69da      	ldr	r2, [r3, #28]
    472e:	f3bf 8f4f 	dsb	sy
        if ((HFXOSRC_readout & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    4732:	07d2      	lsls	r2, r2, #31
    4734:	d50a      	bpl.n	474c <SystemInit+0xf4>
                  uicr_erased_value = NRF_UICR_S->HFXOSRC;
    4736:	69da      	ldr	r2, [r3, #28]
                  uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    4738:	f022 0201 	bic.w	r2, r2, #1
                  NRF_UICR_S->HFXOSRC = uicr_new_value;
    473c:	61da      	str	r2, [r3, #28]
    473e:	f3bf 8f4f 	dsb	sy
                  while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    4742:	4a26      	ldr	r2, [pc, #152]	; (47dc <SystemInit+0x184>)
    4744:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    4748:	2b01      	cmp	r3, #1
    474a:	d1fb      	bne.n	4744 <SystemInit+0xec>
        uint32_t val = *word;
    474c:	4a22      	ldr	r2, [pc, #136]	; (47d8 <SystemInit+0x180>)
    474e:	6a13      	ldr	r3, [r2, #32]
    4750:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    4754:	3301      	adds	r3, #1
    4756:	d10c      	bne.n	4772 <SystemInit+0x11a>
                  uicr_erased_value = NRF_UICR_S->HFXOCNT;
    4758:	6a13      	ldr	r3, [r2, #32]
                  uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    475a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    475e:	f043 0320 	orr.w	r3, r3, #32
                  NRF_UICR_S->HFXOCNT = uicr_new_value;
    4762:	6213      	str	r3, [r2, #32]
    4764:	f3bf 8f4f 	dsb	sy
                  while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    4768:	4a1c      	ldr	r2, [pc, #112]	; (47dc <SystemInit+0x184>)
    476a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    476e:	2b01      	cmp	r3, #1
    4770:	d1fb      	bne.n	476a <SystemInit+0x112>
            NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    4772:	2200      	movs	r2, #0
    4774:	4b19      	ldr	r3, [pc, #100]	; (47dc <SystemInit+0x184>)
    4776:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    477a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    477e:	2a01      	cmp	r2, #1
    4780:	d1fb      	bne.n	477a <SystemInit+0x122>
    4782:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4786:	4916      	ldr	r1, [pc, #88]	; (47e0 <SystemInit+0x188>)
    4788:	4b16      	ldr	r3, [pc, #88]	; (47e4 <SystemInit+0x18c>)
    478a:	68ca      	ldr	r2, [r1, #12]
    478c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4790:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4792:	60cb      	str	r3, [r1, #12]
    4794:	f3bf 8f4f 	dsb	sy
    __NOP();
    4798:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    479a:	e7fd      	b.n	4798 <SystemInit+0x140>
        uint32_t val = *word;
    479c:	6a1b      	ldr	r3, [r3, #32]
    479e:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    47a2:	3301      	adds	r3, #1
    47a4:	d0b4      	beq.n	4710 <SystemInit+0xb8>
        SCB->NSACR |= (3UL << 10);
    47a6:	4b0e      	ldr	r3, [pc, #56]	; (47e0 <SystemInit+0x188>)
    47a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    47ac:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
    47b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
    47b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    47b8:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    47bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    47c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    47c4:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
    47c8:	4b07      	ldr	r3, [pc, #28]	; (47e8 <SystemInit+0x190>)
    47ca:	4a08      	ldr	r2, [pc, #32]	; (47ec <SystemInit+0x194>)
    47cc:	601a      	str	r2, [r3, #0]
}
    47ce:	bd08      	pop	{r3, pc}
    47d0:	50004000 	.word	0x50004000
    47d4:	5003a000 	.word	0x5003a000
    47d8:	00ff8000 	.word	0x00ff8000
    47dc:	50039000 	.word	0x50039000
    47e0:	e000ed00 	.word	0xe000ed00
    47e4:	05fa0004 	.word	0x05fa0004
    47e8:	2000c54c 	.word	0x2000c54c
    47ec:	03d09000 	.word	0x03d09000

000047f0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    47f0:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    47f2:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    47f4:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    47f6:	fab2 f382 	clz	r3, r2
    47fa:	f1c3 031f 	rsb	r3, r3, #31
    47fe:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    4800:	fa05 f403 	lsl.w	r4, r5, r3
    4804:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4808:	e8d0 6fef 	ldaex	r6, [r0]
    480c:	4296      	cmp	r6, r2
    480e:	d104      	bne.n	481a <nrfx_flag32_alloc+0x2a>
    4810:	e8c0 4fec 	stlex	ip, r4, [r0]
    4814:	f1bc 0f00 	cmp.w	ip, #0
    4818:	d1f6      	bne.n	4808 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    481a:	d1eb      	bne.n	47f4 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    481c:	4801      	ldr	r0, [pc, #4]	; (4824 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
    481e:	700b      	strb	r3, [r1, #0]
}
    4820:	bd70      	pop	{r4, r5, r6, pc}
    4822:	bf00      	nop
    4824:	0bad0000 	.word	0x0bad0000

00004828 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    4828:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    482a:	6803      	ldr	r3, [r0, #0]
    482c:	40cb      	lsrs	r3, r1
    482e:	07db      	lsls	r3, r3, #31
    4830:	d410      	bmi.n	4854 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    4832:	2301      	movs	r3, #1
    4834:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    4836:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    4838:	ea43 0102 	orr.w	r1, r3, r2
    483c:	e8d0 4fef 	ldaex	r4, [r0]
    4840:	4294      	cmp	r4, r2
    4842:	d104      	bne.n	484e <nrfx_flag32_free+0x26>
    4844:	e8c0 1fec 	stlex	ip, r1, [r0]
    4848:	f1bc 0f00 	cmp.w	ip, #0
    484c:	d1f6      	bne.n	483c <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    484e:	d1f2      	bne.n	4836 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    4850:	4801      	ldr	r0, [pc, #4]	; (4858 <nrfx_flag32_free+0x30>)
}
    4852:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4854:	4801      	ldr	r0, [pc, #4]	; (485c <nrfx_flag32_free+0x34>)
    4856:	e7fc      	b.n	4852 <nrfx_flag32_free+0x2a>
    4858:	0bad0000 	.word	0x0bad0000
    485c:	0bad0004 	.word	0x0bad0004

00004860 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    4860:	4b04      	ldr	r3, [pc, #16]	; (4874 <nrfx_clock_init+0x14>)
    4862:	791a      	ldrb	r2, [r3, #4]
    4864:	b922      	cbnz	r2, 4870 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    4866:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    4868:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    486a:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    486c:	4802      	ldr	r0, [pc, #8]	; (4878 <nrfx_clock_init+0x18>)
    486e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4870:	4802      	ldr	r0, [pc, #8]	; (487c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4872:	4770      	bx	lr
    4874:	2000e6b8 	.word	0x2000e6b8
    4878:	0bad0000 	.word	0x0bad0000
    487c:	0bad000c 	.word	0x0bad000c

00004880 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4880:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    4884:	b510      	push	{r4, lr}
    4886:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    488a:	b152      	cbz	r2, 48a2 <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    488c:	2000      	movs	r0, #0
    488e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    4892:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    4896:	2201      	movs	r2, #1
    4898:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    489c:	4b11      	ldr	r3, [pc, #68]	; (48e4 <nrfx_power_clock_irq_handler+0x64>)
    489e:	681b      	ldr	r3, [r3, #0]
    48a0:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    48a2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    48a6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    48aa:	b18a      	cbz	r2, 48d0 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    48ac:	2200      	movs	r2, #0
    48ae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    48b2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    48b6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    48ba:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    48be:	f002 0203 	and.w	r2, r2, #3
    48c2:	2a01      	cmp	r2, #1
    48c4:	f04f 0102 	mov.w	r1, #2
    48c8:	d103      	bne.n	48d2 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    48ca:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    48ce:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    48d0:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    48d2:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    48d6:	4b03      	ldr	r3, [pc, #12]	; (48e4 <nrfx_power_clock_irq_handler+0x64>)
    48d8:	2001      	movs	r0, #1
}
    48da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    48de:	681b      	ldr	r3, [r3, #0]
    48e0:	4718      	bx	r3
    48e2:	bf00      	nop
    48e4:	2000e6b8 	.word	0x2000e6b8

000048e8 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    48e8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    48ea:	4801      	ldr	r0, [pc, #4]	; (48f0 <nrfx_dppi_channel_alloc+0x8>)
    48ec:	f7ff bf80 	b.w	47f0 <nrfx_flag32_alloc>
    48f0:	2000c550 	.word	0x2000c550

000048f4 <nrf_gpio_cfg_sense_set>:
    uint32_t cnf = reg->PIN_CNF[pin_number];
    48f4:	4a06      	ldr	r2, [pc, #24]	; (4910 <nrf_gpio_cfg_sense_set+0x1c>)
    *p_pin = pin_number & 0x1F;
    48f6:	f000 001f 	and.w	r0, r0, #31
    48fa:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    48fe:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    cnf &= ~to_update;
    4902:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4906:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    490a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    490e:	4770      	bx	lr
    4910:	50842500 	.word	0x50842500

00004914 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4914:	4b03      	ldr	r3, [pc, #12]	; (4924 <pin_in_use_by_te+0x10>)
    4916:	3008      	adds	r0, #8
    4918:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    491c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4920:	4770      	bx	lr
    4922:	bf00      	nop
    4924:	2000c554 	.word	0x2000c554

00004928 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    4928:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    492a:	4c0d      	ldr	r4, [pc, #52]	; (4960 <call_handler+0x38>)
    492c:	f100 0308 	add.w	r3, r0, #8
    4930:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    4934:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4936:	05da      	lsls	r2, r3, #23
{
    4938:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    493a:	d507      	bpl.n	494c <call_handler+0x24>
    493c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    4940:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4944:	6852      	ldr	r2, [r2, #4]
    4946:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    494a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    494c:	68a3      	ldr	r3, [r4, #8]
    494e:	b12b      	cbz	r3, 495c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4950:	4631      	mov	r1, r6
    4952:	4628      	mov	r0, r5
    4954:	68e2      	ldr	r2, [r4, #12]
    }
}
    4956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    495a:	4718      	bx	r3
}
    495c:	bd70      	pop	{r4, r5, r6, pc}
    495e:	bf00      	nop
    4960:	2000c554 	.word	0x2000c554

00004964 <release_handler>:
{
    4964:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4966:	4a13      	ldr	r2, [pc, #76]	; (49b4 <release_handler+0x50>)
    4968:	3008      	adds	r0, #8
    496a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    496e:	05d9      	lsls	r1, r3, #23
    4970:	d51c      	bpl.n	49ac <release_handler+0x48>
    4972:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    4976:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    497a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    497e:	2000      	movs	r0, #0
    4980:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4984:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    4988:	f413 7f80 	tst.w	r3, #256	; 0x100
    498c:	d003      	beq.n	4996 <release_handler+0x32>
    498e:	f3c3 2343 	ubfx	r3, r3, #9, #4
    4992:	4299      	cmp	r1, r3
    4994:	d00a      	beq.n	49ac <release_handler+0x48>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4996:	3001      	adds	r0, #1
    4998:	2820      	cmp	r0, #32
    499a:	d1f3      	bne.n	4984 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    499c:	2300      	movs	r3, #0
    499e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    49a2:	4805      	ldr	r0, [pc, #20]	; (49b8 <release_handler+0x54>)
}
    49a4:	f85d 4b04 	ldr.w	r4, [sp], #4
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    49a8:	f7ff bf3e 	b.w	4828 <nrfx_flag32_free>
}
    49ac:	f85d 4b04 	ldr.w	r4, [sp], #4
    49b0:	4770      	bx	lr
    49b2:	bf00      	nop
    49b4:	2000c554 	.word	0x2000c554
    49b8:	2000c5a8 	.word	0x2000c5a8

000049bc <pin_handler_trigger_uninit>:
{
    49bc:	b538      	push	{r3, r4, r5, lr}
    49be:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    49c0:	f7ff ffa8 	bl	4914 <pin_in_use_by_te>
    49c4:	4c0b      	ldr	r4, [pc, #44]	; (49f4 <pin_handler_trigger_uninit+0x38>)
    49c6:	f102 0508 	add.w	r5, r2, #8
    49ca:	b160      	cbz	r0, 49e6 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    49cc:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    49ce:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    49d2:	0b5b      	lsrs	r3, r3, #13
    49d4:	009b      	lsls	r3, r3, #2
    49d6:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    49da:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    49de:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    49e2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    49e6:	4610      	mov	r0, r2
    49e8:	f7ff ffbc 	bl	4964 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    49ec:	2300      	movs	r3, #0
    49ee:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    49f2:	bd38      	pop	{r3, r4, r5, pc}
    49f4:	2000c554 	.word	0x2000c554

000049f8 <nrfx_gpiote_input_configure>:
{
    49f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    49fc:	4604      	mov	r4, r0
    49fe:	461d      	mov	r5, r3
    if (p_input_config)
    4a00:	b309      	cbz	r1, 4a46 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4a02:	4f4e      	ldr	r7, [pc, #312]	; (4b3c <nrfx_gpiote_input_configure+0x144>)
    4a04:	f100 0808 	add.w	r8, r0, #8
    4a08:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    4a0c:	07b3      	lsls	r3, r6, #30
    4a0e:	d506      	bpl.n	4a1e <nrfx_gpiote_input_configure+0x26>
    4a10:	f7ff ff80 	bl	4914 <pin_in_use_by_te>
    4a14:	b118      	cbz	r0, 4a1e <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    4a16:	484a      	ldr	r0, [pc, #296]	; (4b40 <nrfx_gpiote_input_configure+0x148>)
}
    4a18:	b002      	add	sp, #8
    4a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4a1e:	4849      	ldr	r0, [pc, #292]	; (4b44 <nrfx_gpiote_input_configure+0x14c>)
    *p_pin = pin_number & 0x1F;
    4a20:	f004 031f 	and.w	r3, r4, #31
    4a24:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4a28:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4a2c:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    4a2e:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4a32:	f026 0602 	bic.w	r6, r6, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4a36:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4a3a:	f046 0601 	orr.w	r6, r6, #1
    reg->PIN_CNF[pin_number] = cnf;
    4a3e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    4a42:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_trigger_config)
    4a46:	b19a      	cbz	r2, 4a70 <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4a48:	4e3c      	ldr	r6, [pc, #240]	; (4b3c <nrfx_gpiote_input_configure+0x144>)
    4a4a:	f104 0708 	add.w	r7, r4, #8
    4a4e:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    4a52:	7813      	ldrb	r3, [r2, #0]
        if (pin_is_output(pin))
    4a54:	f011 0f02 	tst.w	r1, #2
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    4a58:	6850      	ldr	r0, [r2, #4]
        if (pin_is_output(pin))
    4a5a:	d00c      	beq.n	4a76 <nrfx_gpiote_input_configure+0x7e>
            if (use_evt)
    4a5c:	2800      	cmp	r0, #0
    4a5e:	d1da      	bne.n	4a16 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    4a60:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
    4a64:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4a68:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
    4a6c:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
    4a70:	bbd5      	cbnz	r5, 4ae8 <nrfx_gpiote_input_configure+0xf0>
        err = NRFX_SUCCESS;
    4a72:	4835      	ldr	r0, [pc, #212]	; (4b48 <nrfx_gpiote_input_configure+0x150>)
    4a74:	e7d0      	b.n	4a18 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4a76:	f021 0120 	bic.w	r1, r1, #32
    4a7a:	04c9      	lsls	r1, r1, #19
    4a7c:	0cc9      	lsrs	r1, r1, #19
    4a7e:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
    4a82:	2800      	cmp	r0, #0
    4a84:	d0ec      	beq.n	4a60 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    4a86:	2b03      	cmp	r3, #3
    4a88:	d8c5      	bhi.n	4a16 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4a8a:	6852      	ldr	r2, [r2, #4]
    4a8c:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4a90:	4662      	mov	r2, ip
    4a92:	0092      	lsls	r2, r2, #2
    4a94:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    4a98:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    4a9c:	b923      	cbnz	r3, 4aa8 <nrfx_gpiote_input_configure+0xb0>
    p_reg->CONFIG[idx] = 0;
    4a9e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    4aa2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
#endif
}
    4aa6:	e7db      	b.n	4a60 <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4aa8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4aac:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    4ab0:	f020 0003 	bic.w	r0, r0, #3
    4ab4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4ab8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4abc:	f041 0120 	orr.w	r1, r1, #32
    4ac0:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    4ac4:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    4ac8:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4acc:	0220      	lsls	r0, r4, #8
    4ace:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4ad2:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
    4ad6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    4ada:	ea40 000e 	orr.w	r0, r0, lr
    4ade:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    4ae2:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
    4ae6:	e7bb      	b.n	4a60 <nrfx_gpiote_input_configure+0x68>
    release_handler(pin);
    4ae8:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4aea:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    4aee:	f7ff ff39 	bl	4964 <release_handler>
    if (!handler)
    4af2:	2e00      	cmp	r6, #0
    4af4:	d0bd      	beq.n	4a72 <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4af6:	4d11      	ldr	r5, [pc, #68]	; (4b3c <nrfx_gpiote_input_configure+0x144>)
    4af8:	e9d5 2300 	ldrd	r2, r3, [r5]
    4afc:	4296      	cmp	r6, r2
    4afe:	d101      	bne.n	4b04 <nrfx_gpiote_input_configure+0x10c>
    4b00:	429f      	cmp	r7, r3
    4b02:	d018      	beq.n	4b36 <nrfx_gpiote_input_configure+0x13e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4b04:	4811      	ldr	r0, [pc, #68]	; (4b4c <nrfx_gpiote_input_configure+0x154>)
    4b06:	f10d 0107 	add.w	r1, sp, #7
    4b0a:	f7ff fe71 	bl	47f0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    4b0e:	4b0e      	ldr	r3, [pc, #56]	; (4b48 <nrfx_gpiote_input_configure+0x150>)
    4b10:	4298      	cmp	r0, r3
    4b12:	d181      	bne.n	4a18 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    4b14:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
    4b18:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4b1c:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    4b1e:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4b20:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    4b24:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4b28:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    4b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4b30:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    4b34:	e79d      	b.n	4a72 <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4b36:	2200      	movs	r2, #0
    4b38:	e7ee      	b.n	4b18 <nrfx_gpiote_input_configure+0x120>
    4b3a:	bf00      	nop
    4b3c:	2000c554 	.word	0x2000c554
    4b40:	0bad0004 	.word	0x0bad0004
    4b44:	50842500 	.word	0x50842500
    4b48:	0bad0000 	.word	0x0bad0000
    4b4c:	2000c5a8 	.word	0x2000c5a8

00004b50 <nrfx_gpiote_output_configure>:
{
    4b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b52:	4604      	mov	r4, r0
    if (p_config)
    4b54:	b379      	cbz	r1, 4bb6 <nrfx_gpiote_output_configure+0x66>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4b56:	4e3a      	ldr	r6, [pc, #232]	; (4c40 <nrfx_gpiote_output_configure+0xf0>)
    4b58:	f100 0708 	add.w	r7, r0, #8
    4b5c:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    4b60:	07ab      	lsls	r3, r5, #30
    4b62:	d404      	bmi.n	4b6e <nrfx_gpiote_output_configure+0x1e>
    4b64:	f7ff fed6 	bl	4914 <pin_in_use_by_te>
    4b68:	b108      	cbz	r0, 4b6e <nrfx_gpiote_output_configure+0x1e>
{
    4b6a:	4836      	ldr	r0, [pc, #216]	; (4c44 <nrfx_gpiote_output_configure+0xf4>)
}
    4b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4b6e:	f015 0f1c 	tst.w	r5, #28
    4b72:	784b      	ldrb	r3, [r1, #1]
    4b74:	d122      	bne.n	4bbc <nrfx_gpiote_output_configure+0x6c>
    *p_pin = pin_number & 0x1F;
    4b76:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4b7a:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 4c48 <nrfx_gpiote_output_configure+0xf8>
    4b7e:	f100 0e80 	add.w	lr, r0, #128	; 0x80
    4b82:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4b86:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    4b8a:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
    4b8c:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    4b90:	7809      	ldrb	r1, [r1, #0]
    4b92:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    cnf &= ~to_update;
    4b96:	f02c 0c07 	bic.w	ip, ip, #7
    4b9a:	ea43 030c 	orr.w	r3, r3, ip
    4b9e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    4ba2:	4929      	ldr	r1, [pc, #164]	; (4c48 <nrfx_gpiote_output_configure+0xf8>)
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4ba4:	f043 0301 	orr.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
    4ba8:	3080      	adds	r0, #128	; 0x80
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    4baa:	f045 0503 	orr.w	r5, r5, #3
    4bae:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    4bb2:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    4bb6:	b922      	cbnz	r2, 4bc2 <nrfx_gpiote_output_configure+0x72>
    return NRFX_SUCCESS;
    4bb8:	4824      	ldr	r0, [pc, #144]	; (4c4c <nrfx_gpiote_output_configure+0xfc>)
    4bba:	e7d7      	b.n	4b6c <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4bbc:	2b01      	cmp	r3, #1
    4bbe:	d1da      	bne.n	4b76 <nrfx_gpiote_output_configure+0x26>
    4bc0:	e7d3      	b.n	4b6a <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4bc2:	4e1f      	ldr	r6, [pc, #124]	; (4c40 <nrfx_gpiote_output_configure+0xf0>)
    4bc4:	f104 0708 	add.w	r7, r4, #8
    4bc8:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4bcc:	0783      	lsls	r3, r0, #30
    4bce:	d5cc      	bpl.n	4b6a <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    4bd0:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    4bd4:	2300      	movs	r3, #0
    4bd6:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4bd8:	f020 0020 	bic.w	r0, r0, #32
    4bdc:	0089      	lsls	r1, r1, #2
    4bde:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    4be2:	04c0      	lsls	r0, r0, #19
    4be4:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    4be8:	0cc0      	lsrs	r0, r0, #19
    4bea:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4bee:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    4bf2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    4bf6:	7855      	ldrb	r5, [r2, #1]
    4bf8:	2d00      	cmp	r5, #0
    4bfa:	d0dd      	beq.n	4bb8 <nrfx_gpiote_output_configure+0x68>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4bfc:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    4c00:	7892      	ldrb	r2, [r2, #2]
    4c02:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    4c06:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4c0a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4c0e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    4c12:	0223      	lsls	r3, r4, #8
    4c14:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4c18:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4c1a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4c1e:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4c22:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4c24:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4c26:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4c2a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4c2e:	4313      	orrs	r3, r2
    4c30:	f040 0020 	orr.w	r0, r0, #32
    4c34:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4c38:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4c3c:	e7bc      	b.n	4bb8 <nrfx_gpiote_output_configure+0x68>
    4c3e:	bf00      	nop
    4c40:	2000c554 	.word	0x2000c554
    4c44:	0bad0004 	.word	0x0bad0004
    4c48:	50842500 	.word	0x50842500
    4c4c:	0bad0000 	.word	0x0bad0000

00004c50 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    4c50:	4b01      	ldr	r3, [pc, #4]	; (4c58 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    4c52:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    4c56:	4770      	bx	lr
    4c58:	2000c554 	.word	0x2000c554

00004c5c <nrfx_gpiote_channel_get>:
{
    4c5c:	b508      	push	{r3, lr}
    4c5e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4c60:	f7ff fe58 	bl	4914 <pin_in_use_by_te>
    4c64:	b138      	cbz	r0, 4c76 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4c66:	4b05      	ldr	r3, [pc, #20]	; (4c7c <nrfx_gpiote_channel_get+0x20>)
    4c68:	3208      	adds	r2, #8
    4c6a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    4c6e:	4804      	ldr	r0, [pc, #16]	; (4c80 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4c70:	0b5b      	lsrs	r3, r3, #13
    4c72:	700b      	strb	r3, [r1, #0]
}
    4c74:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4c76:	4803      	ldr	r0, [pc, #12]	; (4c84 <nrfx_gpiote_channel_get+0x28>)
    4c78:	e7fc      	b.n	4c74 <nrfx_gpiote_channel_get+0x18>
    4c7a:	bf00      	nop
    4c7c:	2000c554 	.word	0x2000c554
    4c80:	0bad0000 	.word	0x0bad0000
    4c84:	0bad0004 	.word	0x0bad0004

00004c88 <nrfx_gpiote_init>:
{
    4c88:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4c8a:	4c0f      	ldr	r4, [pc, #60]	; (4cc8 <nrfx_gpiote_init+0x40>)
    4c8c:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    4c90:	b9bd      	cbnz	r5, 4cc2 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    4c92:	2240      	movs	r2, #64	; 0x40
    4c94:	4629      	mov	r1, r5
    4c96:	f104 0010 	add.w	r0, r4, #16
    4c9a:	f003 fdbc 	bl	8816 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    4c9e:	200d      	movs	r0, #13
    4ca0:	f7fe f80c 	bl	2cbc <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4ca4:	4b09      	ldr	r3, [pc, #36]	; (4ccc <nrfx_gpiote_init+0x44>)
    return err_code;
    4ca6:	480a      	ldr	r0, [pc, #40]	; (4cd0 <nrfx_gpiote_init+0x48>)
    4ca8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    4cac:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    4cb0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4cb4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4cb8:	2301      	movs	r3, #1
    4cba:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4cbe:	6563      	str	r3, [r4, #84]	; 0x54
}
    4cc0:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    4cc2:	4804      	ldr	r0, [pc, #16]	; (4cd4 <nrfx_gpiote_init+0x4c>)
    4cc4:	e7fc      	b.n	4cc0 <nrfx_gpiote_init+0x38>
    4cc6:	bf00      	nop
    4cc8:	2000c554 	.word	0x2000c554
    4ccc:	5000d000 	.word	0x5000d000
    4cd0:	0bad0000 	.word	0x0bad0000
    4cd4:	0bad0005 	.word	0x0bad0005

00004cd8 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4cd8:	4b03      	ldr	r3, [pc, #12]	; (4ce8 <nrfx_gpiote_is_init+0x10>)
    4cda:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    4cde:	3800      	subs	r0, #0
    4ce0:	bf18      	it	ne
    4ce2:	2001      	movne	r0, #1
    4ce4:	4770      	bx	lr
    4ce6:	bf00      	nop
    4ce8:	2000c554 	.word	0x2000c554

00004cec <nrfx_gpiote_channel_free>:
{
    4cec:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4cee:	4801      	ldr	r0, [pc, #4]	; (4cf4 <nrfx_gpiote_channel_free+0x8>)
    4cf0:	f7ff bd9a 	b.w	4828 <nrfx_flag32_free>
    4cf4:	2000c5a4 	.word	0x2000c5a4

00004cf8 <nrfx_gpiote_channel_alloc>:
{
    4cf8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4cfa:	4801      	ldr	r0, [pc, #4]	; (4d00 <nrfx_gpiote_channel_alloc+0x8>)
    4cfc:	f7ff bd78 	b.w	47f0 <nrfx_flag32_alloc>
    4d00:	2000c5a4 	.word	0x2000c5a4

00004d04 <nrfx_gpiote_trigger_enable>:
{
    4d04:	4602      	mov	r2, r0
    4d06:	b510      	push	{r4, lr}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4d08:	f7ff fe04 	bl	4914 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4d0c:	4b1c      	ldr	r3, [pc, #112]	; (4d80 <nrfx_gpiote_trigger_enable+0x7c>)
    4d0e:	f102 0408 	add.w	r4, r2, #8
    4d12:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4d16:	b1e0      	cbz	r0, 4d52 <nrfx_gpiote_trigger_enable+0x4e>
    4d18:	f013 0402 	ands.w	r4, r3, #2
    4d1c:	d119      	bne.n	4d52 <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4d1e:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    4d20:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    4d22:	f102 40a0 	add.w	r0, r2, #1342177280	; 0x50000000
    4d26:	f500 4051 	add.w	r0, r0, #53504	; 0xd100
    4d2a:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4d2e:	6004      	str	r4, [r0, #0]
    4d30:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    4d34:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4d36:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4d3a:	f040 0001 	orr.w	r0, r0, #1
    4d3e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    4d42:	b129      	cbz	r1, 4d50 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    4d44:	2201      	movs	r2, #1
    4d46:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    4d4a:	4a0e      	ldr	r2, [pc, #56]	; (4d84 <nrfx_gpiote_trigger_enable+0x80>)
    4d4c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4d50:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4d52:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    4d56:	2b04      	cmp	r3, #4
    4d58:	d00e      	beq.n	4d78 <nrfx_gpiote_trigger_enable+0x74>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    4d5a:	2b05      	cmp	r3, #5
    4d5c:	d00e      	beq.n	4d7c <nrfx_gpiote_trigger_enable+0x78>
    return p_reg->IN;
    4d5e:	4b0a      	ldr	r3, [pc, #40]	; (4d88 <nrfx_gpiote_trigger_enable+0x84>)
    4d60:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
    4d62:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4d66:	40d9      	lsrs	r1, r3
    4d68:	f001 0101 	and.w	r1, r1, #1
    4d6c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4d6e:	4610      	mov	r0, r2
}
    4d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4d74:	f7ff bdbe 	b.w	48f4 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    4d78:	2103      	movs	r1, #3
    4d7a:	e7f8      	b.n	4d6e <nrfx_gpiote_trigger_enable+0x6a>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    4d7c:	2102      	movs	r1, #2
    4d7e:	e7f6      	b.n	4d6e <nrfx_gpiote_trigger_enable+0x6a>
    4d80:	2000c554 	.word	0x2000c554
    4d84:	5000d000 	.word	0x5000d000
    4d88:	50842500 	.word	0x50842500

00004d8c <nrfx_gpiote_trigger_disable>:
{
    4d8c:	b508      	push	{r3, lr}
    4d8e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4d90:	f7ff fdc0 	bl	4914 <pin_in_use_by_te>
    4d94:	b1c0      	cbz	r0, 4dc8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4d96:	4b0f      	ldr	r3, [pc, #60]	; (4dd4 <nrfx_gpiote_trigger_disable+0x48>)
    4d98:	f102 0108 	add.w	r1, r2, #8
    4d9c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4da0:	0799      	lsls	r1, r3, #30
    4da2:	d411      	bmi.n	4dc8 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4da4:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4da6:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4da8:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    4daa:	490b      	ldr	r1, [pc, #44]	; (4dd8 <nrfx_gpiote_trigger_disable+0x4c>)
    4dac:	009b      	lsls	r3, r3, #2
    4dae:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    4db2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4db6:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    4dba:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4dbe:	f022 0203 	bic.w	r2, r2, #3
    4dc2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4dc6:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4dc8:	2100      	movs	r1, #0
}
    4dca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4dce:	4610      	mov	r0, r2
    4dd0:	f7ff bd90 	b.w	48f4 <nrf_gpio_cfg_sense_set>
    4dd4:	2000c554 	.word	0x2000c554
    4dd8:	5000d000 	.word	0x5000d000

00004ddc <nrfx_gpiote_pin_uninit>:
{
    4ddc:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4dde:	4b0c      	ldr	r3, [pc, #48]	; (4e10 <nrfx_gpiote_pin_uninit+0x34>)
    4de0:	f100 0208 	add.w	r2, r0, #8
    4de4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    4de8:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4dea:	07db      	lsls	r3, r3, #31
    4dec:	d50d      	bpl.n	4e0a <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
    4dee:	f7ff ffcd 	bl	4d8c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    4df2:	4620      	mov	r0, r4
    4df4:	f7ff fde2 	bl	49bc <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    4df8:	2202      	movs	r2, #2
    4dfa:	4b06      	ldr	r3, [pc, #24]	; (4e14 <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
    4dfc:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
    4e00:	3480      	adds	r4, #128	; 0x80
    4e02:	4805      	ldr	r0, [pc, #20]	; (4e18 <nrfx_gpiote_pin_uninit+0x3c>)
    4e04:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
    4e08:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4e0a:	4804      	ldr	r0, [pc, #16]	; (4e1c <nrfx_gpiote_pin_uninit+0x40>)
    4e0c:	e7fc      	b.n	4e08 <nrfx_gpiote_pin_uninit+0x2c>
    4e0e:	bf00      	nop
    4e10:	2000c554 	.word	0x2000c554
    4e14:	50842500 	.word	0x50842500
    4e18:	0bad0000 	.word	0x0bad0000
    4e1c:	0bad0004 	.word	0x0bad0004

00004e20 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    4e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    4e24:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    4e26:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4e28:	462c      	mov	r4, r5
{
    4e2a:	4b4d      	ldr	r3, [pc, #308]	; (4f60 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
    4e2c:	484d      	ldr	r0, [pc, #308]	; (4f64 <nrfx_gpiote_irq_handler+0x144>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4e2e:	494e      	ldr	r1, [pc, #312]	; (4f68 <nrfx_gpiote_irq_handler+0x148>)
{
    4e30:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4e32:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4e34:	b136      	cbz	r6, 4e44 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    4e36:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    4e3a:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4e3c:	bf1e      	ittt	ne
    4e3e:	601c      	strne	r4, [r3, #0]
    4e40:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    4e42:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4e44:	3304      	adds	r3, #4
    4e46:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    4e48:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4e4c:	d1f1      	bne.n	4e32 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4e4e:	4f45      	ldr	r7, [pc, #276]	; (4f64 <nrfx_gpiote_irq_handler+0x144>)
    4e50:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    4e54:	b193      	cbz	r3, 4e7c <nrfx_gpiote_irq_handler+0x5c>
        *p_masks = gpio_regs[i]->LATCH;
    4e56:	4e45      	ldr	r6, [pc, #276]	; (4f6c <nrfx_gpiote_irq_handler+0x14c>)
    4e58:	6a33      	ldr	r3, [r6, #32]
    4e5a:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    4e5c:	6233      	str	r3, [r6, #32]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    4e5e:	f04f 0a01 	mov.w	sl, #1
    4e62:	f10d 090c 	add.w	r9, sp, #12
            while (latch[i])
    4e66:	9803      	ldr	r0, [sp, #12]
    4e68:	b970      	cbnz	r0, 4e88 <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4e6a:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
    4e6e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    4e72:	6a33      	ldr	r3, [r6, #32]
    4e74:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    4e76:	6233      	str	r3, [r6, #32]
        if (latch[port_idx])
    4e78:	2b00      	cmp	r3, #0
    4e7a:	d1f0      	bne.n	4e5e <nrfx_gpiote_irq_handler+0x3e>
        mask &= ~NRFX_BIT(ch);
    4e7c:	2401      	movs	r4, #1
    while (mask)
    4e7e:	2d00      	cmp	r5, #0
    4e80:	d156      	bne.n	4f30 <nrfx_gpiote_irq_handler+0x110>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    4e82:	b005      	add	sp, #20
    4e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    4e88:	fa90 fba0 	rbit	fp, r0
    4e8c:	fabb fb8b 	clz	fp, fp
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4e90:	4a37      	ldr	r2, [pc, #220]	; (4f70 <nrfx_gpiote_irq_handler+0x150>)
    4e92:	f10b 0308 	add.w	r3, fp, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    4e96:	ea4f 0cdb 	mov.w	ip, fp, lsr #3
    4e9a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
    4e9e:	f00b 0407 	and.w	r4, fp, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4ea2:	f819 300c 	ldrb.w	r3, [r9, ip]
    4ea6:	fa0a f404 	lsl.w	r4, sl, r4
    4eaa:	ea23 0304 	bic.w	r3, r3, r4
    4eae:	f809 300c 	strb.w	r3, [r9, ip]
    4eb2:	eb06 038b 	add.w	r3, r6, fp, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4eb6:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    4eba:	f3c1 0282 	ubfx	r2, r1, #2, #3
    if (is_level(trigger))
    4ebe:	06c9      	lsls	r1, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4ec0:	4690      	mov	r8, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4ec2:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
    4ec6:	d518      	bpl.n	4efa <nrfx_gpiote_irq_handler+0xda>
        call_handler(pin, trigger);
    4ec8:	4611      	mov	r1, r2
    4eca:	4658      	mov	r0, fp
    4ecc:	9301      	str	r3, [sp, #4]
    4ece:	f7ff fd2b 	bl	4928 <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4ed2:	9b01      	ldr	r3, [sp, #4]
    4ed4:	b2e4      	uxtb	r4, r4
    4ed6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4eda:	f3c3 4301 	ubfx	r3, r3, #16, #2
    4ede:	429c      	cmp	r4, r3
    4ee0:	d107      	bne.n	4ef2 <nrfx_gpiote_irq_handler+0xd2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4ee2:	2100      	movs	r1, #0
    4ee4:	4658      	mov	r0, fp
    4ee6:	f7ff fd05 	bl	48f4 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    4eea:	4621      	mov	r1, r4
    4eec:	4658      	mov	r0, fp
    4eee:	f7ff fd01 	bl	48f4 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    4ef2:	fa0a f00b 	lsl.w	r0, sl, fp
    4ef6:	6230      	str	r0, [r6, #32]
}
    4ef8:	e7b5      	b.n	4e66 <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4efa:	2c02      	cmp	r4, #2
    4efc:	d10c      	bne.n	4f18 <nrfx_gpiote_irq_handler+0xf8>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4efe:	2103      	movs	r1, #3
    4f00:	4658      	mov	r0, fp
    4f02:	f7ff fcf7 	bl	48f4 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4f06:	f008 0305 	and.w	r3, r8, #5
    4f0a:	2b01      	cmp	r3, #1
    4f0c:	d1f1      	bne.n	4ef2 <nrfx_gpiote_irq_handler+0xd2>
            call_handler(pin, trigger);
    4f0e:	4641      	mov	r1, r8
    4f10:	4658      	mov	r0, fp
    4f12:	f7ff fd09 	bl	4928 <call_handler>
    4f16:	e7ec      	b.n	4ef2 <nrfx_gpiote_irq_handler+0xd2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4f18:	2102      	movs	r1, #2
    4f1a:	4658      	mov	r0, fp
    4f1c:	9201      	str	r2, [sp, #4]
    4f1e:	f7ff fce9 	bl	48f4 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4f22:	9a01      	ldr	r2, [sp, #4]
    4f24:	2a03      	cmp	r2, #3
    4f26:	d0f2      	beq.n	4f0e <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4f28:	2c03      	cmp	r4, #3
    4f2a:	d1e2      	bne.n	4ef2 <nrfx_gpiote_irq_handler+0xd2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4f2c:	428a      	cmp	r2, r1
    4f2e:	e7ed      	b.n	4f0c <nrfx_gpiote_irq_handler+0xec>
        uint32_t ch = NRF_CTZ(mask);
    4f30:	fa95 f3a5 	rbit	r3, r5
    4f34:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    4f38:	fa04 f203 	lsl.w	r2, r4, r3
    4f3c:	009b      	lsls	r3, r3, #2
    4f3e:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    4f42:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4f46:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    4f4a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    4f4e:	f3c0 2004 	ubfx	r0, r0, #8, #5
    4f52:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    4f56:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    4f5a:	f7ff fce5 	bl	4928 <call_handler>
    4f5e:	e78e      	b.n	4e7e <nrfx_gpiote_irq_handler+0x5e>
    4f60:	5000d100 	.word	0x5000d100
    4f64:	5000d000 	.word	0x5000d000
    4f68:	5000d120 	.word	0x5000d120
    4f6c:	50842500 	.word	0x50842500
    4f70:	2000c554 	.word	0x2000c554

00004f74 <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
    4f74:	2200      	movs	r2, #0
    4f76:	4b03      	ldr	r3, [pc, #12]	; (4f84 <nvmc_readonly_mode_set+0x10>)
    4f78:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    4f7c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    4f80:	4770      	bx	lr
    4f82:	bf00      	nop
    4f84:	50039000 	.word	0x50039000

00004f88 <nvmc_word_write>:
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
    4f88:	4a04      	ldr	r2, [pc, #16]	; (4f9c <nvmc_word_write+0x14>)
    4f8a:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    4f8e:	07db      	lsls	r3, r3, #31
    4f90:	d5fb      	bpl.n	4f8a <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
    4f92:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    4f94:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    4f98:	4770      	bx	lr
    4f9a:	bf00      	nop
    4f9c:	50039000 	.word	0x50039000

00004fa0 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    4fa0:	b508      	push	{r3, lr}
    return !(addr % flash_page_size_get());
    4fa2:	f3c0 030b 	ubfx	r3, r0, #0, #12
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    4fa6:	b983      	cbnz	r3, 4fca <nrfx_nvmc_page_erase+0x2a>
    p_reg->CONFIGNS = (uint32_t)mode;
    4fa8:	2202      	movs	r2, #2
    4faa:	4b09      	ldr	r3, [pc, #36]	; (4fd0 <nrfx_nvmc_page_erase+0x30>)
    4fac:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    4fb0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    4fb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4fb8:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    4fba:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    4fbe:	07d2      	lsls	r2, r2, #31
    4fc0:	d5fb      	bpl.n	4fba <nrfx_nvmc_page_erase+0x1a>
    {}
    nvmc_readonly_mode_set();
    4fc2:	f7ff ffd7 	bl	4f74 <nvmc_readonly_mode_set>

    return NRFX_SUCCESS;
    4fc6:	4803      	ldr	r0, [pc, #12]	; (4fd4 <nrfx_nvmc_page_erase+0x34>)
}
    4fc8:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
    4fca:	4803      	ldr	r0, [pc, #12]	; (4fd8 <nrfx_nvmc_page_erase+0x38>)
    4fcc:	e7fc      	b.n	4fc8 <nrfx_nvmc_page_erase+0x28>
    4fce:	bf00      	nop
    4fd0:	50039000 	.word	0x50039000
    4fd4:	0bad0000 	.word	0x0bad0000
    4fd8:	0bad000a 	.word	0x0bad000a

00004fdc <nrfx_nvmc_word_write>:
    p_reg->CONFIGNS = (uint32_t)mode;
    4fdc:	2201      	movs	r2, #1

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    4fde:	b508      	push	{r3, lr}
    4fe0:	4b05      	ldr	r3, [pc, #20]	; (4ff8 <nrfx_nvmc_word_write+0x1c>)
    4fe2:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    4fe6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
    4fea:	f7ff ffcd 	bl	4f88 <nvmc_word_write>

    nvmc_readonly_mode_set();
}
    4fee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nvmc_readonly_mode_set();
    4ff2:	f7ff bfbf 	b.w	4f74 <nvmc_readonly_mode_set>
    4ff6:	bf00      	nop
    4ff8:	50039000 	.word	0x50039000

00004ffc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4ffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4ffe:	4605      	mov	r5, r0
    5000:	460e      	mov	r6, r1
	__asm__ volatile(
    5002:	f04f 0320 	mov.w	r3, #32
    5006:	f3ef 8711 	mrs	r7, BASEPRI
    500a:	f383 8812 	msr	BASEPRI_MAX, r3
    500e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    5012:	f000 fdd3 	bl	5bbc <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    5016:	2200      	movs	r2, #0
    5018:	2d04      	cmp	r5, #4
    501a:	bf98      	it	ls
    501c:	4b18      	ldrls	r3, [pc, #96]	; (5080 <z_fatal_error+0x84>)
    501e:	4604      	mov	r4, r0
	switch (reason) {
    5020:	bf94      	ite	ls
    5022:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
    5026:	4b17      	ldrhi	r3, [pc, #92]	; (5084 <z_fatal_error+0x88>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    5028:	9200      	str	r2, [sp, #0]
    502a:	2145      	movs	r1, #69	; 0x45
    502c:	462a      	mov	r2, r5
    502e:	4816      	ldr	r0, [pc, #88]	; (5088 <z_fatal_error+0x8c>)
    5030:	f003 f872 	bl	8118 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    5034:	b13e      	cbz	r6, 5046 <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    5036:	69f3      	ldr	r3, [r6, #28]
    5038:	f3c3 0308 	ubfx	r3, r3, #0, #9
    503c:	b11b      	cbz	r3, 5046 <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
    503e:	2145      	movs	r1, #69	; 0x45
    5040:	4812      	ldr	r0, [pc, #72]	; (508c <z_fatal_error+0x90>)
    5042:	f003 f869 	bl	8118 <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    5046:	b134      	cbz	r4, 5056 <z_fatal_error+0x5a>
    5048:	4620      	mov	r0, r4
    504a:	f004 f90d 	bl	9268 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    504e:	4603      	mov	r3, r0
    5050:	b108      	cbz	r0, 5056 <z_fatal_error+0x5a>
    5052:	7802      	ldrb	r2, [r0, #0]
    5054:	b902      	cbnz	r2, 5058 <z_fatal_error+0x5c>
		thread_name = "unknown";
    5056:	4b0e      	ldr	r3, [pc, #56]	; (5090 <z_fatal_error+0x94>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    5058:	4622      	mov	r2, r4
    505a:	2145      	movs	r1, #69	; 0x45
    505c:	480d      	ldr	r0, [pc, #52]	; (5094 <z_fatal_error+0x98>)
    505e:	f003 f85b 	bl	8118 <z_log_minimal_printk>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    5062:	4631      	mov	r1, r6
    5064:	4628      	mov	r0, r5
    5066:	f7ff fa01 	bl	446c <k_sys_fatal_error_handler>
	__asm__ volatile(
    506a:	f387 8811 	msr	BASEPRI, r7
    506e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5072:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5074:	b003      	add	sp, #12
    5076:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    507a:	f7fe b9d7 	b.w	342c <z_impl_k_thread_abort>
    507e:	bf00      	nop
    5080:	00009a5c 	.word	0x00009a5c
    5084:	0000aa77 	.word	0x0000aa77
    5088:	0000aa8d 	.word	0x0000aa8d
    508c:	0000aaba 	.word	0x0000aaba
    5090:	0000aa85 	.word	0x0000aa85
    5094:	0000aae0 	.word	0x0000aae0

00005098 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5098:	4b0f      	ldr	r3, [pc, #60]	; (50d8 <z_sys_init_run_level+0x40>)
{
    509a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    509c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    50a0:	3001      	adds	r0, #1
    50a2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    50a6:	42a6      	cmp	r6, r4
    50a8:	d800      	bhi.n	50ac <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    50aa:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    50ac:	e9d4 3500 	ldrd	r3, r5, [r4]
    50b0:	4628      	mov	r0, r5
    50b2:	4798      	blx	r3
		if (dev != NULL) {
    50b4:	b16d      	cbz	r5, 50d2 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
    50b6:	b138      	cbz	r0, 50c8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    50b8:	2800      	cmp	r0, #0
    50ba:	bfb8      	it	lt
    50bc:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    50be:	28ff      	cmp	r0, #255	; 0xff
    50c0:	bfa8      	it	ge
    50c2:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    50c4:	68eb      	ldr	r3, [r5, #12]
    50c6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    50c8:	68ea      	ldr	r2, [r5, #12]
    50ca:	7853      	ldrb	r3, [r2, #1]
    50cc:	f043 0301 	orr.w	r3, r3, #1
    50d0:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    50d2:	3408      	adds	r4, #8
    50d4:	e7e7      	b.n	50a6 <z_sys_init_run_level+0xe>
    50d6:	bf00      	nop
    50d8:	00009a70 	.word	0x00009a70

000050dc <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    50dc:	2201      	movs	r2, #1
{
    50de:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    50e0:	4b09      	ldr	r3, [pc, #36]	; (5108 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    50e2:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    50e4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    50e6:	f7ff ffd7 	bl	5098 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    50ea:	f000 ff29 	bl	5f40 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    50ee:	2004      	movs	r0, #4
    50f0:	f7ff ffd2 	bl	5098 <z_sys_init_run_level>

	z_init_static_threads();
    50f4:	f000 f926 	bl	5344 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    50f8:	f7fb f9aa 	bl	450 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    50fc:	4a03      	ldr	r2, [pc, #12]	; (510c <bg_thread_main+0x30>)
    50fe:	7b13      	ldrb	r3, [r2, #12]
    5100:	f023 0301 	bic.w	r3, r3, #1
    5104:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    5106:	bd08      	pop	{r3, pc}
    5108:	2000f27c 	.word	0x2000f27c
    510c:	2000c758 	.word	0x2000c758

00005110 <z_bss_zero>:
{
    5110:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    5112:	4803      	ldr	r0, [pc, #12]	; (5120 <z_bss_zero+0x10>)
    5114:	4a03      	ldr	r2, [pc, #12]	; (5124 <z_bss_zero+0x14>)
    5116:	2100      	movs	r1, #0
    5118:	1a12      	subs	r2, r2, r0
    511a:	f004 f84e 	bl	91ba <z_early_memset>
}
    511e:	bd08      	pop	{r3, pc}
    5120:	2000c678 	.word	0x2000c678
    5124:	2000f280 	.word	0x2000f280

00005128 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
    5128:	23c0      	movs	r3, #192	; 0xc0
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    512a:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
    512c:	4e13      	ldr	r6, [pc, #76]	; (517c <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
    512e:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
    5130:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
    5134:	2300      	movs	r3, #0
{
    5136:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    5138:	e9cd 2304 	strd	r2, r3, [sp, #16]
    513c:	220f      	movs	r2, #15
    513e:	9301      	str	r3, [sp, #4]
    5140:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5144:	231c      	movs	r3, #28
	z_setup_new_thread(thread, stack,
    5146:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    514a:	4d0d      	ldr	r5, [pc, #52]	; (5180 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
    514c:	490d      	ldr	r1, [pc, #52]	; (5184 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    514e:	fb03 5500 	mla	r5, r3, r0, r5
{
    5152:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    5154:	fb02 1100 	mla	r1, r2, r0, r1
    5158:	4b0b      	ldr	r3, [pc, #44]	; (5188 <z_init_cpu+0x60>)
    515a:	4630      	mov	r0, r6
    515c:	9500      	str	r5, [sp, #0]
    515e:	f000 f8c1 	bl	52e4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5162:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
    5164:	752c      	strb	r4, [r5, #20]
    5166:	f023 0304 	bic.w	r3, r3, #4
    516a:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    516c:	4b07      	ldr	r3, [pc, #28]	; (518c <z_init_cpu+0x64>)
    516e:	3401      	adds	r4, #1
    5170:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    5174:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    5176:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    5178:	b006      	add	sp, #24
    517a:	bd70      	pop	{r4, r5, r6, pc}
    517c:	2000c698 	.word	0x2000c698
    5180:	2000e6c0 	.word	0x2000e6c0
    5184:	2000fa80 	.word	0x2000fa80
    5188:	0000926d 	.word	0x0000926d
    518c:	2000f280 	.word	0x2000f280

00005190 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    5190:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    5192:	2000      	movs	r0, #0
{
    5194:	b0b6      	sub	sp, #216	; 0xd8
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    5196:	f7ff ff7f 	bl	5098 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    519a:	4b2b      	ldr	r3, [pc, #172]	; (5248 <z_cstart+0xb8>)
	uint32_t msp =
    519c:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    51a0:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    51a4:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    51a8:	2400      	movs	r4, #0
    51aa:	23e0      	movs	r3, #224	; 0xe0
    51ac:	4d27      	ldr	r5, [pc, #156]	; (524c <z_cstart+0xbc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    51ae:	4e28      	ldr	r6, [pc, #160]	; (5250 <z_cstart+0xc0>)
    51b0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    51b4:	77ec      	strb	r4, [r5, #31]
    51b6:	762c      	strb	r4, [r5, #24]
    51b8:	766c      	strb	r4, [r5, #25]
    51ba:	76ac      	strb	r4, [r5, #26]
    51bc:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    51c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    51c2:	4f24      	ldr	r7, [pc, #144]	; (5254 <z_cstart+0xc4>)
    51c4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    51c8:	626b      	str	r3, [r5, #36]	; 0x24
    51ca:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    51ce:	f7fe f891 	bl	32f4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    51d2:	f7fd fcef 	bl	2bb4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    51d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    51da:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    51dc:	62eb      	str	r3, [r5, #44]	; 0x2c
	dummy_thread->base.user_options = K_ESSENTIAL;
    51de:	f240 1301 	movw	r3, #257	; 0x101
    51e2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    51e6:	ab06      	add	r3, sp, #24
    51e8:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    51ea:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    51ee:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    51f0:	f003 ffd7 	bl	91a2 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    51f4:	2001      	movs	r0, #1
    51f6:	f7ff ff4f 	bl	5098 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    51fa:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    51fc:	4d16      	ldr	r5, [pc, #88]	; (5258 <z_cstart+0xc8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    51fe:	f7ff ff4b 	bl	5098 <z_sys_init_run_level>
	z_sched_init();
    5202:	f000 fc33 	bl	5a6c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5206:	4b15      	ldr	r3, [pc, #84]	; (525c <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
    5208:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    520a:	9305      	str	r3, [sp, #20]
    520c:	2301      	movs	r3, #1
    520e:	4914      	ldr	r1, [pc, #80]	; (5260 <z_cstart+0xd0>)
    5210:	f44f 5220 	mov.w	r2, #10240	; 0x2800
    5214:	e9cd 4303 	strd	r4, r3, [sp, #12]
    5218:	4628      	mov	r0, r5
    521a:	463b      	mov	r3, r7
    521c:	e9cd 4401 	strd	r4, r4, [sp, #4]
    5220:	9400      	str	r4, [sp, #0]
    5222:	f000 f85f 	bl	52e4 <z_setup_new_thread>
    5226:	4606      	mov	r6, r0
    5228:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    522a:	4628      	mov	r0, r5
    522c:	f022 0204 	bic.w	r2, r2, #4
    5230:	736a      	strb	r2, [r5, #13]
    5232:	f004 f89e 	bl	9372 <z_ready_thread>
	z_init_cpu(0);
    5236:	4620      	mov	r0, r4
    5238:	f7ff ff76 	bl	5128 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    523c:	463a      	mov	r2, r7
    523e:	4631      	mov	r1, r6
    5240:	4628      	mov	r0, r5
    5242:	f7fd fe33 	bl	2eac <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    5246:	bf00      	nop
    5248:	2000f280 	.word	0x2000f280
    524c:	e000ed00 	.word	0xe000ed00
    5250:	2000e6c0 	.word	0x2000e6c0
    5254:	000050dd 	.word	0x000050dd
    5258:	2000c758 	.word	0x2000c758
    525c:	0000ab47 	.word	0x0000ab47
    5260:	2000fbc0 	.word	0x2000fbc0

00005264 <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
    5264:	2000      	movs	r0, #0
{
    5266:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5268:	4c05      	ldr	r4, [pc, #20]	; (5280 <init_mem_slab_module+0x1c>)
    526a:	4d06      	ldr	r5, [pc, #24]	; (5284 <init_mem_slab_module+0x20>)
    526c:	42ac      	cmp	r4, r5
    526e:	d300      	bcc.n	5272 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    5270:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    5272:	4620      	mov	r0, r4
    5274:	f003 ffa5 	bl	91c2 <create_free_list>
		if (rc < 0) {
    5278:	2800      	cmp	r0, #0
    527a:	dbf9      	blt.n	5270 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    527c:	341c      	adds	r4, #28
    527e:	e7f5      	b.n	526c <init_mem_slab_module+0x8>
    5280:	2000c622 	.word	0x2000c622
    5284:	2000c622 	.word	0x2000c622

00005288 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    5288:	b573      	push	{r0, r1, r4, r5, r6, lr}
    528a:	460c      	mov	r4, r1
	__asm__ volatile(
    528c:	f04f 0520 	mov.w	r5, #32
    5290:	f3ef 8111 	mrs	r1, BASEPRI
    5294:	f385 8812 	msr	BASEPRI_MAX, r5
    5298:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    529c:	6945      	ldr	r5, [r0, #20]
    529e:	b15d      	cbz	r5, 52b8 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    52a0:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    52a2:	682b      	ldr	r3, [r5, #0]
    52a4:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    52a6:	6983      	ldr	r3, [r0, #24]
    52a8:	3301      	adds	r3, #1
    52aa:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    52ac:	2000      	movs	r0, #0
	__asm__ volatile(
    52ae:	f381 8811 	msr	BASEPRI, r1
    52b2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    52b6:	e011      	b.n	52dc <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    52b8:	ea52 0603 	orrs.w	r6, r2, r3
    52bc:	d103      	bne.n	52c6 <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
    52be:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    52c2:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    52c4:	e7f3      	b.n	52ae <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    52c6:	e9cd 2300 	strd	r2, r3, [sp]
    52ca:	4602      	mov	r2, r0
    52cc:	3008      	adds	r0, #8
    52ce:	f000 fad7 	bl	5880 <z_pend_curr>
		if (result == 0) {
    52d2:	b918      	cbnz	r0, 52dc <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    52d4:	4b02      	ldr	r3, [pc, #8]	; (52e0 <k_mem_slab_alloc+0x58>)
    52d6:	689b      	ldr	r3, [r3, #8]
    52d8:	695b      	ldr	r3, [r3, #20]
    52da:	6023      	str	r3, [r4, #0]
}
    52dc:	b002      	add	sp, #8
    52de:	bd70      	pop	{r4, r5, r6, pc}
    52e0:	2000e6c0 	.word	0x2000e6c0

000052e4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    52e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    52e8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    52ea:	f100 0558 	add.w	r5, r0, #88	; 0x58
    52ee:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    52f0:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    52f2:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    52f6:	2500      	movs	r5, #0
{
    52f8:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
    52fa:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    52fc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    52fe:	e9c0 5506 	strd	r5, r5, [r0, #24]
    5302:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5304:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5306:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5308:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
    530c:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    5310:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    5312:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    5314:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5316:	9202      	str	r2, [sp, #8]
    5318:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    531a:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    531e:	9201      	str	r2, [sp, #4]
    5320:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5322:	9200      	str	r2, [sp, #0]
    5324:	4642      	mov	r2, r8
    5326:	f7fd fda1 	bl	2e6c <arch_new_thread>
	if (!_current) {
    532a:	4b05      	ldr	r3, [pc, #20]	; (5340 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    532c:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    532e:	689b      	ldr	r3, [r3, #8]
    5330:	b103      	cbz	r3, 5334 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    5332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    5334:	4640      	mov	r0, r8
    5336:	6723      	str	r3, [r4, #112]	; 0x70
    5338:	b004      	add	sp, #16
    533a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    533e:	bf00      	nop
    5340:	2000e6c0 	.word	0x2000e6c0

00005344 <z_init_static_threads>:
{
    5344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5348:	4c29      	ldr	r4, [pc, #164]	; (53f0 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    534a:	4d2a      	ldr	r5, [pc, #168]	; (53f4 <z_init_static_threads+0xb0>)
{
    534c:	b087      	sub	sp, #28
    534e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    5350:	42ae      	cmp	r6, r5
    5352:	f104 0430 	add.w	r4, r4, #48	; 0x30
    5356:	d30f      	bcc.n	5378 <z_init_static_threads+0x34>
	k_sched_lock();
    5358:	f000 fb58 	bl	5a0c <k_sched_lock>
    535c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    5360:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    5364:	4c22      	ldr	r4, [pc, #136]	; (53f0 <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5366:	f8df 9090 	ldr.w	r9, [pc, #144]	; 53f8 <z_init_static_threads+0xb4>
    536a:	42ac      	cmp	r4, r5
    536c:	d320      	bcc.n	53b0 <z_init_static_threads+0x6c>
}
    536e:	b007      	add	sp, #28
    5370:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    5374:	f000 bb5e 	b.w	5a34 <k_sched_unlock>
		z_setup_new_thread(
    5378:	f854 3c04 	ldr.w	r3, [r4, #-4]
    537c:	9305      	str	r3, [sp, #20]
    537e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    5382:	9304      	str	r3, [sp, #16]
    5384:	f854 3c14 	ldr.w	r3, [r4, #-20]
    5388:	9303      	str	r3, [sp, #12]
    538a:	f854 3c18 	ldr.w	r3, [r4, #-24]
    538e:	9302      	str	r3, [sp, #8]
    5390:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    5394:	9301      	str	r3, [sp, #4]
    5396:	f854 3c20 	ldr.w	r3, [r4, #-32]
    539a:	9300      	str	r3, [sp, #0]
    539c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    53a0:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    53a4:	f7ff ff9e 	bl	52e4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    53a8:	f854 3c30 	ldr.w	r3, [r4, #-48]
    53ac:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    53ae:	e7ce      	b.n	534e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    53b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    53b2:	1c5a      	adds	r2, r3, #1
    53b4:	d00d      	beq.n	53d2 <z_init_static_threads+0x8e>
    53b6:	2100      	movs	r1, #0
    53b8:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    53ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    53be:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    53c2:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    53c6:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    53ca:	d104      	bne.n	53d6 <z_init_static_threads+0x92>
	z_sched_start(thread);
    53cc:	4640      	mov	r0, r8
    53ce:	f000 facd 	bl	596c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    53d2:	3430      	adds	r4, #48	; 0x30
    53d4:	e7c9      	b.n	536a <z_init_static_threads+0x26>
    53d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    53da:	2300      	movs	r3, #0
    53dc:	f7fa feb2 	bl	144 <__aeabi_uldivmod>
    53e0:	4602      	mov	r2, r0
    53e2:	460b      	mov	r3, r1
    53e4:	f108 0018 	add.w	r0, r8, #24
    53e8:	4649      	mov	r1, r9
    53ea:	f000 fcb5 	bl	5d58 <z_add_timeout>
    53ee:	e7f0      	b.n	53d2 <z_init_static_threads+0x8e>
    53f0:	000097a0 	.word	0x000097a0
    53f4:	000097a0 	.word	0x000097a0
    53f8:	000092df 	.word	0x000092df

000053fc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    53fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5400:	4604      	mov	r4, r0
    5402:	4617      	mov	r7, r2
    5404:	461e      	mov	r6, r3
	__asm__ volatile(
    5406:	f04f 0320 	mov.w	r3, #32
    540a:	f3ef 8811 	mrs	r8, BASEPRI
    540e:	f383 8812 	msr	BASEPRI_MAX, r3
    5412:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    5416:	68c3      	ldr	r3, [r0, #12]
    5418:	4a33      	ldr	r2, [pc, #204]	; (54e8 <z_impl_k_mutex_lock+0xec>)
    541a:	b17b      	cbz	r3, 543c <z_impl_k_mutex_lock+0x40>
    541c:	6880      	ldr	r0, [r0, #8]
    541e:	6891      	ldr	r1, [r2, #8]
    5420:	4288      	cmp	r0, r1
    5422:	d019      	beq.n	5458 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    5424:	ea57 0306 	orrs.w	r3, r7, r6
    5428:	d118      	bne.n	545c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    542a:	f388 8811 	msr	BASEPRI, r8
    542e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    5432:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    5436:	b002      	add	sp, #8
    5438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    543c:	6891      	ldr	r1, [r2, #8]
    543e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    5442:	3301      	adds	r3, #1
    5444:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    5446:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    5448:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    544a:	60a3      	str	r3, [r4, #8]
    544c:	f388 8811 	msr	BASEPRI, r8
    5450:	f3bf 8f6f 	isb	sy
		return 0;
    5454:	2000      	movs	r0, #0
    5456:	e7ee      	b.n	5436 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    5458:	6921      	ldr	r1, [r4, #16]
    545a:	e7f2      	b.n	5442 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    545c:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5460:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    5464:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    5468:	4299      	cmp	r1, r3
    546a:	bfa8      	it	ge
    546c:	4619      	movge	r1, r3
    546e:	4291      	cmp	r1, r2
    5470:	bfb8      	it	lt
    5472:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    5474:	428b      	cmp	r3, r1
    5476:	dd2e      	ble.n	54d6 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    5478:	f003 ff04 	bl	9284 <adjust_owner_prio.isra.0>
    547c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    547e:	4622      	mov	r2, r4
    5480:	4641      	mov	r1, r8
    5482:	e9cd 7600 	strd	r7, r6, [sp]
    5486:	4819      	ldr	r0, [pc, #100]	; (54ec <z_impl_k_mutex_lock+0xf0>)
    5488:	f000 f9fa 	bl	5880 <z_pend_curr>
	if (got_mutex == 0) {
    548c:	2800      	cmp	r0, #0
    548e:	d0e1      	beq.n	5454 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    5490:	f04f 0320 	mov.w	r3, #32
    5494:	f3ef 8611 	mrs	r6, BASEPRI
    5498:	f383 8812 	msr	BASEPRI_MAX, r3
    549c:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    54a0:	68a0      	ldr	r0, [r4, #8]
    54a2:	b1d0      	cbz	r0, 54da <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    54a4:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    54a6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    54a8:	429c      	cmp	r4, r3
    54aa:	d00a      	beq.n	54c2 <z_impl_k_mutex_lock+0xc6>
    54ac:	b14b      	cbz	r3, 54c2 <z_impl_k_mutex_lock+0xc6>
    54ae:	f993 300e 	ldrsb.w	r3, [r3, #14]
    54b2:	4299      	cmp	r1, r3
    54b4:	bfa8      	it	ge
    54b6:	4619      	movge	r1, r3
    54b8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    54bc:	4299      	cmp	r1, r3
    54be:	bfb8      	it	lt
    54c0:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    54c2:	f003 fedf 	bl	9284 <adjust_owner_prio.isra.0>
    54c6:	b140      	cbz	r0, 54da <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    54c8:	4631      	mov	r1, r6
    54ca:	4808      	ldr	r0, [pc, #32]	; (54ec <z_impl_k_mutex_lock+0xf0>)
    54cc:	f000 fa3c 	bl	5948 <z_reschedule>
	return -EAGAIN;
    54d0:	f06f 000a 	mvn.w	r0, #10
    54d4:	e7af      	b.n	5436 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    54d6:	2500      	movs	r5, #0
    54d8:	e7d1      	b.n	547e <z_impl_k_mutex_lock+0x82>
	if (resched) {
    54da:	2d00      	cmp	r5, #0
    54dc:	d1f4      	bne.n	54c8 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    54de:	f386 8811 	msr	BASEPRI, r6
    54e2:	f3bf 8f6f 	isb	sy
    54e6:	e7f3      	b.n	54d0 <z_impl_k_mutex_lock+0xd4>
    54e8:	2000e6c0 	.word	0x2000e6c0
    54ec:	2000f27d 	.word	0x2000f27d

000054f0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    54f0:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    54f2:	6883      	ldr	r3, [r0, #8]
{
    54f4:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    54f6:	b36b      	cbz	r3, 5554 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    54f8:	4a19      	ldr	r2, [pc, #100]	; (5560 <z_impl_k_mutex_unlock+0x70>)
    54fa:	6892      	ldr	r2, [r2, #8]
    54fc:	4293      	cmp	r3, r2
    54fe:	d12c      	bne.n	555a <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    5500:	68c3      	ldr	r3, [r0, #12]
    5502:	2b01      	cmp	r3, #1
    5504:	d903      	bls.n	550e <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    5506:	3b01      	subs	r3, #1
    5508:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    550a:	2000      	movs	r0, #0
}
    550c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    550e:	f04f 0320 	mov.w	r3, #32
    5512:	f3ef 8511 	mrs	r5, BASEPRI
    5516:	f383 8812 	msr	BASEPRI_MAX, r3
    551a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    551e:	6901      	ldr	r1, [r0, #16]
    5520:	6880      	ldr	r0, [r0, #8]
    5522:	f003 feaf 	bl	9284 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    5526:	4620      	mov	r0, r4
    5528:	f003 ff33 	bl	9392 <z_unpend_first_thread>
	mutex->owner = new_owner;
    552c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    552e:	b158      	cbz	r0, 5548 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    5530:	f990 200e 	ldrsb.w	r2, [r0, #14]
    5534:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    5536:	2200      	movs	r2, #0
    5538:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    553a:	f003 ff1a 	bl	9372 <z_ready_thread>
		z_reschedule(&lock, key);
    553e:	4629      	mov	r1, r5
    5540:	4808      	ldr	r0, [pc, #32]	; (5564 <z_impl_k_mutex_unlock+0x74>)
    5542:	f000 fa01 	bl	5948 <z_reschedule>
    5546:	e7e0      	b.n	550a <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    5548:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    554a:	f385 8811 	msr	BASEPRI, r5
    554e:	f3bf 8f6f 	isb	sy
    5552:	e7da      	b.n	550a <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    5554:	f06f 0015 	mvn.w	r0, #21
    5558:	e7d8      	b.n	550c <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    555a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    555e:	e7d5      	b.n	550c <z_impl_k_mutex_unlock+0x1c>
    5560:	2000e6c0 	.word	0x2000e6c0
    5564:	2000f27d 	.word	0x2000f27d

00005568 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5568:	b538      	push	{r3, r4, r5, lr}
    556a:	4604      	mov	r4, r0
	__asm__ volatile(
    556c:	f04f 0320 	mov.w	r3, #32
    5570:	f3ef 8511 	mrs	r5, BASEPRI
    5574:	f383 8812 	msr	BASEPRI_MAX, r3
    5578:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    557c:	f003 ff09 	bl	9392 <z_unpend_first_thread>

	if (thread != NULL) {
    5580:	b148      	cbz	r0, 5596 <z_impl_k_sem_give+0x2e>
    5582:	2200      	movs	r2, #0
    5584:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    5586:	f003 fef4 	bl	9372 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    558a:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    558c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    5590:	4804      	ldr	r0, [pc, #16]	; (55a4 <z_impl_k_sem_give+0x3c>)
    5592:	f000 b9d9 	b.w	5948 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5596:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    559a:	429a      	cmp	r2, r3
    559c:	bf18      	it	ne
    559e:	3301      	addne	r3, #1
    55a0:	60a3      	str	r3, [r4, #8]
}
    55a2:	e7f2      	b.n	558a <z_impl_k_sem_give+0x22>
    55a4:	2000f27d 	.word	0x2000f27d

000055a8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    55a8:	b513      	push	{r0, r1, r4, lr}
    55aa:	f04f 0420 	mov.w	r4, #32
    55ae:	f3ef 8111 	mrs	r1, BASEPRI
    55b2:	f384 8812 	msr	BASEPRI_MAX, r4
    55b6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    55ba:	6884      	ldr	r4, [r0, #8]
    55bc:	b144      	cbz	r4, 55d0 <z_impl_k_sem_take+0x28>
		sem->count--;
    55be:	3c01      	subs	r4, #1
    55c0:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    55c2:	f381 8811 	msr	BASEPRI, r1
    55c6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    55ca:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    55cc:	b002      	add	sp, #8
    55ce:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    55d0:	ea52 0403 	orrs.w	r4, r2, r3
    55d4:	d106      	bne.n	55e4 <z_impl_k_sem_take+0x3c>
    55d6:	f381 8811 	msr	BASEPRI, r1
    55da:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    55de:	f06f 000f 	mvn.w	r0, #15
    55e2:	e7f3      	b.n	55cc <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    55e4:	e9cd 2300 	strd	r2, r3, [sp]
    55e8:	4602      	mov	r2, r0
    55ea:	4802      	ldr	r0, [pc, #8]	; (55f4 <z_impl_k_sem_take+0x4c>)
    55ec:	f000 f948 	bl	5880 <z_pend_curr>
	return ret;
    55f0:	e7ec      	b.n	55cc <z_impl_k_sem_take+0x24>
    55f2:	bf00      	nop
    55f4:	2000f27d 	.word	0x2000f27d

000055f8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    55f8:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    55fa:	4d07      	ldr	r5, [pc, #28]	; (5618 <z_reset_time_slice+0x20>)
    55fc:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    55fe:	b154      	cbz	r4, 5616 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    5600:	f7fe fe88 	bl	4314 <sys_clock_elapsed>
    5604:	4b05      	ldr	r3, [pc, #20]	; (561c <z_reset_time_slice+0x24>)
    5606:	4404      	add	r4, r0
    5608:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    560a:	6828      	ldr	r0, [r5, #0]
    560c:	2100      	movs	r1, #0
	}
}
    560e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    5612:	f003 bf06 	b.w	9422 <z_set_timeout_expiry>
}
    5616:	bd38      	pop	{r3, r4, r5, pc}
    5618:	2000e6f4 	.word	0x2000e6f4
    561c:	2000e6c0 	.word	0x2000e6c0

00005620 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    5620:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    5622:	4d0d      	ldr	r5, [pc, #52]	; (5658 <update_cache+0x38>)
    5624:	462b      	mov	r3, r5
    5626:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    562a:	429c      	cmp	r4, r3
    562c:	d000      	beq.n	5630 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    562e:	b904      	cbnz	r4, 5632 <update_cache+0x12>
    5630:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    5632:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    5634:	b938      	cbnz	r0, 5646 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    5636:	7b5a      	ldrb	r2, [r3, #13]
    5638:	06d2      	lsls	r2, r2, #27
    563a:	d104      	bne.n	5646 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    563c:	69a2      	ldr	r2, [r4, #24]
    563e:	b912      	cbnz	r2, 5646 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    5640:	89da      	ldrh	r2, [r3, #14]
    5642:	2a7f      	cmp	r2, #127	; 0x7f
    5644:	d805      	bhi.n	5652 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    5646:	429c      	cmp	r4, r3
    5648:	d002      	beq.n	5650 <update_cache+0x30>
			z_reset_time_slice(thread);
    564a:	4620      	mov	r0, r4
    564c:	f7ff ffd4 	bl	55f8 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    5650:	4623      	mov	r3, r4
    5652:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    5654:	bd38      	pop	{r3, r4, r5, pc}
    5656:	bf00      	nop
    5658:	2000e6c0 	.word	0x2000e6c0

0000565c <move_thread_to_end_of_prio_q>:
{
    565c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    565e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    5662:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5664:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    5666:	7b43      	ldrb	r3, [r0, #13]
    5668:	da04      	bge.n	5674 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    566a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    566e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    5670:	f003 fe23 	bl	92ba <sys_dlist_remove>
	return list->head == list;
    5674:	4a15      	ldr	r2, [pc, #84]	; (56cc <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
    5676:	7b4b      	ldrb	r3, [r1, #13]
    5678:	4610      	mov	r0, r2
    567a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    567e:	734b      	strb	r3, [r1, #13]
    5680:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    5684:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5686:	4283      	cmp	r3, r0
    5688:	bf08      	it	eq
    568a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    568c:	b923      	cbnz	r3, 5698 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    568e:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    5692:	6021      	str	r1, [r4, #0]
	list->tail = node;
    5694:	6251      	str	r1, [r2, #36]	; 0x24
}
    5696:	e00c      	b.n	56b2 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    5698:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    569c:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    56a0:	42b5      	cmp	r5, r6
    56a2:	d00e      	beq.n	56c2 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    56a4:	42ae      	cmp	r6, r5
    56a6:	dd0c      	ble.n	56c2 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    56a8:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    56aa:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    56ae:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    56b0:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    56b2:	6890      	ldr	r0, [r2, #8]
}
    56b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    56b8:	1a43      	subs	r3, r0, r1
    56ba:	4258      	negs	r0, r3
    56bc:	4158      	adcs	r0, r3
    56be:	f7ff bfaf 	b.w	5620 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    56c2:	429c      	cmp	r4, r3
    56c4:	d0e3      	beq.n	568e <move_thread_to_end_of_prio_q+0x32>
    56c6:	681b      	ldr	r3, [r3, #0]
    56c8:	e7e0      	b.n	568c <move_thread_to_end_of_prio_q+0x30>
    56ca:	bf00      	nop
    56cc:	2000e6c0 	.word	0x2000e6c0

000056d0 <ready_thread>:
{
    56d0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    56d2:	f990 300d 	ldrsb.w	r3, [r0, #13]
    56d6:	7b42      	ldrb	r2, [r0, #13]
    56d8:	2b00      	cmp	r3, #0
    56da:	db29      	blt.n	5730 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    56dc:	06d3      	lsls	r3, r2, #27
    56de:	d127      	bne.n	5730 <ready_thread+0x60>
	return node->next != NULL;
    56e0:	6983      	ldr	r3, [r0, #24]
    56e2:	bb2b      	cbnz	r3, 5730 <ready_thread+0x60>
	return list->head == list;
    56e4:	4913      	ldr	r1, [pc, #76]	; (5734 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    56e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
    56ea:	7342      	strb	r2, [r0, #13]
    56ec:	460a      	mov	r2, r1
    56ee:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    56f2:	4294      	cmp	r4, r2
    56f4:	bf18      	it	ne
    56f6:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    56f8:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    56fa:	b923      	cbnz	r3, 5706 <ready_thread+0x36>
	node->prev = tail;
    56fc:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    5700:	6020      	str	r0, [r4, #0]
	list->tail = node;
    5702:	6248      	str	r0, [r1, #36]	; 0x24
}
    5704:	e00c      	b.n	5720 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    5706:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    570a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    570e:	42b5      	cmp	r5, r6
    5710:	d00a      	beq.n	5728 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5712:	42ae      	cmp	r6, r5
    5714:	dd08      	ble.n	5728 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    5716:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5718:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    571c:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    571e:	6058      	str	r0, [r3, #4]
		update_cache(0);
    5720:	2000      	movs	r0, #0
}
    5722:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    5724:	f7ff bf7c 	b.w	5620 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5728:	42a3      	cmp	r3, r4
    572a:	d0e7      	beq.n	56fc <ready_thread+0x2c>
    572c:	681b      	ldr	r3, [r3, #0]
    572e:	e7e4      	b.n	56fa <ready_thread+0x2a>
}
    5730:	bc70      	pop	{r4, r5, r6}
    5732:	4770      	bx	lr
    5734:	2000e6c0 	.word	0x2000e6c0

00005738 <unready_thread>:
{
    5738:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    573a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    573e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5740:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    5742:	7b43      	ldrb	r3, [r0, #13]
    5744:	da04      	bge.n	5750 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    574a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    574c:	f003 fdb5 	bl	92ba <sys_dlist_remove>
	update_cache(thread == _current);
    5750:	4b04      	ldr	r3, [pc, #16]	; (5764 <unready_thread+0x2c>)
    5752:	6898      	ldr	r0, [r3, #8]
    5754:	1a43      	subs	r3, r0, r1
    5756:	4258      	negs	r0, r3
    5758:	4158      	adcs	r0, r3
}
    575a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    575e:	f7ff bf5f 	b.w	5620 <update_cache>
    5762:	bf00      	nop
    5764:	2000e6c0 	.word	0x2000e6c0

00005768 <pend_locked>:
{
    5768:	b570      	push	{r4, r5, r6, lr}
    576a:	4615      	mov	r5, r2
    576c:	461c      	mov	r4, r3
    576e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    5770:	f003 fdd7 	bl	9322 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5774:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    5778:	bf08      	it	eq
    577a:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    577e:	d008      	beq.n	5792 <pend_locked+0x2a>
    5780:	462a      	mov	r2, r5
    5782:	4623      	mov	r3, r4
    5784:	f106 0018 	add.w	r0, r6, #24
    5788:	4902      	ldr	r1, [pc, #8]	; (5794 <pend_locked+0x2c>)
}
    578a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    578e:	f000 bae3 	b.w	5d58 <z_add_timeout>
    5792:	bd70      	pop	{r4, r5, r6, pc}
    5794:	000092df 	.word	0x000092df

00005798 <k_sched_time_slice_set>:
{
    5798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    579a:	4604      	mov	r4, r0
    579c:	460d      	mov	r5, r1
	__asm__ volatile(
    579e:	f04f 0320 	mov.w	r3, #32
    57a2:	f3ef 8711 	mrs	r7, BASEPRI
    57a6:	f383 8812 	msr	BASEPRI_MAX, r3
    57aa:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
    57ae:	2600      	movs	r6, #0
    57b0:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    57b4:	f240 30e7 	movw	r0, #999	; 0x3e7
    57b8:	4631      	mov	r1, r6
    57ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    57be:	2300      	movs	r3, #0
    57c0:	fbe4 010c 	umlal	r0, r1, r4, ip
    57c4:	f7fa fcbe 	bl	144 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    57c8:	42b4      	cmp	r4, r6
    57ca:	dd02      	ble.n	57d2 <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
    57cc:	2802      	cmp	r0, #2
    57ce:	bfb8      	it	lt
    57d0:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    57d2:	4a07      	ldr	r2, [pc, #28]	; (57f0 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
    57d4:	4b07      	ldr	r3, [pc, #28]	; (57f4 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    57d6:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    57d8:	4a07      	ldr	r2, [pc, #28]	; (57f8 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    57da:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    57dc:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    57de:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    57e0:	f7ff ff0a 	bl	55f8 <z_reset_time_slice>
	__asm__ volatile(
    57e4:	f387 8811 	msr	BASEPRI, r7
    57e8:	f3bf 8f6f 	isb	sy
}
    57ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    57ee:	bf00      	nop
    57f0:	2000e6f4 	.word	0x2000e6f4
    57f4:	2000e6c0 	.word	0x2000e6c0
    57f8:	2000e6f0 	.word	0x2000e6f0

000057fc <z_time_slice>:
{
    57fc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    57fe:	f04f 0320 	mov.w	r3, #32
    5802:	f3ef 8511 	mrs	r5, BASEPRI
    5806:	f383 8812 	msr	BASEPRI_MAX, r3
    580a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    580e:	4b17      	ldr	r3, [pc, #92]	; (586c <z_time_slice+0x70>)
    5810:	4a17      	ldr	r2, [pc, #92]	; (5870 <z_time_slice+0x74>)
    5812:	689c      	ldr	r4, [r3, #8]
    5814:	6811      	ldr	r1, [r2, #0]
    5816:	428c      	cmp	r4, r1
    5818:	d107      	bne.n	582a <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    581a:	4620      	mov	r0, r4
    581c:	f7ff feec 	bl	55f8 <z_reset_time_slice>
	__asm__ volatile(
    5820:	f385 8811 	msr	BASEPRI, r5
    5824:	f3bf 8f6f 	isb	sy
}
    5828:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    582a:	2100      	movs	r1, #0
    582c:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    582e:	4a11      	ldr	r2, [pc, #68]	; (5874 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    5830:	6812      	ldr	r2, [r2, #0]
    5832:	b1c2      	cbz	r2, 5866 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    5834:	89e2      	ldrh	r2, [r4, #14]
    5836:	2a7f      	cmp	r2, #127	; 0x7f
    5838:	d815      	bhi.n	5866 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    583a:	7b62      	ldrb	r2, [r4, #13]
    583c:	06d2      	lsls	r2, r2, #27
    583e:	d112      	bne.n	5866 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    5840:	4a0d      	ldr	r2, [pc, #52]	; (5878 <z_time_slice+0x7c>)
    5842:	f994 100e 	ldrsb.w	r1, [r4, #14]
    5846:	6812      	ldr	r2, [r2, #0]
    5848:	4291      	cmp	r1, r2
    584a:	db0c      	blt.n	5866 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    584c:	4a0b      	ldr	r2, [pc, #44]	; (587c <z_time_slice+0x80>)
    584e:	4294      	cmp	r4, r2
    5850:	d009      	beq.n	5866 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    5852:	691a      	ldr	r2, [r3, #16]
    5854:	4282      	cmp	r2, r0
    5856:	dc03      	bgt.n	5860 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    5858:	4620      	mov	r0, r4
    585a:	f7ff feff 	bl	565c <move_thread_to_end_of_prio_q>
    585e:	e7dc      	b.n	581a <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    5860:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    5862:	611a      	str	r2, [r3, #16]
    5864:	e7dc      	b.n	5820 <z_time_slice+0x24>
    5866:	2200      	movs	r2, #0
    5868:	e7fb      	b.n	5862 <z_time_slice+0x66>
    586a:	bf00      	nop
    586c:	2000e6c0 	.word	0x2000e6c0
    5870:	2000e6ec 	.word	0x2000e6ec
    5874:	2000e6f4 	.word	0x2000e6f4
    5878:	2000e6f0 	.word	0x2000e6f0
    587c:	2000c698 	.word	0x2000c698

00005880 <z_pend_curr>:
{
    5880:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    5882:	480c      	ldr	r0, [pc, #48]	; (58b4 <z_pend_curr+0x34>)
    5884:	4d0c      	ldr	r5, [pc, #48]	; (58b8 <z_pend_curr+0x38>)
    5886:	6886      	ldr	r6, [r0, #8]
{
    5888:	460c      	mov	r4, r1
	pending_current = _current;
    588a:	602e      	str	r6, [r5, #0]
{
    588c:	4611      	mov	r1, r2
    588e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    5892:	f04f 0620 	mov.w	r6, #32
    5896:	f3ef 8511 	mrs	r5, BASEPRI
    589a:	f386 8812 	msr	BASEPRI_MAX, r6
    589e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    58a2:	6880      	ldr	r0, [r0, #8]
    58a4:	f7ff ff60 	bl	5768 <pend_locked>
	ret = arch_swap(key);
    58a8:	4620      	mov	r0, r4
}
    58aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    58ae:	f7fd ba69 	b.w	2d84 <arch_swap>
    58b2:	bf00      	nop
    58b4:	2000e6c0 	.word	0x2000e6c0
    58b8:	2000e6ec 	.word	0x2000e6ec

000058bc <z_set_prio>:
{
    58bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58be:	4604      	mov	r4, r0
    58c0:	f04f 0320 	mov.w	r3, #32
    58c4:	f3ef 8611 	mrs	r6, BASEPRI
    58c8:	f383 8812 	msr	BASEPRI_MAX, r3
    58cc:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    58d0:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    58d2:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    58d4:	06da      	lsls	r2, r3, #27
    58d6:	d119      	bne.n	590c <z_set_prio+0x50>
	return node->next != NULL;
    58d8:	6985      	ldr	r5, [r0, #24]
    58da:	b9bd      	cbnz	r5, 590c <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    58dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    58e0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    58e2:	f003 fcea 	bl	92ba <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    58e6:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    58e8:	4a16      	ldr	r2, [pc, #88]	; (5944 <z_set_prio+0x88>)
    58ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
    58ee:	7343      	strb	r3, [r0, #13]
    58f0:	4613      	mov	r3, r2
				thread->base.prio = prio;
    58f2:	7381      	strb	r1, [r0, #14]
    58f4:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    58f8:	4298      	cmp	r0, r3
    58fa:	bf18      	it	ne
    58fc:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    58fe:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5900:	b95d      	cbnz	r5, 591a <z_set_prio+0x5e>
	node->prev = tail;
    5902:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    5906:	6004      	str	r4, [r0, #0]
	list->tail = node;
    5908:	6254      	str	r4, [r2, #36]	; 0x24
}
    590a:	e011      	b.n	5930 <z_set_prio+0x74>
    590c:	2000      	movs	r0, #0
			thread->base.prio = prio;
    590e:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
    5910:	f386 8811 	msr	BASEPRI, r6
    5914:	f3bf 8f6f 	isb	sy
}
    5918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    591a:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    591e:	42b9      	cmp	r1, r7
    5920:	d00b      	beq.n	593a <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5922:	428f      	cmp	r7, r1
    5924:	dd09      	ble.n	593a <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    5926:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    5928:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    592c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    592e:	606c      	str	r4, [r5, #4]
			update_cache(1);
    5930:	2001      	movs	r0, #1
    5932:	f7ff fe75 	bl	5620 <update_cache>
    5936:	2001      	movs	r0, #1
    5938:	e7ea      	b.n	5910 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    593a:	42a8      	cmp	r0, r5
    593c:	d0e1      	beq.n	5902 <z_set_prio+0x46>
    593e:	682d      	ldr	r5, [r5, #0]
    5940:	e7de      	b.n	5900 <z_set_prio+0x44>
    5942:	bf00      	nop
    5944:	2000e6c0 	.word	0x2000e6c0

00005948 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5948:	b949      	cbnz	r1, 595e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    594a:	f3ef 8005 	mrs	r0, IPSR
    594e:	b930      	cbnz	r0, 595e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    5950:	4b05      	ldr	r3, [pc, #20]	; (5968 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    5952:	69da      	ldr	r2, [r3, #28]
    5954:	689b      	ldr	r3, [r3, #8]
    5956:	429a      	cmp	r2, r3
    5958:	d001      	beq.n	595e <z_reschedule+0x16>
    595a:	f7fd ba13 	b.w	2d84 <arch_swap>
    595e:	f381 8811 	msr	BASEPRI, r1
    5962:	f3bf 8f6f 	isb	sy
}
    5966:	4770      	bx	lr
    5968:	2000e6c0 	.word	0x2000e6c0

0000596c <z_sched_start>:
{
    596c:	b510      	push	{r4, lr}
	__asm__ volatile(
    596e:	f04f 0220 	mov.w	r2, #32
    5972:	f3ef 8411 	mrs	r4, BASEPRI
    5976:	f382 8812 	msr	BASEPRI_MAX, r2
    597a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    597e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    5980:	0751      	lsls	r1, r2, #29
    5982:	d404      	bmi.n	598e <z_sched_start+0x22>
	__asm__ volatile(
    5984:	f384 8811 	msr	BASEPRI, r4
    5988:	f3bf 8f6f 	isb	sy
}
    598c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    598e:	f022 0204 	bic.w	r2, r2, #4
    5992:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    5994:	f7ff fe9c 	bl	56d0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    5998:	4621      	mov	r1, r4
}
    599a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    599e:	4801      	ldr	r0, [pc, #4]	; (59a4 <z_sched_start+0x38>)
    59a0:	f7ff bfd2 	b.w	5948 <z_reschedule>
    59a4:	2000f27d 	.word	0x2000f27d

000059a8 <z_impl_k_thread_suspend>:
{
    59a8:	b570      	push	{r4, r5, r6, lr}
    59aa:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    59ac:	3018      	adds	r0, #24
    59ae:	f003 fd22 	bl	93f6 <z_abort_timeout>
	__asm__ volatile(
    59b2:	f04f 0320 	mov.w	r3, #32
    59b6:	f3ef 8611 	mrs	r6, BASEPRI
    59ba:	f383 8812 	msr	BASEPRI_MAX, r3
    59be:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    59c2:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    59c6:	7b63      	ldrb	r3, [r4, #13]
    59c8:	2a00      	cmp	r2, #0
    59ca:	da05      	bge.n	59d8 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    59cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    59d0:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    59d2:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    59d4:	f003 fc71 	bl	92ba <sys_dlist_remove>
		update_cache(thread == _current);
    59d8:	4d0b      	ldr	r5, [pc, #44]	; (5a08 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    59da:	7b63      	ldrb	r3, [r4, #13]
    59dc:	68a8      	ldr	r0, [r5, #8]
    59de:	f043 0310 	orr.w	r3, r3, #16
    59e2:	7363      	strb	r3, [r4, #13]
    59e4:	1b03      	subs	r3, r0, r4
    59e6:	4258      	negs	r0, r3
    59e8:	4158      	adcs	r0, r3
    59ea:	f7ff fe19 	bl	5620 <update_cache>
	__asm__ volatile(
    59ee:	f386 8811 	msr	BASEPRI, r6
    59f2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    59f6:	68ab      	ldr	r3, [r5, #8]
    59f8:	42a3      	cmp	r3, r4
    59fa:	d103      	bne.n	5a04 <z_impl_k_thread_suspend+0x5c>
}
    59fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    5a00:	f003 bcef 	b.w	93e2 <z_reschedule_unlocked>
}
    5a04:	bd70      	pop	{r4, r5, r6, pc}
    5a06:	bf00      	nop
    5a08:	2000e6c0 	.word	0x2000e6c0

00005a0c <k_sched_lock>:
	__asm__ volatile(
    5a0c:	f04f 0320 	mov.w	r3, #32
    5a10:	f3ef 8111 	mrs	r1, BASEPRI
    5a14:	f383 8812 	msr	BASEPRI_MAX, r3
    5a18:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    5a1c:	4b04      	ldr	r3, [pc, #16]	; (5a30 <k_sched_lock+0x24>)
    5a1e:	689a      	ldr	r2, [r3, #8]
    5a20:	7bd3      	ldrb	r3, [r2, #15]
    5a22:	3b01      	subs	r3, #1
    5a24:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    5a26:	f381 8811 	msr	BASEPRI, r1
    5a2a:	f3bf 8f6f 	isb	sy
}
    5a2e:	4770      	bx	lr
    5a30:	2000e6c0 	.word	0x2000e6c0

00005a34 <k_sched_unlock>:
{
    5a34:	b510      	push	{r4, lr}
	__asm__ volatile(
    5a36:	f04f 0320 	mov.w	r3, #32
    5a3a:	f3ef 8411 	mrs	r4, BASEPRI
    5a3e:	f383 8812 	msr	BASEPRI_MAX, r3
    5a42:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    5a46:	4b08      	ldr	r3, [pc, #32]	; (5a68 <k_sched_unlock+0x34>)
		update_cache(0);
    5a48:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    5a4a:	689a      	ldr	r2, [r3, #8]
    5a4c:	7bd3      	ldrb	r3, [r2, #15]
    5a4e:	3301      	adds	r3, #1
    5a50:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    5a52:	f7ff fde5 	bl	5620 <update_cache>
	__asm__ volatile(
    5a56:	f384 8811 	msr	BASEPRI, r4
    5a5a:	f3bf 8f6f 	isb	sy
}
    5a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    5a62:	f003 bcbe 	b.w	93e2 <z_reschedule_unlocked>
    5a66:	bf00      	nop
    5a68:	2000e6c0 	.word	0x2000e6c0

00005a6c <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    5a6c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    5a6e:	4b04      	ldr	r3, [pc, #16]	; (5a80 <z_sched_init+0x14>)
    5a70:	4608      	mov	r0, r1
    5a72:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    5a76:	e9c3 2208 	strd	r2, r2, [r3, #32]
    5a7a:	f7ff be8d 	b.w	5798 <k_sched_time_slice_set>
    5a7e:	bf00      	nop
    5a80:	2000e6c0 	.word	0x2000e6c0

00005a84 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    5a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    5a86:	f04f 0320 	mov.w	r3, #32
    5a8a:	f3ef 8511 	mrs	r5, BASEPRI
    5a8e:	f383 8812 	msr	BASEPRI_MAX, r3
    5a92:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    5a96:	4919      	ldr	r1, [pc, #100]	; (5afc <z_impl_k_yield+0x78>)
    5a98:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5a9a:	7b43      	ldrb	r3, [r0, #13]
    5a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5aa0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5aa2:	f003 fc0a 	bl	92ba <sys_dlist_remove>
	return list->head == list;
    5aa6:	4608      	mov	r0, r1
	}
	queue_thread(_current);
    5aa8:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    5aaa:	7b5a      	ldrb	r2, [r3, #13]
    5aac:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5ab0:	735a      	strb	r2, [r3, #13]
    5ab2:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
    5ab6:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5ab8:	4282      	cmp	r2, r0
    5aba:	bf08      	it	eq
    5abc:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5abe:	b922      	cbnz	r2, 5aca <z_impl_k_yield+0x46>
	node->prev = tail;
    5ac0:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    5ac4:	6023      	str	r3, [r4, #0]
	list->tail = node;
    5ac6:	624b      	str	r3, [r1, #36]	; 0x24
}
    5ac8:	e00c      	b.n	5ae4 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    5aca:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    5ace:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    5ad2:	42be      	cmp	r6, r7
    5ad4:	d00e      	beq.n	5af4 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5ad6:	42b7      	cmp	r7, r6
    5ad8:	dd0c      	ble.n	5af4 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    5ada:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    5adc:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    5ae0:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    5ae2:	6053      	str	r3, [r2, #4]
	update_cache(1);
    5ae4:	2001      	movs	r0, #1
    5ae6:	f7ff fd9b 	bl	5620 <update_cache>
    5aea:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    5aec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5af0:	f7fd b948 	b.w	2d84 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    5af4:	42a2      	cmp	r2, r4
    5af6:	d0e3      	beq.n	5ac0 <z_impl_k_yield+0x3c>
    5af8:	6812      	ldr	r2, [r2, #0]
    5afa:	e7e0      	b.n	5abe <z_impl_k_yield+0x3a>
    5afc:	2000e6c0 	.word	0x2000e6c0

00005b00 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    5b00:	ea50 0301 	orrs.w	r3, r0, r1
{
    5b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b08:	4605      	mov	r5, r0
    5b0a:	460e      	mov	r6, r1
	if (ticks == 0) {
    5b0c:	d103      	bne.n	5b16 <z_tick_sleep+0x16>
	z_impl_k_yield();
    5b0e:	f7ff ffb9 	bl	5a84 <z_impl_k_yield>
		k_yield();
		return 0;
    5b12:	2000      	movs	r0, #0
    5b14:	e02c      	b.n	5b70 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    5b16:	1c83      	adds	r3, r0, #2
    5b18:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    5b1c:	db2a      	blt.n	5b74 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    5b1e:	f003 fc9c 	bl	945a <sys_clock_tick_get_32>
    5b22:	1944      	adds	r4, r0, r5
    5b24:	f04f 0320 	mov.w	r3, #32
    5b28:	f3ef 8811 	mrs	r8, BASEPRI
    5b2c:	f383 8812 	msr	BASEPRI_MAX, r3
    5b30:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    5b34:	4f11      	ldr	r7, [pc, #68]	; (5b7c <z_tick_sleep+0x7c>)
    5b36:	4b12      	ldr	r3, [pc, #72]	; (5b80 <z_tick_sleep+0x80>)
    5b38:	68b8      	ldr	r0, [r7, #8]
    5b3a:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    5b3c:	f7ff fdfc 	bl	5738 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    5b40:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5b42:	4910      	ldr	r1, [pc, #64]	; (5b84 <z_tick_sleep+0x84>)
    5b44:	462a      	mov	r2, r5
    5b46:	4633      	mov	r3, r6
    5b48:	3018      	adds	r0, #24
    5b4a:	f000 f905 	bl	5d58 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    5b4e:	68ba      	ldr	r2, [r7, #8]
    5b50:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5b52:	7b53      	ldrb	r3, [r2, #13]
    5b54:	f043 0310 	orr.w	r3, r3, #16
    5b58:	7353      	strb	r3, [r2, #13]
    5b5a:	f7fd f913 	bl	2d84 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    5b5e:	f003 fc7c 	bl	945a <sys_clock_tick_get_32>
    5b62:	1a20      	subs	r0, r4, r0
    5b64:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    5b68:	2801      	cmp	r0, #1
    5b6a:	f173 0300 	sbcs.w	r3, r3, #0
    5b6e:	dbd0      	blt.n	5b12 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    5b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    5b74:	f06f 0401 	mvn.w	r4, #1
    5b78:	1a24      	subs	r4, r4, r0
    5b7a:	e7d3      	b.n	5b24 <z_tick_sleep+0x24>
    5b7c:	2000e6c0 	.word	0x2000e6c0
    5b80:	2000e6ec 	.word	0x2000e6ec
    5b84:	000092df 	.word	0x000092df

00005b88 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5b88:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    5b8c:	bf08      	it	eq
    5b8e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    5b92:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5b94:	d106      	bne.n	5ba4 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    5b96:	4b08      	ldr	r3, [pc, #32]	; (5bb8 <z_impl_k_sleep+0x30>)
    5b98:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    5b9a:	f7ff ff05 	bl	59a8 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    5b9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    5ba2:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    5ba4:	f7ff ffac 	bl	5b00 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    5ba8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5bac:	fb80 0303 	smull	r0, r3, r0, r3
    5bb0:	0bc0      	lsrs	r0, r0, #15
    5bb2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    5bb6:	e7f4      	b.n	5ba2 <z_impl_k_sleep+0x1a>
    5bb8:	2000e6c0 	.word	0x2000e6c0

00005bbc <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    5bbc:	4b01      	ldr	r3, [pc, #4]	; (5bc4 <z_impl_z_current_get+0x8>)
    5bbe:	6898      	ldr	r0, [r3, #8]
    5bc0:	4770      	bx	lr
    5bc2:	bf00      	nop
    5bc4:	2000e6c0 	.word	0x2000e6c0

00005bc8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    5bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5bcc:	4604      	mov	r4, r0
    5bce:	f04f 0320 	mov.w	r3, #32
    5bd2:	f3ef 8611 	mrs	r6, BASEPRI
    5bd6:	f383 8812 	msr	BASEPRI_MAX, r3
    5bda:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    5bde:	7b03      	ldrb	r3, [r0, #12]
    5be0:	07d9      	lsls	r1, r3, #31
    5be2:	d50b      	bpl.n	5bfc <z_thread_abort+0x34>
	__asm__ volatile(
    5be4:	f386 8811 	msr	BASEPRI, r6
    5be8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    5bec:	4040      	eors	r0, r0
    5bee:	f380 8811 	msr	BASEPRI, r0
    5bf2:	f04f 0004 	mov.w	r0, #4
    5bf6:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    5bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    5bfc:	7b43      	ldrb	r3, [r0, #13]
    5bfe:	071a      	lsls	r2, r3, #28
    5c00:	d504      	bpl.n	5c0c <z_thread_abort+0x44>
    5c02:	f386 8811 	msr	BASEPRI, r6
    5c06:	f3bf 8f6f 	isb	sy
    5c0a:	e7f5      	b.n	5bf8 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5c0c:	f023 0220 	bic.w	r2, r3, #32
    5c10:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    5c14:	09d2      	lsrs	r2, r2, #7
    5c16:	d120      	bne.n	5c5a <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5c18:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    5c1a:	68a3      	ldr	r3, [r4, #8]
    5c1c:	b113      	cbz	r3, 5c24 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    5c1e:	4620      	mov	r0, r4
    5c20:	f003 fb53 	bl	92ca <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    5c24:	f104 0018 	add.w	r0, r4, #24
    5c28:	f003 fbe5 	bl	93f6 <z_abort_timeout>
    5c2c:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    5c30:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    5c34:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5c36:	42bd      	cmp	r5, r7
    5c38:	d000      	beq.n	5c3c <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    5c3a:	b9b5      	cbnz	r5, 5c6a <z_thread_abort+0xa2>
		update_cache(1);
    5c3c:	2001      	movs	r0, #1
    5c3e:	f7ff fcef 	bl	5620 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    5c42:	4b10      	ldr	r3, [pc, #64]	; (5c84 <z_thread_abort+0xbc>)
    5c44:	689b      	ldr	r3, [r3, #8]
    5c46:	42a3      	cmp	r3, r4
    5c48:	d1db      	bne.n	5c02 <z_thread_abort+0x3a>
    5c4a:	f3ef 8305 	mrs	r3, IPSR
    5c4e:	2b00      	cmp	r3, #0
    5c50:	d1d7      	bne.n	5c02 <z_thread_abort+0x3a>
    5c52:	4630      	mov	r0, r6
    5c54:	f7fd f896 	bl	2d84 <arch_swap>
	return ret;
    5c58:	e7d3      	b.n	5c02 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5c5a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    5c5e:	f043 0308 	orr.w	r3, r3, #8
    5c62:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5c64:	f003 fb29 	bl	92ba <sys_dlist_remove>
}
    5c68:	e7d7      	b.n	5c1a <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    5c6a:	4628      	mov	r0, r5
    5c6c:	f003 fb2d 	bl	92ca <unpend_thread_no_timeout>
    5c70:	f105 0018 	add.w	r0, r5, #24
    5c74:	f003 fbbf 	bl	93f6 <z_abort_timeout>
		ready_thread(thread);
    5c78:	4628      	mov	r0, r5
    5c7a:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    5c7e:	f7ff fd27 	bl	56d0 <ready_thread>
    5c82:	e7d7      	b.n	5c34 <z_thread_abort+0x6c>
    5c84:	2000e6c0 	.word	0x2000e6c0

00005c88 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    5c88:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    5c8a:	4806      	ldr	r0, [pc, #24]	; (5ca4 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    5c8c:	4a06      	ldr	r2, [pc, #24]	; (5ca8 <z_data_copy+0x20>)
    5c8e:	4907      	ldr	r1, [pc, #28]	; (5cac <z_data_copy+0x24>)
    5c90:	1a12      	subs	r2, r2, r0
    5c92:	f003 fa94 	bl	91be <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    5c96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    5c9a:	4a05      	ldr	r2, [pc, #20]	; (5cb0 <z_data_copy+0x28>)
    5c9c:	4905      	ldr	r1, [pc, #20]	; (5cb4 <z_data_copy+0x2c>)
    5c9e:	4806      	ldr	r0, [pc, #24]	; (5cb8 <z_data_copy+0x30>)
    5ca0:	f003 ba8d 	b.w	91be <z_early_memcpy>
    5ca4:	2000c4e8 	.word	0x2000c4e8
    5ca8:	2000c674 	.word	0x2000c674
    5cac:	0000ab80 	.word	0x0000ab80
    5cb0:	00000000 	.word	0x00000000
    5cb4:	0000ab80 	.word	0x0000ab80
    5cb8:	2000c4e8 	.word	0x2000c4e8

00005cbc <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    5cbc:	4b03      	ldr	r3, [pc, #12]	; (5ccc <elapsed+0x10>)
    5cbe:	681b      	ldr	r3, [r3, #0]
    5cc0:	b90b      	cbnz	r3, 5cc6 <elapsed+0xa>
    5cc2:	f7fe bb27 	b.w	4314 <sys_clock_elapsed>
}
    5cc6:	2000      	movs	r0, #0
    5cc8:	4770      	bx	lr
    5cca:	bf00      	nop
    5ccc:	2000e6f8 	.word	0x2000e6f8

00005cd0 <next_timeout>:

static int32_t next_timeout(void)
{
    5cd0:	b510      	push	{r4, lr}
	return list->head == list;
    5cd2:	4b11      	ldr	r3, [pc, #68]	; (5d18 <next_timeout+0x48>)
    5cd4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5cd6:	429c      	cmp	r4, r3
    5cd8:	d10a      	bne.n	5cf0 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    5cda:	f7ff ffef 	bl	5cbc <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    5cde:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    5ce2:	4b0e      	ldr	r3, [pc, #56]	; (5d1c <next_timeout+0x4c>)
    5ce4:	691b      	ldr	r3, [r3, #16]
    5ce6:	b113      	cbz	r3, 5cee <next_timeout+0x1e>
    5ce8:	4298      	cmp	r0, r3
    5cea:	bfa8      	it	ge
    5cec:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    5cee:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    5cf0:	f7ff ffe4 	bl	5cbc <elapsed>
	if ((to == NULL) ||
    5cf4:	2c00      	cmp	r4, #0
    5cf6:	d0f2      	beq.n	5cde <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    5cf8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    5cfc:	1a1b      	subs	r3, r3, r0
    5cfe:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    5d02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5d06:	f172 0100 	sbcs.w	r1, r2, #0
    5d0a:	dae8      	bge.n	5cde <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    5d0c:	2a00      	cmp	r2, #0
    5d0e:	bfac      	ite	ge
    5d10:	4618      	movge	r0, r3
    5d12:	2000      	movlt	r0, #0
    5d14:	e7e5      	b.n	5ce2 <next_timeout+0x12>
    5d16:	bf00      	nop
    5d18:	2000c5b0 	.word	0x2000c5b0
    5d1c:	2000e6c0 	.word	0x2000e6c0

00005d20 <remove_timeout>:
{
    5d20:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5d22:	b170      	cbz	r0, 5d42 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    5d24:	4b0b      	ldr	r3, [pc, #44]	; (5d54 <remove_timeout+0x34>)
    5d26:	685b      	ldr	r3, [r3, #4]
    5d28:	4298      	cmp	r0, r3
    5d2a:	d00a      	beq.n	5d42 <remove_timeout+0x22>
    5d2c:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    5d2e:	b143      	cbz	r3, 5d42 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    5d30:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    5d34:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    5d38:	1912      	adds	r2, r2, r4
    5d3a:	eb41 0105 	adc.w	r1, r1, r5
    5d3e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    5d42:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    5d46:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5d48:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5d4a:	2300      	movs	r3, #0
	node->prev = NULL;
    5d4c:	e9c0 3300 	strd	r3, r3, [r0]
}
    5d50:	bd30      	pop	{r4, r5, pc}
    5d52:	bf00      	nop
    5d54:	2000c5b0 	.word	0x2000c5b0

00005d58 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5d58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5d5c:	bf08      	it	eq
    5d5e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    5d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d64:	4604      	mov	r4, r0
    5d66:	461d      	mov	r5, r3
    5d68:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5d6a:	d061      	beq.n	5e30 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    5d6c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    5d6e:	f04f 0320 	mov.w	r3, #32
    5d72:	f3ef 8711 	mrs	r7, BASEPRI
    5d76:	f383 8812 	msr	BASEPRI_MAX, r3
    5d7a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    5d7e:	3201      	adds	r2, #1
    5d80:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    5d84:	da24      	bge.n	5dd0 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    5d86:	f06f 0301 	mvn.w	r3, #1
    5d8a:	492f      	ldr	r1, [pc, #188]	; (5e48 <z_add_timeout+0xf0>)
    5d8c:	e9d1 2000 	ldrd	r2, r0, [r1]
    5d90:	1a9b      	subs	r3, r3, r2
    5d92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5d96:	eb62 0000 	sbc.w	r0, r2, r0
    5d9a:	1b9e      	subs	r6, r3, r6
    5d9c:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    5da0:	2e01      	cmp	r6, #1
    5da2:	f170 0300 	sbcs.w	r3, r0, #0
    5da6:	da01      	bge.n	5dac <z_add_timeout+0x54>
    5da8:	2601      	movs	r6, #1
    5daa:	2000      	movs	r0, #0
    5dac:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    5db0:	4e26      	ldr	r6, [pc, #152]	; (5e4c <z_add_timeout+0xf4>)
    5db2:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    5db6:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5db8:	45b4      	cmp	ip, r6
    5dba:	bf08      	it	eq
    5dbc:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    5dc0:	f1bc 0f00 	cmp.w	ip, #0
    5dc4:	d10d      	bne.n	5de2 <z_add_timeout+0x8a>
	node->prev = tail;
    5dc6:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    5dca:	602c      	str	r4, [r5, #0]
	list->tail = node;
    5dcc:	6074      	str	r4, [r6, #4]
}
    5dce:	e01c      	b.n	5e0a <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    5dd0:	f7ff ff74 	bl	5cbc <elapsed>
    5dd4:	3601      	adds	r6, #1
    5dd6:	f145 0500 	adc.w	r5, r5, #0
    5dda:	1836      	adds	r6, r6, r0
    5ddc:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    5de0:	e7e4      	b.n	5dac <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    5de2:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    5de6:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    5dea:	4293      	cmp	r3, r2
    5dec:	eb71 0e00 	sbcs.w	lr, r1, r0
    5df0:	da1f      	bge.n	5e32 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
    5df2:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    5df4:	f8dc 3004 	ldr.w	r3, [ip, #4]
    5df8:	eb60 0001 	sbc.w	r0, r0, r1
    5dfc:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    5e00:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    5e04:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    5e06:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    5e0a:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5e0c:	42b3      	cmp	r3, r6
    5e0e:	d00b      	beq.n	5e28 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    5e10:	429c      	cmp	r4, r3
    5e12:	d109      	bne.n	5e28 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    5e14:	f7ff ff5c 	bl	5cd0 <next_timeout>

			if (next_time == 0 ||
    5e18:	b118      	cbz	r0, 5e22 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
    5e1a:	4b0d      	ldr	r3, [pc, #52]	; (5e50 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
    5e1c:	691b      	ldr	r3, [r3, #16]
    5e1e:	4283      	cmp	r3, r0
    5e20:	d002      	beq.n	5e28 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
    5e22:	2100      	movs	r1, #0
    5e24:	f7fe fa46 	bl	42b4 <sys_clock_set_timeout>
	__asm__ volatile(
    5e28:	f387 8811 	msr	BASEPRI, r7
    5e2c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    5e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    5e32:	1a9b      	subs	r3, r3, r2
    5e34:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    5e38:	45ac      	cmp	ip, r5
    5e3a:	e9c4 3104 	strd	r3, r1, [r4, #16]
    5e3e:	d0c2      	beq.n	5dc6 <z_add_timeout+0x6e>
    5e40:	f8dc c000 	ldr.w	ip, [ip]
    5e44:	e7bc      	b.n	5dc0 <z_add_timeout+0x68>
    5e46:	bf00      	nop
    5e48:	2000c818 	.word	0x2000c818
    5e4c:	2000c5b0 	.word	0x2000c5b0
    5e50:	2000e6c0 	.word	0x2000e6c0

00005e54 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    5e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5e58:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    5e5a:	f7ff fccf 	bl	57fc <z_time_slice>
	__asm__ volatile(
    5e5e:	f04f 0320 	mov.w	r3, #32
    5e62:	f3ef 8611 	mrs	r6, BASEPRI
    5e66:	f383 8812 	msr	BASEPRI_MAX, r3
    5e6a:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    5e6e:	4f24      	ldr	r7, [pc, #144]	; (5f00 <sys_clock_announce+0xac>)
	return list->head == list;
    5e70:	f8df 8094 	ldr.w	r8, [pc, #148]	; 5f08 <sys_clock_announce+0xb4>
    5e74:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    5e78:	4a22      	ldr	r2, [pc, #136]	; (5f04 <sys_clock_announce+0xb0>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5e7a:	4540      	cmp	r0, r8
	announce_remaining = ticks;
    5e7c:	603c      	str	r4, [r7, #0]
	return list->head == list;
    5e7e:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
    5e82:	e9d2 3e00 	ldrd	r3, lr, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5e86:	d00b      	beq.n	5ea0 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5e88:	b150      	cbz	r0, 5ea0 <sys_clock_announce+0x4c>
    5e8a:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
    5e8e:	42ac      	cmp	r4, r5
    5e90:	eb71 090c 	sbcs.w	r9, r1, ip
    5e94:	da17      	bge.n	5ec6 <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    5e96:	1b2d      	subs	r5, r5, r4
    5e98:	eb6c 0c01 	sbc.w	ip, ip, r1
    5e9c:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    5ea0:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
    5ea2:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
    5ea6:	eb4e 0101 	adc.w	r1, lr, r1
    5eaa:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
    5eae:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    5eb0:	f7ff ff0e 	bl	5cd0 <next_timeout>
    5eb4:	4621      	mov	r1, r4
    5eb6:	f7fe f9fd 	bl	42b4 <sys_clock_set_timeout>
	__asm__ volatile(
    5eba:	f386 8811 	msr	BASEPRI, r6
    5ebe:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    5ec6:	18eb      	adds	r3, r5, r3
    5ec8:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
    5ecc:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
    5ed0:	2200      	movs	r2, #0
    5ed2:	2300      	movs	r3, #0
    5ed4:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    5ed8:	f7ff ff22 	bl	5d20 <remove_timeout>
    5edc:	f386 8811 	msr	BASEPRI, r6
    5ee0:	f3bf 8f6f 	isb	sy
		t->fn(t);
    5ee4:	6883      	ldr	r3, [r0, #8]
    5ee6:	4798      	blx	r3
	__asm__ volatile(
    5ee8:	f04f 0320 	mov.w	r3, #32
    5eec:	f3ef 8611 	mrs	r6, BASEPRI
    5ef0:	f383 8812 	msr	BASEPRI_MAX, r3
    5ef4:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    5ef8:	683c      	ldr	r4, [r7, #0]
    5efa:	1b64      	subs	r4, r4, r5
    5efc:	e7ba      	b.n	5e74 <sys_clock_announce+0x20>
    5efe:	bf00      	nop
    5f00:	2000e6f8 	.word	0x2000e6f8
    5f04:	2000c818 	.word	0x2000c818
    5f08:	2000c5b0 	.word	0x2000c5b0

00005f0c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    5f0c:	b510      	push	{r4, lr}
    5f0e:	f04f 0320 	mov.w	r3, #32
    5f12:	f3ef 8411 	mrs	r4, BASEPRI
    5f16:	f383 8812 	msr	BASEPRI_MAX, r3
    5f1a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    5f1e:	f7ff fecd 	bl	5cbc <elapsed>
    5f22:	4603      	mov	r3, r0
    5f24:	4a05      	ldr	r2, [pc, #20]	; (5f3c <sys_clock_tick_get+0x30>)
    5f26:	e9d2 0100 	ldrd	r0, r1, [r2]
    5f2a:	1818      	adds	r0, r3, r0
    5f2c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    5f30:	f384 8811 	msr	BASEPRI, r4
    5f34:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    5f38:	bd10      	pop	{r4, pc}
    5f3a:	bf00      	nop
    5f3c:	2000c818 	.word	0x2000c818

00005f40 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    5f40:	4801      	ldr	r0, [pc, #4]	; (5f48 <boot_banner+0x8>)
    5f42:	f001 bfcc 	b.w	7ede <printk>
    5f46:	bf00      	nop
    5f48:	0000ab4f 	.word	0x0000ab4f

00005f4c <nrf_cc3xx_platform_init_no_rng>:
    5f4c:	b510      	push	{r4, lr}
    5f4e:	4c0a      	ldr	r4, [pc, #40]	; (5f78 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    5f50:	6823      	ldr	r3, [r4, #0]
    5f52:	b11b      	cbz	r3, 5f5c <nrf_cc3xx_platform_init_no_rng+0x10>
    5f54:	2301      	movs	r3, #1
    5f56:	2000      	movs	r0, #0
    5f58:	6023      	str	r3, [r4, #0]
    5f5a:	bd10      	pop	{r4, pc}
    5f5c:	f000 f8f4 	bl	6148 <CC_LibInitNoRng>
    5f60:	2800      	cmp	r0, #0
    5f62:	d0f7      	beq.n	5f54 <nrf_cc3xx_platform_init_no_rng+0x8>
    5f64:	3801      	subs	r0, #1
    5f66:	2806      	cmp	r0, #6
    5f68:	d803      	bhi.n	5f72 <nrf_cc3xx_platform_init_no_rng+0x26>
    5f6a:	4b04      	ldr	r3, [pc, #16]	; (5f7c <nrf_cc3xx_platform_init_no_rng+0x30>)
    5f6c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5f70:	bd10      	pop	{r4, pc}
    5f72:	4803      	ldr	r0, [pc, #12]	; (5f80 <nrf_cc3xx_platform_init_no_rng+0x34>)
    5f74:	bd10      	pop	{r4, pc}
    5f76:	bf00      	nop
    5f78:	2000e6fc 	.word	0x2000e6fc
    5f7c:	00009a88 	.word	0x00009a88
    5f80:	ffff8ffe 	.word	0xffff8ffe

00005f84 <nrf_cc3xx_platform_abort>:
    5f84:	f3bf 8f4f 	dsb	sy
    5f88:	4905      	ldr	r1, [pc, #20]	; (5fa0 <nrf_cc3xx_platform_abort+0x1c>)
    5f8a:	4b06      	ldr	r3, [pc, #24]	; (5fa4 <nrf_cc3xx_platform_abort+0x20>)
    5f8c:	68ca      	ldr	r2, [r1, #12]
    5f8e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5f92:	4313      	orrs	r3, r2
    5f94:	60cb      	str	r3, [r1, #12]
    5f96:	f3bf 8f4f 	dsb	sy
    5f9a:	bf00      	nop
    5f9c:	e7fd      	b.n	5f9a <nrf_cc3xx_platform_abort+0x16>
    5f9e:	bf00      	nop
    5fa0:	e000ed00 	.word	0xe000ed00
    5fa4:	05fa0004 	.word	0x05fa0004

00005fa8 <CC_PalAbort>:
    5fa8:	b430      	push	{r4, r5}
    5faa:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    5fae:	2500      	movs	r5, #0
    5fb0:	4b07      	ldr	r3, [pc, #28]	; (5fd0 <CC_PalAbort+0x28>)
    5fb2:	4c08      	ldr	r4, [pc, #32]	; (5fd4 <CC_PalAbort+0x2c>)
    5fb4:	4908      	ldr	r1, [pc, #32]	; (5fd8 <CC_PalAbort+0x30>)
    5fb6:	6849      	ldr	r1, [r1, #4]
    5fb8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    5fbc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    5fc0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    5fc4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    5fc8:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    5fcc:	bc30      	pop	{r4, r5}
    5fce:	4708      	bx	r1
    5fd0:	50841000 	.word	0x50841000
    5fd4:	50840000 	.word	0x50840000
    5fd8:	2000c5b8 	.word	0x2000c5b8

00005fdc <nrf_cc3xx_platform_set_abort>:
    5fdc:	4b02      	ldr	r3, [pc, #8]	; (5fe8 <nrf_cc3xx_platform_set_abort+0xc>)
    5fde:	e9d0 1200 	ldrd	r1, r2, [r0]
    5fe2:	e9c3 1200 	strd	r1, r2, [r3]
    5fe6:	4770      	bx	lr
    5fe8:	2000c5b8 	.word	0x2000c5b8

00005fec <mutex_free>:
    5fec:	b510      	push	{r4, lr}
    5fee:	4604      	mov	r4, r0
    5ff0:	b150      	cbz	r0, 6008 <mutex_free+0x1c>
    5ff2:	6863      	ldr	r3, [r4, #4]
    5ff4:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    5ff8:	d005      	beq.n	6006 <mutex_free+0x1a>
    5ffa:	4a06      	ldr	r2, [pc, #24]	; (6014 <mutex_free+0x28>)
    5ffc:	4293      	cmp	r3, r2
    5ffe:	d002      	beq.n	6006 <mutex_free+0x1a>
    6000:	2300      	movs	r3, #0
    6002:	6062      	str	r2, [r4, #4]
    6004:	6023      	str	r3, [r4, #0]
    6006:	bd10      	pop	{r4, pc}
    6008:	4b03      	ldr	r3, [pc, #12]	; (6018 <mutex_free+0x2c>)
    600a:	4804      	ldr	r0, [pc, #16]	; (601c <mutex_free+0x30>)
    600c:	685b      	ldr	r3, [r3, #4]
    600e:	4798      	blx	r3
    6010:	e7ef      	b.n	5ff2 <mutex_free+0x6>
    6012:	bf00      	nop
    6014:	a95c5f2c 	.word	0xa95c5f2c
    6018:	2000c5b8 	.word	0x2000c5b8
    601c:	00009aa4 	.word	0x00009aa4

00006020 <mutex_lock>:
    6020:	b1c8      	cbz	r0, 6056 <mutex_lock+0x36>
    6022:	6843      	ldr	r3, [r0, #4]
    6024:	4a0d      	ldr	r2, [pc, #52]	; (605c <mutex_lock+0x3c>)
    6026:	4293      	cmp	r3, r2
    6028:	d013      	beq.n	6052 <mutex_lock+0x32>
    602a:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    602e:	d00e      	beq.n	604e <mutex_lock+0x2e>
    6030:	2301      	movs	r3, #1
    6032:	e850 2f00 	ldrex	r2, [r0]
    6036:	4619      	mov	r1, r3
    6038:	e840 1c00 	strex	ip, r1, [r0]
    603c:	f09c 0f00 	teq	ip, #0
    6040:	d1f7      	bne.n	6032 <mutex_lock+0x12>
    6042:	2a01      	cmp	r2, #1
    6044:	d0f5      	beq.n	6032 <mutex_lock+0x12>
    6046:	f3bf 8f5f 	dmb	sy
    604a:	2000      	movs	r0, #0
    604c:	4770      	bx	lr
    604e:	4804      	ldr	r0, [pc, #16]	; (6060 <mutex_lock+0x40>)
    6050:	4770      	bx	lr
    6052:	4804      	ldr	r0, [pc, #16]	; (6064 <mutex_lock+0x44>)
    6054:	4770      	bx	lr
    6056:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    605a:	4770      	bx	lr
    605c:	a95c5f2c 	.word	0xa95c5f2c
    6060:	ffff8fe9 	.word	0xffff8fe9
    6064:	ffff8fea 	.word	0xffff8fea

00006068 <mutex_unlock>:
    6068:	4603      	mov	r3, r0
    606a:	b180      	cbz	r0, 608e <mutex_unlock+0x26>
    606c:	6842      	ldr	r2, [r0, #4]
    606e:	4909      	ldr	r1, [pc, #36]	; (6094 <mutex_unlock+0x2c>)
    6070:	428a      	cmp	r2, r1
    6072:	d00a      	beq.n	608a <mutex_unlock+0x22>
    6074:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    6078:	d005      	beq.n	6086 <mutex_unlock+0x1e>
    607a:	f3bf 8f5f 	dmb	sy
    607e:	2200      	movs	r2, #0
    6080:	4610      	mov	r0, r2
    6082:	601a      	str	r2, [r3, #0]
    6084:	4770      	bx	lr
    6086:	4804      	ldr	r0, [pc, #16]	; (6098 <mutex_unlock+0x30>)
    6088:	4770      	bx	lr
    608a:	4804      	ldr	r0, [pc, #16]	; (609c <mutex_unlock+0x34>)
    608c:	4770      	bx	lr
    608e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    6092:	4770      	bx	lr
    6094:	a95c5f2c 	.word	0xa95c5f2c
    6098:	ffff8fe9 	.word	0xffff8fe9
    609c:	ffff8fea 	.word	0xffff8fea

000060a0 <mutex_init>:
    60a0:	b510      	push	{r4, lr}
    60a2:	4604      	mov	r4, r0
    60a4:	b120      	cbz	r0, 60b0 <mutex_init+0x10>
    60a6:	2300      	movs	r3, #0
    60a8:	4a03      	ldr	r2, [pc, #12]	; (60b8 <mutex_init+0x18>)
    60aa:	6023      	str	r3, [r4, #0]
    60ac:	6062      	str	r2, [r4, #4]
    60ae:	bd10      	pop	{r4, pc}
    60b0:	4802      	ldr	r0, [pc, #8]	; (60bc <mutex_init+0x1c>)
    60b2:	f7ff ff79 	bl	5fa8 <CC_PalAbort>
    60b6:	e7f6      	b.n	60a6 <mutex_init+0x6>
    60b8:	3a00003a 	.word	0x3a00003a
    60bc:	00009acc 	.word	0x00009acc

000060c0 <nrf_cc3xx_platform_set_mutexes>:
    60c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    60c4:	4c17      	ldr	r4, [pc, #92]	; (6124 <nrf_cc3xx_platform_set_mutexes+0x64>)
    60c6:	6847      	ldr	r7, [r0, #4]
    60c8:	6806      	ldr	r6, [r0, #0]
    60ca:	6067      	str	r7, [r4, #4]
    60cc:	6887      	ldr	r7, [r0, #8]
    60ce:	68c0      	ldr	r0, [r0, #12]
    60d0:	60a7      	str	r7, [r4, #8]
    60d2:	60e0      	str	r0, [r4, #12]
    60d4:	6026      	str	r6, [r4, #0]
    60d6:	6808      	ldr	r0, [r1, #0]
    60d8:	4b13      	ldr	r3, [pc, #76]	; (6128 <nrf_cc3xx_platform_set_mutexes+0x68>)
    60da:	4d14      	ldr	r5, [pc, #80]	; (612c <nrf_cc3xx_platform_set_mutexes+0x6c>)
    60dc:	6018      	str	r0, [r3, #0]
    60de:	6848      	ldr	r0, [r1, #4]
    60e0:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    60e4:	6058      	str	r0, [r3, #4]
    60e6:	6888      	ldr	r0, [r1, #8]
    60e8:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    60ec:	6098      	str	r0, [r3, #8]
    60ee:	68c8      	ldr	r0, [r1, #12]
    60f0:	6909      	ldr	r1, [r1, #16]
    60f2:	60d8      	str	r0, [r3, #12]
    60f4:	6119      	str	r1, [r3, #16]
    60f6:	d012      	beq.n	611e <nrf_cc3xx_platform_set_mutexes+0x5e>
    60f8:	2300      	movs	r3, #0
    60fa:	4a0d      	ldr	r2, [pc, #52]	; (6130 <nrf_cc3xx_platform_set_mutexes+0x70>)
    60fc:	f505 708a 	add.w	r0, r5, #276	; 0x114
    6100:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    6104:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    6108:	f8c5 2118 	str.w	r2, [r5, #280]	; 0x118
    610c:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
    6110:	47b0      	blx	r6
    6112:	6823      	ldr	r3, [r4, #0]
    6114:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    6118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    611c:	4718      	bx	r3
    611e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6122:	bf00      	nop
    6124:	2000c5c8 	.word	0x2000c5c8
    6128:	2000c5d8 	.word	0x2000c5d8
    612c:	2000e714 	.word	0x2000e714
    6130:	a95c5f2c 	.word	0xa95c5f2c

00006134 <mbedtls_platform_zeroize>:
    6134:	b138      	cbz	r0, 6146 <mbedtls_platform_zeroize+0x12>
    6136:	b131      	cbz	r1, 6146 <mbedtls_platform_zeroize+0x12>
    6138:	2200      	movs	r2, #0
    613a:	4401      	add	r1, r0
    613c:	4603      	mov	r3, r0
    613e:	3001      	adds	r0, #1
    6140:	4288      	cmp	r0, r1
    6142:	701a      	strb	r2, [r3, #0]
    6144:	d1fa      	bne.n	613c <mbedtls_platform_zeroize+0x8>
    6146:	4770      	bx	lr

00006148 <CC_LibInitNoRng>:
    6148:	b538      	push	{r3, r4, r5, lr}
    614a:	f000 f82f 	bl	61ac <CC_HalInit>
    614e:	b120      	cbz	r0, 615a <CC_LibInitNoRng+0x12>
    6150:	2403      	movs	r4, #3
    6152:	f000 f863 	bl	621c <CC_PalTerminate>
    6156:	4620      	mov	r0, r4
    6158:	bd38      	pop	{r3, r4, r5, pc}
    615a:	f000 f831 	bl	61c0 <CC_PalInit>
    615e:	b998      	cbnz	r0, 6188 <CC_LibInitNoRng+0x40>
    6160:	f000 f8ac 	bl	62bc <CC_PalPowerSaveModeSelect>
    6164:	b998      	cbnz	r0, 618e <CC_LibInitNoRng+0x46>
    6166:	4d0f      	ldr	r5, [pc, #60]	; (61a4 <CC_LibInitNoRng+0x5c>)
    6168:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    616c:	0e1b      	lsrs	r3, r3, #24
    616e:	2bf0      	cmp	r3, #240	; 0xf0
    6170:	d108      	bne.n	6184 <CC_LibInitNoRng+0x3c>
    6172:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    6176:	4b0c      	ldr	r3, [pc, #48]	; (61a8 <CC_LibInitNoRng+0x60>)
    6178:	429a      	cmp	r2, r3
    617a:	d00a      	beq.n	6192 <CC_LibInitNoRng+0x4a>
    617c:	2407      	movs	r4, #7
    617e:	f000 f817 	bl	61b0 <CC_HalTerminate>
    6182:	e7e6      	b.n	6152 <CC_LibInitNoRng+0xa>
    6184:	2406      	movs	r4, #6
    6186:	e7fa      	b.n	617e <CC_LibInitNoRng+0x36>
    6188:	2404      	movs	r4, #4
    618a:	4620      	mov	r0, r4
    618c:	bd38      	pop	{r3, r4, r5, pc}
    618e:	2400      	movs	r4, #0
    6190:	e7f5      	b.n	617e <CC_LibInitNoRng+0x36>
    6192:	2001      	movs	r0, #1
    6194:	f000 f892 	bl	62bc <CC_PalPowerSaveModeSelect>
    6198:	4604      	mov	r4, r0
    619a:	2800      	cmp	r0, #0
    619c:	d1f7      	bne.n	618e <CC_LibInitNoRng+0x46>
    619e:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    61a2:	e7d8      	b.n	6156 <CC_LibInitNoRng+0xe>
    61a4:	50841000 	.word	0x50841000
    61a8:	20e00000 	.word	0x20e00000

000061ac <CC_HalInit>:
    61ac:	2000      	movs	r0, #0
    61ae:	4770      	bx	lr

000061b0 <CC_HalTerminate>:
    61b0:	2000      	movs	r0, #0
    61b2:	4770      	bx	lr

000061b4 <CC_HalMaskInterrupt>:
    61b4:	4b01      	ldr	r3, [pc, #4]	; (61bc <CC_HalMaskInterrupt+0x8>)
    61b6:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    61ba:	4770      	bx	lr
    61bc:	50841000 	.word	0x50841000

000061c0 <CC_PalInit>:
    61c0:	b510      	push	{r4, lr}
    61c2:	4811      	ldr	r0, [pc, #68]	; (6208 <CC_PalInit+0x48>)
    61c4:	f000 f848 	bl	6258 <CC_PalMutexCreate>
    61c8:	b100      	cbz	r0, 61cc <CC_PalInit+0xc>
    61ca:	bd10      	pop	{r4, pc}
    61cc:	480f      	ldr	r0, [pc, #60]	; (620c <CC_PalInit+0x4c>)
    61ce:	f000 f843 	bl	6258 <CC_PalMutexCreate>
    61d2:	2800      	cmp	r0, #0
    61d4:	d1f9      	bne.n	61ca <CC_PalInit+0xa>
    61d6:	4c0e      	ldr	r4, [pc, #56]	; (6210 <CC_PalInit+0x50>)
    61d8:	4620      	mov	r0, r4
    61da:	f000 f83d 	bl	6258 <CC_PalMutexCreate>
    61de:	2800      	cmp	r0, #0
    61e0:	d1f3      	bne.n	61ca <CC_PalInit+0xa>
    61e2:	4b0c      	ldr	r3, [pc, #48]	; (6214 <CC_PalInit+0x54>)
    61e4:	480c      	ldr	r0, [pc, #48]	; (6218 <CC_PalInit+0x58>)
    61e6:	601c      	str	r4, [r3, #0]
    61e8:	f000 f836 	bl	6258 <CC_PalMutexCreate>
    61ec:	4601      	mov	r1, r0
    61ee:	2800      	cmp	r0, #0
    61f0:	d1eb      	bne.n	61ca <CC_PalInit+0xa>
    61f2:	f000 f82d 	bl	6250 <CC_PalDmaInit>
    61f6:	4604      	mov	r4, r0
    61f8:	b108      	cbz	r0, 61fe <CC_PalInit+0x3e>
    61fa:	4620      	mov	r0, r4
    61fc:	bd10      	pop	{r4, pc}
    61fe:	f000 f83f 	bl	6280 <CC_PalPowerSaveModeInit>
    6202:	4620      	mov	r0, r4
    6204:	e7fa      	b.n	61fc <CC_PalInit+0x3c>
    6206:	bf00      	nop
    6208:	2000c610 	.word	0x2000c610
    620c:	2000c604 	.word	0x2000c604
    6210:	2000c60c 	.word	0x2000c60c
    6214:	2000c614 	.word	0x2000c614
    6218:	2000c608 	.word	0x2000c608

0000621c <CC_PalTerminate>:
    621c:	b508      	push	{r3, lr}
    621e:	4808      	ldr	r0, [pc, #32]	; (6240 <CC_PalTerminate+0x24>)
    6220:	f000 f824 	bl	626c <CC_PalMutexDestroy>
    6224:	4807      	ldr	r0, [pc, #28]	; (6244 <CC_PalTerminate+0x28>)
    6226:	f000 f821 	bl	626c <CC_PalMutexDestroy>
    622a:	4807      	ldr	r0, [pc, #28]	; (6248 <CC_PalTerminate+0x2c>)
    622c:	f000 f81e 	bl	626c <CC_PalMutexDestroy>
    6230:	4806      	ldr	r0, [pc, #24]	; (624c <CC_PalTerminate+0x30>)
    6232:	f000 f81b 	bl	626c <CC_PalMutexDestroy>
    6236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    623a:	f000 b80b 	b.w	6254 <CC_PalDmaTerminate>
    623e:	bf00      	nop
    6240:	2000c610 	.word	0x2000c610
    6244:	2000c604 	.word	0x2000c604
    6248:	2000c60c 	.word	0x2000c60c
    624c:	2000c608 	.word	0x2000c608

00006250 <CC_PalDmaInit>:
    6250:	2000      	movs	r0, #0
    6252:	4770      	bx	lr

00006254 <CC_PalDmaTerminate>:
    6254:	4770      	bx	lr
    6256:	bf00      	nop

00006258 <CC_PalMutexCreate>:
    6258:	b508      	push	{r3, lr}
    625a:	4b03      	ldr	r3, [pc, #12]	; (6268 <CC_PalMutexCreate+0x10>)
    625c:	6802      	ldr	r2, [r0, #0]
    625e:	681b      	ldr	r3, [r3, #0]
    6260:	6810      	ldr	r0, [r2, #0]
    6262:	4798      	blx	r3
    6264:	2000      	movs	r0, #0
    6266:	bd08      	pop	{r3, pc}
    6268:	2000c5c8 	.word	0x2000c5c8

0000626c <CC_PalMutexDestroy>:
    626c:	b508      	push	{r3, lr}
    626e:	4b03      	ldr	r3, [pc, #12]	; (627c <CC_PalMutexDestroy+0x10>)
    6270:	6802      	ldr	r2, [r0, #0]
    6272:	685b      	ldr	r3, [r3, #4]
    6274:	6810      	ldr	r0, [r2, #0]
    6276:	4798      	blx	r3
    6278:	2000      	movs	r0, #0
    627a:	bd08      	pop	{r3, pc}
    627c:	2000c5c8 	.word	0x2000c5c8

00006280 <CC_PalPowerSaveModeInit>:
    6280:	b570      	push	{r4, r5, r6, lr}
    6282:	4c09      	ldr	r4, [pc, #36]	; (62a8 <CC_PalPowerSaveModeInit+0x28>)
    6284:	4d09      	ldr	r5, [pc, #36]	; (62ac <CC_PalPowerSaveModeInit+0x2c>)
    6286:	6920      	ldr	r0, [r4, #16]
    6288:	68ab      	ldr	r3, [r5, #8]
    628a:	4798      	blx	r3
    628c:	b118      	cbz	r0, 6296 <CC_PalPowerSaveModeInit+0x16>
    628e:	4b08      	ldr	r3, [pc, #32]	; (62b0 <CC_PalPowerSaveModeInit+0x30>)
    6290:	4808      	ldr	r0, [pc, #32]	; (62b4 <CC_PalPowerSaveModeInit+0x34>)
    6292:	685b      	ldr	r3, [r3, #4]
    6294:	4798      	blx	r3
    6296:	2100      	movs	r1, #0
    6298:	4a07      	ldr	r2, [pc, #28]	; (62b8 <CC_PalPowerSaveModeInit+0x38>)
    629a:	68eb      	ldr	r3, [r5, #12]
    629c:	6011      	str	r1, [r2, #0]
    629e:	6920      	ldr	r0, [r4, #16]
    62a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    62a4:	4718      	bx	r3
    62a6:	bf00      	nop
    62a8:	2000c5d8 	.word	0x2000c5d8
    62ac:	2000c5c8 	.word	0x2000c5c8
    62b0:	2000c5b8 	.word	0x2000c5b8
    62b4:	00009af0 	.word	0x00009af0
    62b8:	2000e710 	.word	0x2000e710

000062bc <CC_PalPowerSaveModeSelect>:
    62bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    62be:	4d1a      	ldr	r5, [pc, #104]	; (6328 <CC_PalPowerSaveModeSelect+0x6c>)
    62c0:	4e1a      	ldr	r6, [pc, #104]	; (632c <CC_PalPowerSaveModeSelect+0x70>)
    62c2:	4604      	mov	r4, r0
    62c4:	68b2      	ldr	r2, [r6, #8]
    62c6:	6928      	ldr	r0, [r5, #16]
    62c8:	4790      	blx	r2
    62ca:	b9e8      	cbnz	r0, 6308 <CC_PalPowerSaveModeSelect+0x4c>
    62cc:	4f18      	ldr	r7, [pc, #96]	; (6330 <CC_PalPowerSaveModeSelect+0x74>)
    62ce:	683b      	ldr	r3, [r7, #0]
    62d0:	b14c      	cbz	r4, 62e6 <CC_PalPowerSaveModeSelect+0x2a>
    62d2:	b1a3      	cbz	r3, 62fe <CC_PalPowerSaveModeSelect+0x42>
    62d4:	2b01      	cmp	r3, #1
    62d6:	d019      	beq.n	630c <CC_PalPowerSaveModeSelect+0x50>
    62d8:	3b01      	subs	r3, #1
    62da:	603b      	str	r3, [r7, #0]
    62dc:	6928      	ldr	r0, [r5, #16]
    62de:	68f3      	ldr	r3, [r6, #12]
    62e0:	4798      	blx	r3
    62e2:	2000      	movs	r0, #0
    62e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    62e6:	b943      	cbnz	r3, 62fa <CC_PalPowerSaveModeSelect+0x3e>
    62e8:	2101      	movs	r1, #1
    62ea:	4a12      	ldr	r2, [pc, #72]	; (6334 <CC_PalPowerSaveModeSelect+0x78>)
    62ec:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    62f0:	4911      	ldr	r1, [pc, #68]	; (6338 <CC_PalPowerSaveModeSelect+0x7c>)
    62f2:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    62f6:	2a00      	cmp	r2, #0
    62f8:	d1fb      	bne.n	62f2 <CC_PalPowerSaveModeSelect+0x36>
    62fa:	3301      	adds	r3, #1
    62fc:	603b      	str	r3, [r7, #0]
    62fe:	68f3      	ldr	r3, [r6, #12]
    6300:	6928      	ldr	r0, [r5, #16]
    6302:	4798      	blx	r3
    6304:	2000      	movs	r0, #0
    6306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6308:	480c      	ldr	r0, [pc, #48]	; (633c <CC_PalPowerSaveModeSelect+0x80>)
    630a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    630c:	4a0a      	ldr	r2, [pc, #40]	; (6338 <CC_PalPowerSaveModeSelect+0x7c>)
    630e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    6312:	2b00      	cmp	r3, #0
    6314:	d1fb      	bne.n	630e <CC_PalPowerSaveModeSelect+0x52>
    6316:	4a07      	ldr	r2, [pc, #28]	; (6334 <CC_PalPowerSaveModeSelect+0x78>)
    6318:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    631c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    6320:	f7ff ff48 	bl	61b4 <CC_HalMaskInterrupt>
    6324:	683b      	ldr	r3, [r7, #0]
    6326:	e7d7      	b.n	62d8 <CC_PalPowerSaveModeSelect+0x1c>
    6328:	2000c5d8 	.word	0x2000c5d8
    632c:	2000c5c8 	.word	0x2000c5c8
    6330:	2000e710 	.word	0x2000e710
    6334:	50840000 	.word	0x50840000
    6338:	50841000 	.word	0x50841000
    633c:	ffff8fe9 	.word	0xffff8fe9

00006340 <verify_context_ecdsa_verify_secp256r1>:
    6340:	b130      	cbz	r0, 6350 <verify_context_ecdsa_verify_secp256r1+0x10>
    6342:	6802      	ldr	r2, [r0, #0]
    6344:	4b03      	ldr	r3, [pc, #12]	; (6354 <verify_context_ecdsa_verify_secp256r1+0x14>)
    6346:	4804      	ldr	r0, [pc, #16]	; (6358 <verify_context_ecdsa_verify_secp256r1+0x18>)
    6348:	429a      	cmp	r2, r3
    634a:	bf08      	it	eq
    634c:	2000      	moveq	r0, #0
    634e:	4770      	bx	lr
    6350:	4802      	ldr	r0, [pc, #8]	; (635c <verify_context_ecdsa_verify_secp256r1+0x1c>)
    6352:	4770      	bx	lr
    6354:	bbaa55dd 	.word	0xbbaa55dd
    6358:	00f00882 	.word	0x00f00882
    635c:	00f00871 	.word	0x00f00871

00006360 <nrf_cc310_bl_ecdsa_verify_init_secp256r1>:
    6360:	b538      	push	{r3, r4, r5, lr}
    6362:	460d      	mov	r5, r1
    6364:	4604      	mov	r4, r0
    6366:	b1b0      	cbz	r0, 6396 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x36>
    6368:	22a0      	movs	r2, #160	; 0xa0
    636a:	2100      	movs	r1, #0
    636c:	3004      	adds	r0, #4
    636e:	f003 f897 	bl	94a0 <SaSi_PalMemSet>
    6372:	b195      	cbz	r5, 639a <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x3a>
    6374:	2208      	movs	r2, #8
    6376:	4629      	mov	r1, r5
    6378:	f104 0064 	add.w	r0, r4, #100	; 0x64
    637c:	f003 f896 	bl	94ac <CRYS_COMMON_ReverseMemcpy32>
    6380:	2208      	movs	r2, #8
    6382:	f105 0120 	add.w	r1, r5, #32
    6386:	f104 0084 	add.w	r0, r4, #132	; 0x84
    638a:	f003 f88f 	bl	94ac <CRYS_COMMON_ReverseMemcpy32>
    638e:	2000      	movs	r0, #0
    6390:	4b03      	ldr	r3, [pc, #12]	; (63a0 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x40>)
    6392:	6023      	str	r3, [r4, #0]
    6394:	bd38      	pop	{r3, r4, r5, pc}
    6396:	4803      	ldr	r0, [pc, #12]	; (63a4 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x44>)
    6398:	e7fc      	b.n	6394 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x34>
    639a:	4803      	ldr	r0, [pc, #12]	; (63a8 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x48>)
    639c:	e7fa      	b.n	6394 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x34>
    639e:	bf00      	nop
    63a0:	bbaa55dd 	.word	0xbbaa55dd
    63a4:	00f00871 	.word	0x00f00871
    63a8:	00f00883 	.word	0x00f00883

000063ac <nrf_cc310_bl_ecdsa_verify_hash_secp256r1>:
    63ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    63b0:	4605      	mov	r5, r0
    63b2:	460e      	mov	r6, r1
    63b4:	4699      	mov	r9, r3
    63b6:	4611      	mov	r1, r2
    63b8:	f7ff ffc2 	bl	6340 <verify_context_ecdsa_verify_secp256r1>
    63bc:	4604      	mov	r4, r0
    63be:	2800      	cmp	r0, #0
    63c0:	f040 8084 	bne.w	64cc <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    63c4:	2e00      	cmp	r6, #0
    63c6:	f000 8085 	beq.w	64d4 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x128>
    63ca:	2900      	cmp	r1, #0
    63cc:	f000 8084 	beq.w	64d8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x12c>
    63d0:	f1b9 0f20 	cmp.w	r9, #32
    63d4:	f040 8082 	bne.w	64dc <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x130>
    63d8:	f105 0444 	add.w	r4, r5, #68	; 0x44
    63dc:	2208      	movs	r2, #8
    63de:	f105 0804 	add.w	r8, r5, #4
    63e2:	4620      	mov	r0, r4
    63e4:	f003 f862 	bl	94ac <CRYS_COMMON_ReverseMemcpy32>
    63e8:	f105 0724 	add.w	r7, r5, #36	; 0x24
    63ec:	2208      	movs	r2, #8
    63ee:	4631      	mov	r1, r6
    63f0:	4640      	mov	r0, r8
    63f2:	f003 f85b 	bl	94ac <CRYS_COMMON_ReverseMemcpy32>
    63f6:	f106 0120 	add.w	r1, r6, #32
    63fa:	2208      	movs	r2, #8
    63fc:	4638      	mov	r0, r7
    63fe:	f003 f855 	bl	94ac <CRYS_COMMON_ReverseMemcpy32>
    6402:	a902      	add	r1, sp, #8
    6404:	f841 9d04 	str.w	r9, [r1, #-4]!
    6408:	f44f 7080 	mov.w	r0, #256	; 0x100
    640c:	f003 f842 	bl	9494 <PkaInitAndMutexLock>
    6410:	2800      	cmp	r0, #0
    6412:	d165      	bne.n	64e0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x134>
    6414:	f44f 7380 	mov.w	r3, #256	; 0x100
    6418:	4a32      	ldr	r2, [pc, #200]	; (64e4 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x138>)
    641a:	2101      	movs	r1, #1
    641c:	6013      	str	r3, [r2, #0]
    641e:	6093      	str	r3, [r2, #8]
    6420:	2308      	movs	r3, #8
    6422:	4a31      	ldr	r2, [pc, #196]	; (64e8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x13c>)
    6424:	f000 fb34 	bl	6a90 <PkaCopyDataIntoPkaReg>
    6428:	2101      	movs	r1, #1
    642a:	2305      	movs	r3, #5
    642c:	4608      	mov	r0, r1
    642e:	4a2f      	ldr	r2, [pc, #188]	; (64ec <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x140>)
    6430:	f000 fb2e 	bl	6a90 <PkaCopyDataIntoPkaReg>
    6434:	2308      	movs	r3, #8
    6436:	4642      	mov	r2, r8
    6438:	2101      	movs	r1, #1
    643a:	201c      	movs	r0, #28
    643c:	f000 fb28 	bl	6a90 <PkaCopyDataIntoPkaReg>
    6440:	2308      	movs	r3, #8
    6442:	463a      	mov	r2, r7
    6444:	2101      	movs	r1, #1
    6446:	2003      	movs	r0, #3
    6448:	f000 fb22 	bl	6a90 <PkaCopyDataIntoPkaReg>
    644c:	4622      	mov	r2, r4
    644e:	2308      	movs	r3, #8
    6450:	2101      	movs	r1, #1
    6452:	2002      	movs	r0, #2
    6454:	f000 fb1c 	bl	6a90 <PkaCopyDataIntoPkaReg>
    6458:	2308      	movs	r3, #8
    645a:	4a25      	ldr	r2, [pc, #148]	; (64f0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x144>)
    645c:	2101      	movs	r1, #1
    645e:	201a      	movs	r0, #26
    6460:	f000 fb16 	bl	6a90 <PkaCopyDataIntoPkaReg>
    6464:	2305      	movs	r3, #5
    6466:	4a23      	ldr	r2, [pc, #140]	; (64f4 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x148>)
    6468:	2101      	movs	r1, #1
    646a:	201b      	movs	r0, #27
    646c:	f000 fb10 	bl	6a90 <PkaCopyDataIntoPkaReg>
    6470:	2308      	movs	r3, #8
    6472:	4a21      	ldr	r2, [pc, #132]	; (64f8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x14c>)
    6474:	2101      	movs	r1, #1
    6476:	2014      	movs	r0, #20
    6478:	f000 fb0a 	bl	6a90 <PkaCopyDataIntoPkaReg>
    647c:	2308      	movs	r3, #8
    647e:	4a1f      	ldr	r2, [pc, #124]	; (64fc <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x150>)
    6480:	2101      	movs	r1, #1
    6482:	2015      	movs	r0, #21
    6484:	f000 fb04 	bl	6a90 <PkaCopyDataIntoPkaReg>
    6488:	2308      	movs	r3, #8
    648a:	f105 0264 	add.w	r2, r5, #100	; 0x64
    648e:	2101      	movs	r1, #1
    6490:	2016      	movs	r0, #22
    6492:	f000 fafd 	bl	6a90 <PkaCopyDataIntoPkaReg>
    6496:	2308      	movs	r3, #8
    6498:	f105 0284 	add.w	r2, r5, #132	; 0x84
    649c:	2101      	movs	r1, #1
    649e:	2017      	movs	r0, #23
    64a0:	f000 faf6 	bl	6a90 <PkaCopyDataIntoPkaReg>
    64a4:	2308      	movs	r3, #8
    64a6:	4a16      	ldr	r2, [pc, #88]	; (6500 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x154>)
    64a8:	2101      	movs	r1, #1
    64aa:	200b      	movs	r0, #11
    64ac:	f000 faf0 	bl	6a90 <PkaCopyDataIntoPkaReg>
    64b0:	f000 fb4a 	bl	6b48 <PkaEcdsaVerify>
    64b4:	4604      	mov	r4, r0
    64b6:	9801      	ldr	r0, [sp, #4]
    64b8:	f000 fad8 	bl	6a6c <PkaFinishAndMutexUnlock>
    64bc:	4b11      	ldr	r3, [pc, #68]	; (6504 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x158>)
    64be:	2c00      	cmp	r4, #0
    64c0:	bf18      	it	ne
    64c2:	461c      	movne	r4, r3
    64c4:	21a4      	movs	r1, #164	; 0xa4
    64c6:	4628      	mov	r0, r5
    64c8:	f002 ffec 	bl	94a4 <SaSi_PalMemSetZero>
    64cc:	4620      	mov	r0, r4
    64ce:	b003      	add	sp, #12
    64d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    64d4:	4c0c      	ldr	r4, [pc, #48]	; (6508 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x15c>)
    64d6:	e7f9      	b.n	64cc <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    64d8:	4c0c      	ldr	r4, [pc, #48]	; (650c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x160>)
    64da:	e7f7      	b.n	64cc <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    64dc:	4c0c      	ldr	r4, [pc, #48]	; (6510 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x164>)
    64de:	e7f5      	b.n	64cc <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    64e0:	4c08      	ldr	r4, [pc, #32]	; (6504 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x158>)
    64e2:	e7ef      	b.n	64c4 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x118>
    64e4:	50841090 	.word	0x50841090
    64e8:	00009b50 	.word	0x00009b50
    64ec:	00009bc8 	.word	0x00009bc8
    64f0:	00009b10 	.word	0x00009b10
    64f4:	00009bb4 	.word	0x00009bb4
    64f8:	00009b74 	.word	0x00009b74
    64fc:	00009b94 	.word	0x00009b94
    6500:	00009b30 	.word	0x00009b30
    6504:	00f00884 	.word	0x00f00884
    6508:	00f00876 	.word	0x00f00876
    650c:	00f00880 	.word	0x00f00880
    6510:	00f00881 	.word	0x00f00881

00006514 <set_digest_in_hw_sha256>:
    6514:	69c2      	ldr	r2, [r0, #28]
    6516:	4b0c      	ldr	r3, [pc, #48]	; (6548 <set_digest_in_hw_sha256+0x34>)
    6518:	601a      	str	r2, [r3, #0]
    651a:	6982      	ldr	r2, [r0, #24]
    651c:	f843 2c04 	str.w	r2, [r3, #-4]
    6520:	6942      	ldr	r2, [r0, #20]
    6522:	f843 2c08 	str.w	r2, [r3, #-8]
    6526:	6902      	ldr	r2, [r0, #16]
    6528:	f843 2c0c 	str.w	r2, [r3, #-12]
    652c:	68c2      	ldr	r2, [r0, #12]
    652e:	f843 2c10 	str.w	r2, [r3, #-16]
    6532:	6882      	ldr	r2, [r0, #8]
    6534:	f843 2c14 	str.w	r2, [r3, #-20]
    6538:	6842      	ldr	r2, [r0, #4]
    653a:	f843 2c18 	str.w	r2, [r3, #-24]
    653e:	6802      	ldr	r2, [r0, #0]
    6540:	f843 2c1c 	str.w	r2, [r3, #-28]
    6544:	4770      	bx	lr
    6546:	bf00      	nop
    6548:	5084165c 	.word	0x5084165c

0000654c <read_digest_in_hw_sha256>:
    654c:	4b0c      	ldr	r3, [pc, #48]	; (6580 <read_digest_in_hw_sha256+0x34>)
    654e:	681b      	ldr	r3, [r3, #0]
    6550:	61c3      	str	r3, [r0, #28]
    6552:	4b0c      	ldr	r3, [pc, #48]	; (6584 <read_digest_in_hw_sha256+0x38>)
    6554:	681b      	ldr	r3, [r3, #0]
    6556:	6183      	str	r3, [r0, #24]
    6558:	4b0b      	ldr	r3, [pc, #44]	; (6588 <read_digest_in_hw_sha256+0x3c>)
    655a:	681b      	ldr	r3, [r3, #0]
    655c:	6143      	str	r3, [r0, #20]
    655e:	4b0b      	ldr	r3, [pc, #44]	; (658c <read_digest_in_hw_sha256+0x40>)
    6560:	681b      	ldr	r3, [r3, #0]
    6562:	6103      	str	r3, [r0, #16]
    6564:	4b0a      	ldr	r3, [pc, #40]	; (6590 <read_digest_in_hw_sha256+0x44>)
    6566:	681b      	ldr	r3, [r3, #0]
    6568:	60c3      	str	r3, [r0, #12]
    656a:	4b0a      	ldr	r3, [pc, #40]	; (6594 <read_digest_in_hw_sha256+0x48>)
    656c:	681b      	ldr	r3, [r3, #0]
    656e:	6083      	str	r3, [r0, #8]
    6570:	4b09      	ldr	r3, [pc, #36]	; (6598 <read_digest_in_hw_sha256+0x4c>)
    6572:	681b      	ldr	r3, [r3, #0]
    6574:	6043      	str	r3, [r0, #4]
    6576:	4b09      	ldr	r3, [pc, #36]	; (659c <read_digest_in_hw_sha256+0x50>)
    6578:	681b      	ldr	r3, [r3, #0]
    657a:	6003      	str	r3, [r0, #0]
    657c:	4770      	bx	lr
    657e:	bf00      	nop
    6580:	5084165c 	.word	0x5084165c
    6584:	50841658 	.word	0x50841658
    6588:	50841654 	.word	0x50841654
    658c:	50841650 	.word	0x50841650
    6590:	5084164c 	.word	0x5084164c
    6594:	50841648 	.word	0x50841648
    6598:	50841644 	.word	0x50841644
    659c:	50841640 	.word	0x50841640

000065a0 <verify_context_hash_sha256>:
    65a0:	b130      	cbz	r0, 65b0 <verify_context_hash_sha256+0x10>
    65a2:	6802      	ldr	r2, [r0, #0]
    65a4:	4b03      	ldr	r3, [pc, #12]	; (65b4 <verify_context_hash_sha256+0x14>)
    65a6:	4804      	ldr	r0, [pc, #16]	; (65b8 <verify_context_hash_sha256+0x18>)
    65a8:	429a      	cmp	r2, r3
    65aa:	bf08      	it	eq
    65ac:	2000      	moveq	r0, #0
    65ae:	4770      	bx	lr
    65b0:	4802      	ldr	r0, [pc, #8]	; (65bc <verify_context_hash_sha256+0x1c>)
    65b2:	4770      	bx	lr
    65b4:	bbaa55dd 	.word	0xbbaa55dd
    65b8:	00f00202 	.word	0x00f00202
    65bc:	00f00200 	.word	0x00f00200

000065c0 <nrf_cc310_bl_hash_sha256_init>:
    65c0:	b538      	push	{r3, r4, r5, lr}
    65c2:	4604      	mov	r4, r0
    65c4:	b168      	cbz	r0, 65e2 <nrf_cc310_bl_hash_sha256_init+0x22>
    65c6:	1d05      	adds	r5, r0, #4
    65c8:	2170      	movs	r1, #112	; 0x70
    65ca:	4628      	mov	r0, r5
    65cc:	f002 ff6a 	bl	94a4 <SaSi_PalMemSetZero>
    65d0:	4628      	mov	r0, r5
    65d2:	2220      	movs	r2, #32
    65d4:	4904      	ldr	r1, [pc, #16]	; (65e8 <nrf_cc310_bl_hash_sha256_init+0x28>)
    65d6:	f002 ff61 	bl	949c <SaSi_PalMemCopy>
    65da:	2000      	movs	r0, #0
    65dc:	4b03      	ldr	r3, [pc, #12]	; (65ec <nrf_cc310_bl_hash_sha256_init+0x2c>)
    65de:	6023      	str	r3, [r4, #0]
    65e0:	bd38      	pop	{r3, r4, r5, pc}
    65e2:	4803      	ldr	r0, [pc, #12]	; (65f0 <nrf_cc310_bl_hash_sha256_init+0x30>)
    65e4:	e7fc      	b.n	65e0 <nrf_cc310_bl_hash_sha256_init+0x20>
    65e6:	bf00      	nop
    65e8:	00009bdc 	.word	0x00009bdc
    65ec:	bbaa55dd 	.word	0xbbaa55dd
    65f0:	00f00200 	.word	0x00f00200

000065f4 <nrf_cc310_bl_hash_sha256_update>:
    65f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    65f8:	b085      	sub	sp, #20
    65fa:	4615      	mov	r5, r2
    65fc:	466f      	mov	r7, sp
    65fe:	4b27      	ldr	r3, [pc, #156]	; (669c <nrf_cc310_bl_hash_sha256_update+0xa8>)
    6600:	4604      	mov	r4, r0
    6602:	460e      	mov	r6, r1
    6604:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6606:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    660a:	b92d      	cbnz	r5, 6618 <nrf_cc310_bl_hash_sha256_update+0x24>
    660c:	f04f 0900 	mov.w	r9, #0
    6610:	4648      	mov	r0, r9
    6612:	b005      	add	sp, #20
    6614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6618:	4620      	mov	r0, r4
    661a:	f7ff ffc1 	bl	65a0 <verify_context_hash_sha256>
    661e:	4681      	mov	r9, r0
    6620:	2800      	cmp	r0, #0
    6622:	d1f5      	bne.n	6610 <nrf_cc310_bl_hash_sha256_update+0x1c>
    6624:	1d23      	adds	r3, r4, #4
    6626:	9301      	str	r3, [sp, #4]
    6628:	6a63      	ldr	r3, [r4, #36]	; 0x24
    662a:	bba3      	cbnz	r3, 6696 <nrf_cc310_bl_hash_sha256_update+0xa2>
    662c:	6f23      	ldr	r3, [r4, #112]	; 0x70
    662e:	b18b      	cbz	r3, 6654 <nrf_cc310_bl_hash_sha256_update+0x60>
    6630:	f1c3 0840 	rsb	r8, r3, #64	; 0x40
    6634:	45a8      	cmp	r8, r5
    6636:	bf28      	it	cs
    6638:	46a8      	movcs	r8, r5
    663a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    663e:	4631      	mov	r1, r6
    6640:	4418      	add	r0, r3
    6642:	4642      	mov	r2, r8
    6644:	f002 ff2a 	bl	949c <SaSi_PalMemCopy>
    6648:	6f23      	ldr	r3, [r4, #112]	; 0x70
    664a:	4446      	add	r6, r8
    664c:	4443      	add	r3, r8
    664e:	6723      	str	r3, [r4, #112]	; 0x70
    6650:	eba5 0508 	sub.w	r5, r5, r8
    6654:	6f22      	ldr	r2, [r4, #112]	; 0x70
    6656:	2a40      	cmp	r2, #64	; 0x40
    6658:	d106      	bne.n	6668 <nrf_cc310_bl_hash_sha256_update+0x74>
    665a:	f104 0130 	add.w	r1, r4, #48	; 0x30
    665e:	4638      	mov	r0, r7
    6660:	f000 fbb4 	bl	6dcc <nrf_cc310_bl_hash_update_internal>
    6664:	2300      	movs	r3, #0
    6666:	6723      	str	r3, [r4, #112]	; 0x70
    6668:	f005 083f 	and.w	r8, r5, #63	; 0x3f
    666c:	f035 053f 	bics.w	r5, r5, #63	; 0x3f
    6670:	d005      	beq.n	667e <nrf_cc310_bl_hash_sha256_update+0x8a>
    6672:	4631      	mov	r1, r6
    6674:	462a      	mov	r2, r5
    6676:	4638      	mov	r0, r7
    6678:	f000 fba8 	bl	6dcc <nrf_cc310_bl_hash_update_internal>
    667c:	442e      	add	r6, r5
    667e:	f1b8 0f00 	cmp.w	r8, #0
    6682:	d0c3      	beq.n	660c <nrf_cc310_bl_hash_sha256_update+0x18>
    6684:	4642      	mov	r2, r8
    6686:	4631      	mov	r1, r6
    6688:	f104 0030 	add.w	r0, r4, #48	; 0x30
    668c:	f002 ff06 	bl	949c <SaSi_PalMemCopy>
    6690:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
    6694:	e7bc      	b.n	6610 <nrf_cc310_bl_hash_sha256_update+0x1c>
    6696:	f8df 9008 	ldr.w	r9, [pc, #8]	; 66a0 <nrf_cc310_bl_hash_sha256_update+0xac>
    669a:	e7b9      	b.n	6610 <nrf_cc310_bl_hash_sha256_update+0x1c>
    669c:	00009820 	.word	0x00009820
    66a0:	00f0020c 	.word	0x00f0020c

000066a4 <nrf_cc310_bl_hash_sha256_finalize>:
    66a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    66a8:	4604      	mov	r4, r0
    66aa:	466f      	mov	r7, sp
    66ac:	4b13      	ldr	r3, [pc, #76]	; (66fc <nrf_cc310_bl_hash_sha256_finalize+0x58>)
    66ae:	460e      	mov	r6, r1
    66b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    66b2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    66b6:	4620      	mov	r0, r4
    66b8:	f7ff ff72 	bl	65a0 <verify_context_hash_sha256>
    66bc:	4680      	mov	r8, r0
    66be:	b9b0      	cbnz	r0, 66ee <nrf_cc310_bl_hash_sha256_finalize+0x4a>
    66c0:	b1ce      	cbz	r6, 66f6 <nrf_cc310_bl_hash_sha256_finalize+0x52>
    66c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    66c4:	1d25      	adds	r5, r4, #4
    66c6:	9501      	str	r5, [sp, #4]
    66c8:	b93b      	cbnz	r3, 66da <nrf_cc310_bl_hash_sha256_finalize+0x36>
    66ca:	2301      	movs	r3, #1
    66cc:	6f22      	ldr	r2, [r4, #112]	; 0x70
    66ce:	6263      	str	r3, [r4, #36]	; 0x24
    66d0:	f104 0130 	add.w	r1, r4, #48	; 0x30
    66d4:	4638      	mov	r0, r7
    66d6:	f000 fb79 	bl	6dcc <nrf_cc310_bl_hash_update_internal>
    66da:	462b      	mov	r3, r5
    66dc:	3e04      	subs	r6, #4
    66de:	3424      	adds	r4, #36	; 0x24
    66e0:	f853 2b04 	ldr.w	r2, [r3], #4
    66e4:	ba12      	rev	r2, r2
    66e6:	42a3      	cmp	r3, r4
    66e8:	f846 2f04 	str.w	r2, [r6, #4]!
    66ec:	d1f8      	bne.n	66e0 <nrf_cc310_bl_hash_sha256_finalize+0x3c>
    66ee:	4640      	mov	r0, r8
    66f0:	b004      	add	sp, #16
    66f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    66f6:	f8df 8008 	ldr.w	r8, [pc, #8]	; 6700 <nrf_cc310_bl_hash_sha256_finalize+0x5c>
    66fa:	e7f8      	b.n	66ee <nrf_cc310_bl_hash_sha256_finalize+0x4a>
    66fc:	00009820 	.word	0x00009820
    6700:	00f00205 	.word	0x00f00205

00006704 <nrf_cc310_bl_init>:
    6704:	4b08      	ldr	r3, [pc, #32]	; (6728 <nrf_cc310_bl_init+0x24>)
    6706:	681b      	ldr	r3, [r3, #0]
    6708:	0e1b      	lsrs	r3, r3, #24
    670a:	2bf0      	cmp	r3, #240	; 0xf0
    670c:	d108      	bne.n	6720 <nrf_cc310_bl_init+0x1c>
    670e:	4b07      	ldr	r3, [pc, #28]	; (672c <nrf_cc310_bl_init+0x28>)
    6710:	681a      	ldr	r2, [r3, #0]
    6712:	4b07      	ldr	r3, [pc, #28]	; (6730 <nrf_cc310_bl_init+0x2c>)
    6714:	429a      	cmp	r2, r3
    6716:	d105      	bne.n	6724 <nrf_cc310_bl_init+0x20>
    6718:	2000      	movs	r0, #0
    671a:	4b06      	ldr	r3, [pc, #24]	; (6734 <nrf_cc310_bl_init+0x30>)
    671c:	6018      	str	r0, [r3, #0]
    671e:	4770      	bx	lr
    6720:	2005      	movs	r0, #5
    6722:	4770      	bx	lr
    6724:	2006      	movs	r0, #6
    6726:	4770      	bx	lr
    6728:	50841928 	.word	0x50841928
    672c:	50841a24 	.word	0x50841a24
    6730:	20e00000 	.word	0x20e00000
    6734:	50841a0c 	.word	0x50841a0c

00006738 <PkaSetRegsMapTab>:
    6738:	2200      	movs	r2, #0
    673a:	b530      	push	{r4, r5, lr}
    673c:	4613      	mov	r3, r2
    673e:	f640 75fc 	movw	r5, #4092	; 0xffc
    6742:	0049      	lsls	r1, r1, #1
    6744:	3802      	subs	r0, #2
    6746:	f102 54a1 	add.w	r4, r2, #337641472	; 0x14200000
    674a:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
    674e:	4290      	cmp	r0, r2
    6750:	ea4f 0484 	mov.w	r4, r4, lsl #2
    6754:	f102 0201 	add.w	r2, r2, #1
    6758:	bfca      	itet	gt
    675a:	6023      	strgt	r3, [r4, #0]
    675c:	6025      	strle	r5, [r4, #0]
    675e:	185b      	addgt	r3, r3, r1
    6760:	2a1e      	cmp	r2, #30
    6762:	d1f0      	bne.n	6746 <PkaSetRegsMapTab+0xe>
    6764:	4a03      	ldr	r2, [pc, #12]	; (6774 <PkaSetRegsMapTab+0x3c>)
    6766:	6013      	str	r3, [r2, #0]
    6768:	440b      	add	r3, r1
    676a:	6053      	str	r3, [r2, #4]
    676c:	4b02      	ldr	r3, [pc, #8]	; (6778 <PkaSetRegsMapTab+0x40>)
    676e:	4a03      	ldr	r2, [pc, #12]	; (677c <PkaSetRegsMapTab+0x44>)
    6770:	601a      	str	r2, [r3, #0]
    6772:	bd30      	pop	{r4, r5, pc}
    6774:	50841078 	.word	0x50841078
    6778:	50841084 	.word	0x50841084
    677c:	000ff820 	.word	0x000ff820

00006780 <PkaGetRegEffectiveSizeInBits>:
    6780:	4b1e      	ldr	r3, [pc, #120]	; (67fc <PkaGetRegEffectiveSizeInBits+0x7c>)
    6782:	b530      	push	{r4, r5, lr}
    6784:	461a      	mov	r2, r3
    6786:	b085      	sub	sp, #20
    6788:	6819      	ldr	r1, [r3, #0]
    678a:	9100      	str	r1, [sp, #0]
    678c:	9900      	ldr	r1, [sp, #0]
    678e:	07cc      	lsls	r4, r1, #31
    6790:	d5fa      	bpl.n	6788 <PkaGetRegEffectiveSizeInBits+0x8>
    6792:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    6796:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    679a:	0080      	lsls	r0, r0, #2
    679c:	6801      	ldr	r1, [r0, #0]
    679e:	6813      	ldr	r3, [r2, #0]
    67a0:	9301      	str	r3, [sp, #4]
    67a2:	9b01      	ldr	r3, [sp, #4]
    67a4:	07d8      	lsls	r0, r3, #31
    67a6:	d5fa      	bpl.n	679e <PkaGetRegEffectiveSizeInBits+0x1e>
    67a8:	4b15      	ldr	r3, [pc, #84]	; (6800 <PkaGetRegEffectiveSizeInBits+0x80>)
    67aa:	4c16      	ldr	r4, [pc, #88]	; (6804 <PkaGetRegEffectiveSizeInBits+0x84>)
    67ac:	6818      	ldr	r0, [r3, #0]
    67ae:	2320      	movs	r3, #32
    67b0:	301f      	adds	r0, #31
    67b2:	fb90 f0f3 	sdiv	r0, r0, r3
    67b6:	4d14      	ldr	r5, [pc, #80]	; (6808 <PkaGetRegEffectiveSizeInBits+0x88>)
    67b8:	3801      	subs	r0, #1
    67ba:	2800      	cmp	r0, #0
    67bc:	da10      	bge.n	67e0 <PkaGetRegEffectiveSizeInBits+0x60>
    67be:	2300      	movs	r3, #0
    67c0:	3001      	adds	r0, #1
    67c2:	0140      	lsls	r0, r0, #5
    67c4:	b153      	cbz	r3, 67dc <PkaGetRegEffectiveSizeInBits+0x5c>
    67c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    67ca:	f1a0 0120 	sub.w	r1, r0, #32
    67ce:	4213      	tst	r3, r2
    67d0:	d104      	bne.n	67dc <PkaGetRegEffectiveSizeInBits+0x5c>
    67d2:	3801      	subs	r0, #1
    67d4:	4288      	cmp	r0, r1
    67d6:	ea4f 0252 	mov.w	r2, r2, lsr #1
    67da:	d1f8      	bne.n	67ce <PkaGetRegEffectiveSizeInBits+0x4e>
    67dc:	b005      	add	sp, #20
    67de:	bd30      	pop	{r4, r5, pc}
    67e0:	6813      	ldr	r3, [r2, #0]
    67e2:	9303      	str	r3, [sp, #12]
    67e4:	9b03      	ldr	r3, [sp, #12]
    67e6:	07db      	lsls	r3, r3, #31
    67e8:	d5fa      	bpl.n	67e0 <PkaGetRegEffectiveSizeInBits+0x60>
    67ea:	1843      	adds	r3, r0, r1
    67ec:	6023      	str	r3, [r4, #0]
    67ee:	682b      	ldr	r3, [r5, #0]
    67f0:	9302      	str	r3, [sp, #8]
    67f2:	9b02      	ldr	r3, [sp, #8]
    67f4:	2b00      	cmp	r3, #0
    67f6:	d1e3      	bne.n	67c0 <PkaGetRegEffectiveSizeInBits+0x40>
    67f8:	3801      	subs	r0, #1
    67fa:	e7de      	b.n	67ba <PkaGetRegEffectiveSizeInBits+0x3a>
    67fc:	508410b4 	.word	0x508410b4
    6800:	508410ac 	.word	0x508410ac
    6804:	508410e4 	.word	0x508410e4
    6808:	508410dc 	.word	0x508410dc

0000680c <PkaGetNextMsBit>:
    680c:	b5f0      	push	{r4, r5, r6, r7, lr}
    680e:	681d      	ldr	r5, [r3, #0]
    6810:	b085      	sub	sp, #20
    6812:	f001 041f 	and.w	r4, r1, #31
    6816:	b90d      	cbnz	r5, 681c <PkaGetNextMsBit+0x10>
    6818:	2c1f      	cmp	r4, #31
    681a:	d128      	bne.n	686e <PkaGetNextMsBit+0x62>
    681c:	4d17      	ldr	r5, [pc, #92]	; (687c <PkaGetNextMsBit+0x70>)
    681e:	462e      	mov	r6, r5
    6820:	682f      	ldr	r7, [r5, #0]
    6822:	9701      	str	r7, [sp, #4]
    6824:	9f01      	ldr	r7, [sp, #4]
    6826:	07ff      	lsls	r7, r7, #31
    6828:	d5fa      	bpl.n	6820 <PkaGetNextMsBit+0x14>
    682a:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    682e:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    6832:	0080      	lsls	r0, r0, #2
    6834:	6800      	ldr	r0, [r0, #0]
    6836:	6835      	ldr	r5, [r6, #0]
    6838:	9503      	str	r5, [sp, #12]
    683a:	9d03      	ldr	r5, [sp, #12]
    683c:	07ed      	lsls	r5, r5, #31
    683e:	d5fa      	bpl.n	6836 <PkaGetNextMsBit+0x2a>
    6840:	2c1f      	cmp	r4, #31
    6842:	eb00 1061 	add.w	r0, r0, r1, asr #5
    6846:	bf18      	it	ne
    6848:	43c9      	mvnne	r1, r1
    684a:	4d0d      	ldr	r5, [pc, #52]	; (6880 <PkaGetNextMsBit+0x74>)
    684c:	bf18      	it	ne
    684e:	f001 011f 	andne.w	r1, r1, #31
    6852:	6028      	str	r0, [r5, #0]
    6854:	480b      	ldr	r0, [pc, #44]	; (6884 <PkaGetNextMsBit+0x78>)
    6856:	6800      	ldr	r0, [r0, #0]
    6858:	9002      	str	r0, [sp, #8]
    685a:	9802      	ldr	r0, [sp, #8]
    685c:	bf1c      	itt	ne
    685e:	fa00 f101 	lslne.w	r1, r0, r1
    6862:	6011      	strne	r1, [r2, #0]
    6864:	f04f 0100 	mov.w	r1, #0
    6868:	bf08      	it	eq
    686a:	6010      	streq	r0, [r2, #0]
    686c:	6019      	str	r1, [r3, #0]
    686e:	6810      	ldr	r0, [r2, #0]
    6870:	0043      	lsls	r3, r0, #1
    6872:	0fc0      	lsrs	r0, r0, #31
    6874:	6013      	str	r3, [r2, #0]
    6876:	b005      	add	sp, #20
    6878:	bdf0      	pop	{r4, r5, r6, r7, pc}
    687a:	bf00      	nop
    687c:	508410b4 	.word	0x508410b4
    6880:	508410e4 	.word	0x508410e4
    6884:	508410dc 	.word	0x508410dc

00006888 <PkaSetRegsSizesTab>:
    6888:	4b0c      	ldr	r3, [pc, #48]	; (68bc <PkaSetRegsSizesTab+0x34>)
    688a:	0189      	lsls	r1, r1, #6
    688c:	6018      	str	r0, [r3, #0]
    688e:	303f      	adds	r0, #63	; 0x3f
    6890:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
    6894:	3040      	adds	r0, #64	; 0x40
    6896:	6058      	str	r0, [r3, #4]
    6898:	6099      	str	r1, [r3, #8]
    689a:	4809      	ldr	r0, [pc, #36]	; (68c0 <PkaSetRegsSizesTab+0x38>)
    689c:	60d9      	str	r1, [r3, #12]
    689e:	6119      	str	r1, [r3, #16]
    68a0:	6159      	str	r1, [r3, #20]
    68a2:	6199      	str	r1, [r3, #24]
    68a4:	331c      	adds	r3, #28
    68a6:	b082      	sub	sp, #8
    68a8:	6019      	str	r1, [r3, #0]
    68aa:	6802      	ldr	r2, [r0, #0]
    68ac:	9201      	str	r2, [sp, #4]
    68ae:	9a01      	ldr	r2, [sp, #4]
    68b0:	07d2      	lsls	r2, r2, #31
    68b2:	d5fa      	bpl.n	68aa <PkaSetRegsSizesTab+0x22>
    68b4:	6019      	str	r1, [r3, #0]
    68b6:	b002      	add	sp, #8
    68b8:	4770      	bx	lr
    68ba:	bf00      	nop
    68bc:	50841090 	.word	0x50841090
    68c0:	508410b4 	.word	0x508410b4

000068c4 <PkaInitPka>:
    68c4:	b538      	push	{r3, r4, r5, lr}
    68c6:	f1a0 0320 	sub.w	r3, r0, #32
    68ca:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
    68ce:	4605      	mov	r5, r0
    68d0:	d82c      	bhi.n	692c <PkaInitPka+0x68>
    68d2:	288f      	cmp	r0, #143	; 0x8f
    68d4:	d826      	bhi.n	6924 <PkaInitPka+0x60>
    68d6:	f100 0347 	add.w	r3, r0, #71	; 0x47
    68da:	f100 0466 	add.w	r4, r0, #102	; 0x66
    68de:	06db      	lsls	r3, r3, #27
    68e0:	ea4f 1454 	mov.w	r4, r4, lsr #5
    68e4:	d000      	beq.n	68e8 <PkaInitPka+0x24>
    68e6:	3401      	adds	r4, #1
    68e8:	0164      	lsls	r4, r4, #5
    68ea:	343f      	adds	r4, #63	; 0x3f
    68ec:	09a4      	lsrs	r4, r4, #6
    68ee:	3401      	adds	r4, #1
    68f0:	b111      	cbz	r1, 68f8 <PkaInitPka+0x34>
    68f2:	42a1      	cmp	r1, r4
    68f4:	d31a      	bcc.n	692c <PkaInitPka+0x68>
    68f6:	460c      	mov	r4, r1
    68f8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    68fc:	00e3      	lsls	r3, r4, #3
    68fe:	fbb0 f0f3 	udiv	r0, r0, r3
    6902:	2820      	cmp	r0, #32
    6904:	bf28      	it	cs
    6906:	2020      	movcs	r0, #32
    6908:	b102      	cbz	r2, 690c <PkaInitPka+0x48>
    690a:	6010      	str	r0, [r2, #0]
    690c:	2201      	movs	r2, #1
    690e:	4b08      	ldr	r3, [pc, #32]	; (6930 <PkaInitPka+0x6c>)
    6910:	4621      	mov	r1, r4
    6912:	601a      	str	r2, [r3, #0]
    6914:	f7ff ff10 	bl	6738 <PkaSetRegsMapTab>
    6918:	4628      	mov	r0, r5
    691a:	4621      	mov	r1, r4
    691c:	f7ff ffb4 	bl	6888 <PkaSetRegsSizesTab>
    6920:	2000      	movs	r0, #0
    6922:	bd38      	pop	{r3, r4, r5, pc}
    6924:	f100 041f 	add.w	r4, r0, #31
    6928:	0964      	lsrs	r4, r4, #5
    692a:	e7dd      	b.n	68e8 <PkaInitPka+0x24>
    692c:	4801      	ldr	r0, [pc, #4]	; (6934 <PkaInitPka+0x70>)
    692e:	e7f8      	b.n	6922 <PkaInitPka+0x5e>
    6930:	5084181c 	.word	0x5084181c
    6934:	00f02122 	.word	0x00f02122

00006938 <PkaClearBlockOfRegs>:
    6938:	4b46      	ldr	r3, [pc, #280]	; (6a54 <PkaClearBlockOfRegs+0x11c>)
    693a:	b5f0      	push	{r4, r5, r6, r7, lr}
    693c:	461d      	mov	r5, r3
    693e:	b089      	sub	sp, #36	; 0x24
    6940:	681c      	ldr	r4, [r3, #0]
    6942:	9401      	str	r4, [sp, #4]
    6944:	9c01      	ldr	r4, [sp, #4]
    6946:	07e4      	lsls	r4, r4, #31
    6948:	d5fa      	bpl.n	6940 <PkaClearBlockOfRegs+0x8>
    694a:	4b43      	ldr	r3, [pc, #268]	; (6a58 <PkaClearBlockOfRegs+0x120>)
    694c:	2400      	movs	r4, #0
    694e:	4413      	add	r3, r2
    6950:	009b      	lsls	r3, r3, #2
    6952:	681a      	ldr	r2, [r3, #0]
    6954:	180b      	adds	r3, r1, r0
    6956:	2b1e      	cmp	r3, #30
    6958:	bf88      	it	hi
    695a:	f1c0 011e 	rsbhi	r1, r0, #30
    695e:	321f      	adds	r2, #31
    6960:	180b      	adds	r3, r1, r0
    6962:	0952      	lsrs	r2, r2, #5
    6964:	4353      	muls	r3, r2
    6966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    696a:	bf84      	itt	hi
    696c:	f44f 6180 	movhi.w	r1, #1024	; 0x400
    6970:	fbb1 f1f2 	udivhi	r1, r1, r2
    6974:	4627      	mov	r7, r4
    6976:	bf88      	it	hi
    6978:	1a09      	subhi	r1, r1, r0
    697a:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 6a60 <PkaClearBlockOfRegs+0x128>
    697e:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    6982:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 6a64 <PkaClearBlockOfRegs+0x12c>
    6986:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    698a:	42a1      	cmp	r1, r4
    698c:	dc33      	bgt.n	69f6 <PkaClearBlockOfRegs+0xbe>
    698e:	682b      	ldr	r3, [r5, #0]
    6990:	9304      	str	r3, [sp, #16]
    6992:	9b04      	ldr	r3, [sp, #16]
    6994:	07db      	lsls	r3, r3, #31
    6996:	d5fa      	bpl.n	698e <PkaClearBlockOfRegs+0x56>
    6998:	4b30      	ldr	r3, [pc, #192]	; (6a5c <PkaClearBlockOfRegs+0x124>)
    699a:	681b      	ldr	r3, [r3, #0]
    699c:	6829      	ldr	r1, [r5, #0]
    699e:	9105      	str	r1, [sp, #20]
    69a0:	9905      	ldr	r1, [sp, #20]
    69a2:	07cf      	lsls	r7, r1, #31
    69a4:	d5fa      	bpl.n	699c <PkaClearBlockOfRegs+0x64>
    69a6:	4c2e      	ldr	r4, [pc, #184]	; (6a60 <PkaClearBlockOfRegs+0x128>)
    69a8:	492e      	ldr	r1, [pc, #184]	; (6a64 <PkaClearBlockOfRegs+0x12c>)
    69aa:	6023      	str	r3, [r4, #0]
    69ac:	2300      	movs	r3, #0
    69ae:	461e      	mov	r6, r3
    69b0:	4293      	cmp	r3, r2
    69b2:	f103 0001 	add.w	r0, r3, #1
    69b6:	d140      	bne.n	6a3a <PkaClearBlockOfRegs+0x102>
    69b8:	4619      	mov	r1, r3
    69ba:	2600      	movs	r6, #0
    69bc:	f020 0201 	bic.w	r2, r0, #1
    69c0:	4828      	ldr	r0, [pc, #160]	; (6a64 <PkaClearBlockOfRegs+0x12c>)
    69c2:	428a      	cmp	r2, r1
    69c4:	d83c      	bhi.n	6a40 <PkaClearBlockOfRegs+0x108>
    69c6:	6829      	ldr	r1, [r5, #0]
    69c8:	9106      	str	r1, [sp, #24]
    69ca:	9906      	ldr	r1, [sp, #24]
    69cc:	07ce      	lsls	r6, r1, #31
    69ce:	d5fa      	bpl.n	69c6 <PkaClearBlockOfRegs+0x8e>
    69d0:	4925      	ldr	r1, [pc, #148]	; (6a68 <PkaClearBlockOfRegs+0x130>)
    69d2:	6809      	ldr	r1, [r1, #0]
    69d4:	6828      	ldr	r0, [r5, #0]
    69d6:	9007      	str	r0, [sp, #28]
    69d8:	9807      	ldr	r0, [sp, #28]
    69da:	07c0      	lsls	r0, r0, #31
    69dc:	d5fa      	bpl.n	69d4 <PkaClearBlockOfRegs+0x9c>
    69de:	6021      	str	r1, [r4, #0]
    69e0:	2100      	movs	r1, #0
    69e2:	460c      	mov	r4, r1
    69e4:	481f      	ldr	r0, [pc, #124]	; (6a64 <PkaClearBlockOfRegs+0x12c>)
    69e6:	428b      	cmp	r3, r1
    69e8:	d12d      	bne.n	6a46 <PkaClearBlockOfRegs+0x10e>
    69ea:	2000      	movs	r0, #0
    69ec:	491d      	ldr	r1, [pc, #116]	; (6a64 <PkaClearBlockOfRegs+0x12c>)
    69ee:	429a      	cmp	r2, r3
    69f0:	d82c      	bhi.n	6a4c <PkaClearBlockOfRegs+0x114>
    69f2:	b009      	add	sp, #36	; 0x24
    69f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    69f6:	682b      	ldr	r3, [r5, #0]
    69f8:	9302      	str	r3, [sp, #8]
    69fa:	9b02      	ldr	r3, [sp, #8]
    69fc:	07db      	lsls	r3, r3, #31
    69fe:	d5fa      	bpl.n	69f6 <PkaClearBlockOfRegs+0xbe>
    6a00:	1903      	adds	r3, r0, r4
    6a02:	009b      	lsls	r3, r3, #2
    6a04:	681b      	ldr	r3, [r3, #0]
    6a06:	682e      	ldr	r6, [r5, #0]
    6a08:	9603      	str	r6, [sp, #12]
    6a0a:	9e03      	ldr	r6, [sp, #12]
    6a0c:	07f6      	lsls	r6, r6, #31
    6a0e:	d5fa      	bpl.n	6a06 <PkaClearBlockOfRegs+0xce>
    6a10:	f8ce 3000 	str.w	r3, [lr]
    6a14:	2300      	movs	r3, #0
    6a16:	4293      	cmp	r3, r2
    6a18:	f103 0301 	add.w	r3, r3, #1
    6a1c:	d106      	bne.n	6a2c <PkaClearBlockOfRegs+0xf4>
    6a1e:	4616      	mov	r6, r2
    6a20:	f023 0301 	bic.w	r3, r3, #1
    6a24:	42b3      	cmp	r3, r6
    6a26:	d804      	bhi.n	6a32 <PkaClearBlockOfRegs+0xfa>
    6a28:	3401      	adds	r4, #1
    6a2a:	e7ae      	b.n	698a <PkaClearBlockOfRegs+0x52>
    6a2c:	f8cc 7000 	str.w	r7, [ip]
    6a30:	e7f1      	b.n	6a16 <PkaClearBlockOfRegs+0xde>
    6a32:	f8cc 7000 	str.w	r7, [ip]
    6a36:	3601      	adds	r6, #1
    6a38:	e7f4      	b.n	6a24 <PkaClearBlockOfRegs+0xec>
    6a3a:	600e      	str	r6, [r1, #0]
    6a3c:	4603      	mov	r3, r0
    6a3e:	e7b7      	b.n	69b0 <PkaClearBlockOfRegs+0x78>
    6a40:	6006      	str	r6, [r0, #0]
    6a42:	3101      	adds	r1, #1
    6a44:	e7bd      	b.n	69c2 <PkaClearBlockOfRegs+0x8a>
    6a46:	6004      	str	r4, [r0, #0]
    6a48:	3101      	adds	r1, #1
    6a4a:	e7cc      	b.n	69e6 <PkaClearBlockOfRegs+0xae>
    6a4c:	6008      	str	r0, [r1, #0]
    6a4e:	3301      	adds	r3, #1
    6a50:	e7cd      	b.n	69ee <PkaClearBlockOfRegs+0xb6>
    6a52:	bf00      	nop
    6a54:	508410b4 	.word	0x508410b4
    6a58:	14210424 	.word	0x14210424
    6a5c:	5084107c 	.word	0x5084107c
    6a60:	508410d4 	.word	0x508410d4
    6a64:	508410d8 	.word	0x508410d8
    6a68:	50841078 	.word	0x50841078

00006a6c <PkaFinishAndMutexUnlock>:
    6a6c:	b508      	push	{r3, lr}
    6a6e:	b140      	cbz	r0, 6a82 <PkaFinishAndMutexUnlock+0x16>
    6a70:	2820      	cmp	r0, #32
    6a72:	4601      	mov	r1, r0
    6a74:	f04f 0207 	mov.w	r2, #7
    6a78:	bf28      	it	cs
    6a7a:	2120      	movcs	r1, #32
    6a7c:	2000      	movs	r0, #0
    6a7e:	f7ff ff5b 	bl	6938 <PkaClearBlockOfRegs>
    6a82:	2200      	movs	r2, #0
    6a84:	4b01      	ldr	r3, [pc, #4]	; (6a8c <PkaFinishAndMutexUnlock+0x20>)
    6a86:	601a      	str	r2, [r3, #0]
    6a88:	bd08      	pop	{r3, pc}
    6a8a:	bf00      	nop
    6a8c:	5084181c 	.word	0x5084181c

00006a90 <PkaCopyDataIntoPkaReg>:
    6a90:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a92:	4d29      	ldr	r5, [pc, #164]	; (6b38 <PkaCopyDataIntoPkaReg+0xa8>)
    6a94:	b085      	sub	sp, #20
    6a96:	462c      	mov	r4, r5
    6a98:	682e      	ldr	r6, [r5, #0]
    6a9a:	9600      	str	r6, [sp, #0]
    6a9c:	9e00      	ldr	r6, [sp, #0]
    6a9e:	07f6      	lsls	r6, r6, #31
    6aa0:	d5fa      	bpl.n	6a98 <PkaCopyDataIntoPkaReg+0x8>
    6aa2:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    6aa6:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    6aaa:	0080      	lsls	r0, r0, #2
    6aac:	6805      	ldr	r5, [r0, #0]
    6aae:	6820      	ldr	r0, [r4, #0]
    6ab0:	9001      	str	r0, [sp, #4]
    6ab2:	9801      	ldr	r0, [sp, #4]
    6ab4:	07c7      	lsls	r7, r0, #31
    6ab6:	d5fa      	bpl.n	6aae <PkaCopyDataIntoPkaReg+0x1e>
    6ab8:	4820      	ldr	r0, [pc, #128]	; (6b3c <PkaCopyDataIntoPkaReg+0xac>)
    6aba:	4f21      	ldr	r7, [pc, #132]	; (6b40 <PkaCopyDataIntoPkaReg+0xb0>)
    6abc:	6005      	str	r5, [r0, #0]
    6abe:	eb02 0683 	add.w	r6, r2, r3, lsl #2
    6ac2:	42b2      	cmp	r2, r6
    6ac4:	d129      	bne.n	6b1a <PkaCopyDataIntoPkaReg+0x8a>
    6ac6:	2700      	movs	r7, #0
    6ac8:	1c5a      	adds	r2, r3, #1
    6aca:	4e1d      	ldr	r6, [pc, #116]	; (6b40 <PkaCopyDataIntoPkaReg+0xb0>)
    6acc:	f022 0201 	bic.w	r2, r2, #1
    6ad0:	429a      	cmp	r2, r3
    6ad2:	d827      	bhi.n	6b24 <PkaCopyDataIntoPkaReg+0x94>
    6ad4:	6823      	ldr	r3, [r4, #0]
    6ad6:	9302      	str	r3, [sp, #8]
    6ad8:	9b02      	ldr	r3, [sp, #8]
    6ada:	07de      	lsls	r6, r3, #31
    6adc:	d5fa      	bpl.n	6ad4 <PkaCopyDataIntoPkaReg+0x44>
    6ade:	4b19      	ldr	r3, [pc, #100]	; (6b44 <PkaCopyDataIntoPkaReg+0xb4>)
    6ae0:	440b      	add	r3, r1
    6ae2:	009b      	lsls	r3, r3, #2
    6ae4:	681b      	ldr	r3, [r3, #0]
    6ae6:	331f      	adds	r3, #31
    6ae8:	095b      	lsrs	r3, r3, #5
    6aea:	429a      	cmp	r2, r3
    6aec:	d213      	bcs.n	6b16 <PkaCopyDataIntoPkaReg+0x86>
    6aee:	6821      	ldr	r1, [r4, #0]
    6af0:	9103      	str	r1, [sp, #12]
    6af2:	9903      	ldr	r1, [sp, #12]
    6af4:	07c9      	lsls	r1, r1, #31
    6af6:	d5fa      	bpl.n	6aee <PkaCopyDataIntoPkaReg+0x5e>
    6af8:	2100      	movs	r1, #0
    6afa:	4415      	add	r5, r2
    6afc:	6005      	str	r5, [r0, #0]
    6afe:	4608      	mov	r0, r1
    6b00:	1a9b      	subs	r3, r3, r2
    6b02:	4a0f      	ldr	r2, [pc, #60]	; (6b40 <PkaCopyDataIntoPkaReg+0xb0>)
    6b04:	428b      	cmp	r3, r1
    6b06:	d810      	bhi.n	6b2a <PkaCopyDataIntoPkaReg+0x9a>
    6b08:	2000      	movs	r0, #0
    6b0a:	1c5a      	adds	r2, r3, #1
    6b0c:	490c      	ldr	r1, [pc, #48]	; (6b40 <PkaCopyDataIntoPkaReg+0xb0>)
    6b0e:	f022 0201 	bic.w	r2, r2, #1
    6b12:	429a      	cmp	r2, r3
    6b14:	d80c      	bhi.n	6b30 <PkaCopyDataIntoPkaReg+0xa0>
    6b16:	b005      	add	sp, #20
    6b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b1a:	f852 cb04 	ldr.w	ip, [r2], #4
    6b1e:	f8c7 c000 	str.w	ip, [r7]
    6b22:	e7ce      	b.n	6ac2 <PkaCopyDataIntoPkaReg+0x32>
    6b24:	6037      	str	r7, [r6, #0]
    6b26:	3301      	adds	r3, #1
    6b28:	e7d2      	b.n	6ad0 <PkaCopyDataIntoPkaReg+0x40>
    6b2a:	6010      	str	r0, [r2, #0]
    6b2c:	3101      	adds	r1, #1
    6b2e:	e7e9      	b.n	6b04 <PkaCopyDataIntoPkaReg+0x74>
    6b30:	6008      	str	r0, [r1, #0]
    6b32:	3301      	adds	r3, #1
    6b34:	e7ed      	b.n	6b12 <PkaCopyDataIntoPkaReg+0x82>
    6b36:	bf00      	nop
    6b38:	508410b4 	.word	0x508410b4
    6b3c:	508410d4 	.word	0x508410d4
    6b40:	508410d8 	.word	0x508410d8
    6b44:	14210424 	.word	0x14210424

00006b48 <PkaEcdsaVerify>:
    6b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b4c:	4b81      	ldr	r3, [pc, #516]	; (6d54 <PkaEcdsaVerify+0x20c>)
    6b4e:	b0a0      	sub	sp, #128	; 0x80
    6b50:	681d      	ldr	r5, [r3, #0]
    6b52:	6898      	ldr	r0, [r3, #8]
    6b54:	3320      	adds	r3, #32
    6b56:	461e      	mov	r6, r3
    6b58:	681a      	ldr	r2, [r3, #0]
    6b5a:	9201      	str	r2, [sp, #4]
    6b5c:	9a01      	ldr	r2, [sp, #4]
    6b5e:	07d7      	lsls	r7, r2, #31
    6b60:	d5fa      	bpl.n	6b58 <PkaEcdsaVerify+0x10>
    6b62:	4b7d      	ldr	r3, [pc, #500]	; (6d58 <PkaEcdsaVerify+0x210>)
    6b64:	4a7d      	ldr	r2, [pc, #500]	; (6d5c <PkaEcdsaVerify+0x214>)
    6b66:	601a      	str	r2, [r3, #0]
    6b68:	6832      	ldr	r2, [r6, #0]
    6b6a:	9202      	str	r2, [sp, #8]
    6b6c:	9a02      	ldr	r2, [sp, #8]
    6b6e:	07d4      	lsls	r4, r2, #31
    6b70:	d5fa      	bpl.n	6b68 <PkaEcdsaVerify+0x20>
    6b72:	4a7b      	ldr	r2, [pc, #492]	; (6d60 <PkaEcdsaVerify+0x218>)
    6b74:	601a      	str	r2, [r3, #0]
    6b76:	4a7b      	ldr	r2, [pc, #492]	; (6d64 <PkaEcdsaVerify+0x21c>)
    6b78:	4614      	mov	r4, r2
    6b7a:	6811      	ldr	r1, [r2, #0]
    6b7c:	9103      	str	r1, [sp, #12]
    6b7e:	9903      	ldr	r1, [sp, #12]
    6b80:	07c9      	lsls	r1, r1, #31
    6b82:	d5fa      	bpl.n	6b7a <PkaEcdsaVerify+0x32>
    6b84:	4a78      	ldr	r2, [pc, #480]	; (6d68 <PkaEcdsaVerify+0x220>)
    6b86:	6811      	ldr	r1, [r2, #0]
    6b88:	f3c1 2140 	ubfx	r1, r1, #9, #1
    6b8c:	6837      	ldr	r7, [r6, #0]
    6b8e:	9704      	str	r7, [sp, #16]
    6b90:	9f04      	ldr	r7, [sp, #16]
    6b92:	07ff      	lsls	r7, r7, #31
    6b94:	d5fa      	bpl.n	6b8c <PkaEcdsaVerify+0x44>
    6b96:	4f75      	ldr	r7, [pc, #468]	; (6d6c <PkaEcdsaVerify+0x224>)
    6b98:	601f      	str	r7, [r3, #0]
    6b9a:	6827      	ldr	r7, [r4, #0]
    6b9c:	9705      	str	r7, [sp, #20]
    6b9e:	9f05      	ldr	r7, [sp, #20]
    6ba0:	07ff      	lsls	r7, r7, #31
    6ba2:	d5fa      	bpl.n	6b9a <PkaEcdsaVerify+0x52>
    6ba4:	6817      	ldr	r7, [r2, #0]
    6ba6:	2900      	cmp	r1, #0
    6ba8:	f000 80cf 	beq.w	6d4a <PkaEcdsaVerify+0x202>
    6bac:	05b9      	lsls	r1, r7, #22
    6bae:	f140 80cc 	bpl.w	6d4a <PkaEcdsaVerify+0x202>
    6bb2:	6831      	ldr	r1, [r6, #0]
    6bb4:	9106      	str	r1, [sp, #24]
    6bb6:	9906      	ldr	r1, [sp, #24]
    6bb8:	07cf      	lsls	r7, r1, #31
    6bba:	d5fa      	bpl.n	6bb2 <PkaEcdsaVerify+0x6a>
    6bbc:	496c      	ldr	r1, [pc, #432]	; (6d70 <PkaEcdsaVerify+0x228>)
    6bbe:	6019      	str	r1, [r3, #0]
    6bc0:	6821      	ldr	r1, [r4, #0]
    6bc2:	9107      	str	r1, [sp, #28]
    6bc4:	9907      	ldr	r1, [sp, #28]
    6bc6:	07c9      	lsls	r1, r1, #31
    6bc8:	d5fa      	bpl.n	6bc0 <PkaEcdsaVerify+0x78>
    6bca:	6811      	ldr	r1, [r2, #0]
    6bcc:	f3c1 2140 	ubfx	r1, r1, #9, #1
    6bd0:	6837      	ldr	r7, [r6, #0]
    6bd2:	9708      	str	r7, [sp, #32]
    6bd4:	9f08      	ldr	r7, [sp, #32]
    6bd6:	07ff      	lsls	r7, r7, #31
    6bd8:	d5fa      	bpl.n	6bd0 <PkaEcdsaVerify+0x88>
    6bda:	4f66      	ldr	r7, [pc, #408]	; (6d74 <PkaEcdsaVerify+0x22c>)
    6bdc:	601f      	str	r7, [r3, #0]
    6bde:	6827      	ldr	r7, [r4, #0]
    6be0:	9709      	str	r7, [sp, #36]	; 0x24
    6be2:	9f09      	ldr	r7, [sp, #36]	; 0x24
    6be4:	07ff      	lsls	r7, r7, #31
    6be6:	d5fa      	bpl.n	6bde <PkaEcdsaVerify+0x96>
    6be8:	6812      	ldr	r2, [r2, #0]
    6bea:	2900      	cmp	r1, #0
    6bec:	f000 80af 	beq.w	6d4e <PkaEcdsaVerify+0x206>
    6bf0:	0591      	lsls	r1, r2, #22
    6bf2:	f140 80ac 	bpl.w	6d4e <PkaEcdsaVerify+0x206>
    6bf6:	6832      	ldr	r2, [r6, #0]
    6bf8:	920a      	str	r2, [sp, #40]	; 0x28
    6bfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6bfc:	07d2      	lsls	r2, r2, #31
    6bfe:	d5fa      	bpl.n	6bf6 <PkaEcdsaVerify+0xae>
    6c00:	4a56      	ldr	r2, [pc, #344]	; (6d5c <PkaEcdsaVerify+0x214>)
    6c02:	601a      	str	r2, [r3, #0]
    6c04:	6832      	ldr	r2, [r6, #0]
    6c06:	920b      	str	r2, [sp, #44]	; 0x2c
    6c08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6c0a:	07d7      	lsls	r7, r2, #31
    6c0c:	d5fa      	bpl.n	6c04 <PkaEcdsaVerify+0xbc>
    6c0e:	4a5a      	ldr	r2, [pc, #360]	; (6d78 <PkaEcdsaVerify+0x230>)
    6c10:	601a      	str	r2, [r3, #0]
    6c12:	6831      	ldr	r1, [r6, #0]
    6c14:	910c      	str	r1, [sp, #48]	; 0x30
    6c16:	990c      	ldr	r1, [sp, #48]	; 0x30
    6c18:	07cc      	lsls	r4, r1, #31
    6c1a:	d5fa      	bpl.n	6c12 <PkaEcdsaVerify+0xca>
    6c1c:	4957      	ldr	r1, [pc, #348]	; (6d7c <PkaEcdsaVerify+0x234>)
    6c1e:	6019      	str	r1, [r3, #0]
    6c20:	6831      	ldr	r1, [r6, #0]
    6c22:	910d      	str	r1, [sp, #52]	; 0x34
    6c24:	990d      	ldr	r1, [sp, #52]	; 0x34
    6c26:	07c9      	lsls	r1, r1, #31
    6c28:	d5fa      	bpl.n	6c20 <PkaEcdsaVerify+0xd8>
    6c2a:	4955      	ldr	r1, [pc, #340]	; (6d80 <PkaEcdsaVerify+0x238>)
    6c2c:	6019      	str	r1, [r3, #0]
    6c2e:	6831      	ldr	r1, [r6, #0]
    6c30:	910e      	str	r1, [sp, #56]	; 0x38
    6c32:	990e      	ldr	r1, [sp, #56]	; 0x38
    6c34:	07cf      	lsls	r7, r1, #31
    6c36:	d5fa      	bpl.n	6c2e <PkaEcdsaVerify+0xe6>
    6c38:	4952      	ldr	r1, [pc, #328]	; (6d84 <PkaEcdsaVerify+0x23c>)
    6c3a:	6019      	str	r1, [r3, #0]
    6c3c:	6831      	ldr	r1, [r6, #0]
    6c3e:	910f      	str	r1, [sp, #60]	; 0x3c
    6c40:	990f      	ldr	r1, [sp, #60]	; 0x3c
    6c42:	07cc      	lsls	r4, r1, #31
    6c44:	d5fa      	bpl.n	6c3c <PkaEcdsaVerify+0xf4>
    6c46:	4950      	ldr	r1, [pc, #320]	; (6d88 <PkaEcdsaVerify+0x240>)
    6c48:	6019      	str	r1, [r3, #0]
    6c4a:	4b50      	ldr	r3, [pc, #320]	; (6d8c <PkaEcdsaVerify+0x244>)
    6c4c:	461e      	mov	r6, r3
    6c4e:	6819      	ldr	r1, [r3, #0]
    6c50:	9110      	str	r1, [sp, #64]	; 0x40
    6c52:	9910      	ldr	r1, [sp, #64]	; 0x40
    6c54:	07c9      	lsls	r1, r1, #31
    6c56:	d5fa      	bpl.n	6c4e <PkaEcdsaVerify+0x106>
    6c58:	4c3f      	ldr	r4, [pc, #252]	; (6d58 <PkaEcdsaVerify+0x210>)
    6c5a:	4b4d      	ldr	r3, [pc, #308]	; (6d90 <PkaEcdsaVerify+0x248>)
    6c5c:	6023      	str	r3, [r4, #0]
    6c5e:	6833      	ldr	r3, [r6, #0]
    6c60:	9311      	str	r3, [sp, #68]	; 0x44
    6c62:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6c64:	07db      	lsls	r3, r3, #31
    6c66:	d5fa      	bpl.n	6c5e <PkaEcdsaVerify+0x116>
    6c68:	4b4a      	ldr	r3, [pc, #296]	; (6d94 <PkaEcdsaVerify+0x24c>)
    6c6a:	6023      	str	r3, [r4, #0]
    6c6c:	6833      	ldr	r3, [r6, #0]
    6c6e:	9312      	str	r3, [sp, #72]	; 0x48
    6c70:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6c72:	07df      	lsls	r7, r3, #31
    6c74:	d5fa      	bpl.n	6c6c <PkaEcdsaVerify+0x124>
    6c76:	4b48      	ldr	r3, [pc, #288]	; (6d98 <PkaEcdsaVerify+0x250>)
    6c78:	6023      	str	r3, [r4, #0]
    6c7a:	4b3a      	ldr	r3, [pc, #232]	; (6d64 <PkaEcdsaVerify+0x21c>)
    6c7c:	4698      	mov	r8, r3
    6c7e:	6819      	ldr	r1, [r3, #0]
    6c80:	9113      	str	r1, [sp, #76]	; 0x4c
    6c82:	9913      	ldr	r1, [sp, #76]	; 0x4c
    6c84:	07c9      	lsls	r1, r1, #31
    6c86:	d5fa      	bpl.n	6c7e <PkaEcdsaVerify+0x136>
    6c88:	4f32      	ldr	r7, [pc, #200]	; (6d54 <PkaEcdsaVerify+0x20c>)
    6c8a:	6038      	str	r0, [r7, #0]
    6c8c:	6833      	ldr	r3, [r6, #0]
    6c8e:	9314      	str	r3, [sp, #80]	; 0x50
    6c90:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6c92:	07db      	lsls	r3, r3, #31
    6c94:	d5fa      	bpl.n	6c8c <PkaEcdsaVerify+0x144>
    6c96:	6022      	str	r2, [r4, #0]
    6c98:	6833      	ldr	r3, [r6, #0]
    6c9a:	9315      	str	r3, [sp, #84]	; 0x54
    6c9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6c9e:	07d8      	lsls	r0, r3, #31
    6ca0:	d5fa      	bpl.n	6c98 <PkaEcdsaVerify+0x150>
    6ca2:	4b3e      	ldr	r3, [pc, #248]	; (6d9c <PkaEcdsaVerify+0x254>)
    6ca4:	6023      	str	r3, [r4, #0]
    6ca6:	6833      	ldr	r3, [r6, #0]
    6ca8:	9316      	str	r3, [sp, #88]	; 0x58
    6caa:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6cac:	07d9      	lsls	r1, r3, #31
    6cae:	d5fa      	bpl.n	6ca6 <PkaEcdsaVerify+0x15e>
    6cb0:	4b3b      	ldr	r3, [pc, #236]	; (6da0 <PkaEcdsaVerify+0x258>)
    6cb2:	6023      	str	r3, [r4, #0]
    6cb4:	6833      	ldr	r3, [r6, #0]
    6cb6:	9317      	str	r3, [sp, #92]	; 0x5c
    6cb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    6cba:	07da      	lsls	r2, r3, #31
    6cbc:	d5fa      	bpl.n	6cb4 <PkaEcdsaVerify+0x16c>
    6cbe:	4b39      	ldr	r3, [pc, #228]	; (6da4 <PkaEcdsaVerify+0x25c>)
    6cc0:	6023      	str	r3, [r4, #0]
    6cc2:	6833      	ldr	r3, [r6, #0]
    6cc4:	9318      	str	r3, [sp, #96]	; 0x60
    6cc6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    6cc8:	07db      	lsls	r3, r3, #31
    6cca:	d5fa      	bpl.n	6cc2 <PkaEcdsaVerify+0x17a>
    6ccc:	4b36      	ldr	r3, [pc, #216]	; (6da8 <PkaEcdsaVerify+0x260>)
    6cce:	6023      	str	r3, [r4, #0]
    6cd0:	6833      	ldr	r3, [r6, #0]
    6cd2:	9319      	str	r3, [sp, #100]	; 0x64
    6cd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    6cd6:	07d8      	lsls	r0, r3, #31
    6cd8:	d5fa      	bpl.n	6cd0 <PkaEcdsaVerify+0x188>
    6cda:	4b34      	ldr	r3, [pc, #208]	; (6dac <PkaEcdsaVerify+0x264>)
    6cdc:	6023      	str	r3, [r4, #0]
    6cde:	6833      	ldr	r3, [r6, #0]
    6ce0:	931a      	str	r3, [sp, #104]	; 0x68
    6ce2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    6ce4:	07d9      	lsls	r1, r3, #31
    6ce6:	d5fa      	bpl.n	6cde <PkaEcdsaVerify+0x196>
    6ce8:	4b31      	ldr	r3, [pc, #196]	; (6db0 <PkaEcdsaVerify+0x268>)
    6cea:	6023      	str	r3, [r4, #0]
    6cec:	6833      	ldr	r3, [r6, #0]
    6cee:	931b      	str	r3, [sp, #108]	; 0x6c
    6cf0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    6cf2:	07da      	lsls	r2, r3, #31
    6cf4:	d5fa      	bpl.n	6cec <PkaEcdsaVerify+0x1a4>
    6cf6:	4b2f      	ldr	r3, [pc, #188]	; (6db4 <PkaEcdsaVerify+0x26c>)
    6cf8:	6023      	str	r3, [r4, #0]
    6cfa:	f000 fc1d 	bl	7538 <PkaSum2ScalarMullt>
    6cfe:	bb08      	cbnz	r0, 6d44 <PkaEcdsaVerify+0x1fc>
    6d00:	f8d8 3000 	ldr.w	r3, [r8]
    6d04:	931c      	str	r3, [sp, #112]	; 0x70
    6d06:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    6d08:	07db      	lsls	r3, r3, #31
    6d0a:	d5f9      	bpl.n	6d00 <PkaEcdsaVerify+0x1b8>
    6d0c:	603d      	str	r5, [r7, #0]
    6d0e:	6833      	ldr	r3, [r6, #0]
    6d10:	931d      	str	r3, [sp, #116]	; 0x74
    6d12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    6d14:	07d9      	lsls	r1, r3, #31
    6d16:	d5fa      	bpl.n	6d0e <PkaEcdsaVerify+0x1c6>
    6d18:	4b27      	ldr	r3, [pc, #156]	; (6db8 <PkaEcdsaVerify+0x270>)
    6d1a:	6023      	str	r3, [r4, #0]
    6d1c:	6833      	ldr	r3, [r6, #0]
    6d1e:	931e      	str	r3, [sp, #120]	; 0x78
    6d20:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    6d22:	07da      	lsls	r2, r3, #31
    6d24:	d5fa      	bpl.n	6d1c <PkaEcdsaVerify+0x1d4>
    6d26:	4b25      	ldr	r3, [pc, #148]	; (6dbc <PkaEcdsaVerify+0x274>)
    6d28:	6023      	str	r3, [r4, #0]
    6d2a:	f8d8 3000 	ldr.w	r3, [r8]
    6d2e:	931f      	str	r3, [sp, #124]	; 0x7c
    6d30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    6d32:	07db      	lsls	r3, r3, #31
    6d34:	d5f9      	bpl.n	6d2a <PkaEcdsaVerify+0x1e2>
    6d36:	4b0c      	ldr	r3, [pc, #48]	; (6d68 <PkaEcdsaVerify+0x220>)
    6d38:	681b      	ldr	r3, [r3, #0]
    6d3a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    6d3e:	4b20      	ldr	r3, [pc, #128]	; (6dc0 <PkaEcdsaVerify+0x278>)
    6d40:	bf08      	it	eq
    6d42:	4618      	moveq	r0, r3
    6d44:	b020      	add	sp, #128	; 0x80
    6d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d4a:	481e      	ldr	r0, [pc, #120]	; (6dc4 <PkaEcdsaVerify+0x27c>)
    6d4c:	e7fa      	b.n	6d44 <PkaEcdsaVerify+0x1fc>
    6d4e:	481e      	ldr	r0, [pc, #120]	; (6dc8 <PkaEcdsaVerify+0x280>)
    6d50:	e7f8      	b.n	6d44 <PkaEcdsaVerify+0x1fc>
    6d52:	bf00      	nop
    6d54:	50841090 	.word	0x50841090
    6d58:	50841080 	.word	0x50841080
    6d5c:	51021000 	.word	0x51021000
    6d60:	29721fc0 	.word	0x29721fc0
    6d64:	508410b4 	.word	0x508410b4
    6d68:	50841088 	.word	0x50841088
    6d6c:	2901cfc0 	.word	0x2901cfc0
    6d70:	290e1fc0 	.word	0x290e1fc0
    6d74:	29003fc0 	.word	0x29003fc0
    6d78:	49020140 	.word	0x49020140
    6d7c:	a8843100 	.word	0xa8843100
    6d80:	49160000 	.word	0x49160000
    6d84:	a1080140 	.word	0xa1080140
    6d88:	88084480 	.word	0x88084480
    6d8c:	508410b0 	.word	0x508410b0
    6d90:	887044c0 	.word	0x887044c0
    6d94:	417a0780 	.word	0x417a0780
    6d98:	417e07c0 	.word	0x417e07c0
    6d9c:	496a0000 	.word	0x496a0000
    6da0:	49160680 	.word	0x49160680
    6da4:	496e0040 	.word	0x496e0040
    6da8:	21000200 	.word	0x21000200
    6dac:	21208200 	.word	0x21208200
    6db0:	21208240 	.word	0x21208240
    6db4:	21248280 	.word	0x21248280
    6db8:	a161a140 	.word	0xa161a140
    6dbc:	5161c800 	.word	0x5161c800
    6dc0:	00f10803 	.word	0x00f10803
    6dc4:	00f10801 	.word	0x00f10801
    6dc8:	00f10802 	.word	0x00f10802

00006dcc <nrf_cc310_bl_hash_update_internal>:
    6dcc:	4b32      	ldr	r3, [pc, #200]	; (6e98 <nrf_cc310_bl_hash_update_internal+0xcc>)
    6dce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6dd2:	4680      	mov	r8, r0
    6dd4:	4692      	mov	sl, r2
    6dd6:	4699      	mov	r9, r3
    6dd8:	6844      	ldr	r4, [r0, #4]
    6dda:	681a      	ldr	r2, [r3, #0]
    6ddc:	2a00      	cmp	r2, #0
    6dde:	d1fc      	bne.n	6dda <nrf_cc310_bl_hash_update_internal+0xe>
    6de0:	4b2e      	ldr	r3, [pc, #184]	; (6e9c <nrf_cc310_bl_hash_update_internal+0xd0>)
    6de2:	469b      	mov	fp, r3
    6de4:	681a      	ldr	r2, [r3, #0]
    6de6:	2a00      	cmp	r2, #0
    6de8:	d1fc      	bne.n	6de4 <nrf_cc310_bl_hash_update_internal+0x18>
    6dea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6dee:	9101      	str	r1, [sp, #4]
    6df0:	f000 fc94 	bl	771c <SaSi_HalClearInterruptBit>
    6df4:	2080      	movs	r0, #128	; 0x80
    6df6:	f000 fc97 	bl	7728 <SaSi_HalMaskInterrupt>
    6dfa:	2301      	movs	r3, #1
    6dfc:	2007      	movs	r0, #7
    6dfe:	4a28      	ldr	r2, [pc, #160]	; (6ea0 <nrf_cc310_bl_hash_update_internal+0xd4>)
    6e00:	4d28      	ldr	r5, [pc, #160]	; (6ea4 <nrf_cc310_bl_hash_update_internal+0xd8>)
    6e02:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
    6e06:	602b      	str	r3, [r5, #0]
    6e08:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    6e0c:	6013      	str	r3, [r2, #0]
    6e0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6e10:	4f25      	ldr	r7, [pc, #148]	; (6ea8 <nrf_cc310_bl_hash_update_internal+0xdc>)
    6e12:	4e26      	ldr	r6, [pc, #152]	; (6eac <nrf_cc310_bl_hash_update_internal+0xe0>)
    6e14:	603b      	str	r3, [r7, #0]
    6e16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6e18:	4620      	mov	r0, r4
    6e1a:	6033      	str	r3, [r6, #0]
    6e1c:	f8d8 3000 	ldr.w	r3, [r8]
    6e20:	f842 3c04 	str.w	r3, [r2, #-4]
    6e24:	f8d8 3008 	ldr.w	r3, [r8, #8]
    6e28:	4798      	blx	r3
    6e2a:	9901      	ldr	r1, [sp, #4]
    6e2c:	f8d9 3000 	ldr.w	r3, [r9]
    6e30:	2b00      	cmp	r3, #0
    6e32:	d1fb      	bne.n	6e2c <nrf_cc310_bl_hash_update_internal+0x60>
    6e34:	f1ba 0f00 	cmp.w	sl, #0
    6e38:	d120      	bne.n	6e7c <nrf_cc310_bl_hash_update_internal+0xb0>
    6e3a:	2204      	movs	r2, #4
    6e3c:	4b1c      	ldr	r3, [pc, #112]	; (6eb0 <nrf_cc310_bl_hash_update_internal+0xe4>)
    6e3e:	601a      	str	r2, [r3, #0]
    6e40:	f8d9 3000 	ldr.w	r3, [r9]
    6e44:	2b00      	cmp	r3, #0
    6e46:	d1fb      	bne.n	6e40 <nrf_cc310_bl_hash_update_internal+0x74>
    6e48:	f8db a000 	ldr.w	sl, [fp]
    6e4c:	f1ba 0f00 	cmp.w	sl, #0
    6e50:	d1fa      	bne.n	6e48 <nrf_cc310_bl_hash_update_internal+0x7c>
    6e52:	f8d8 300c 	ldr.w	r3, [r8, #12]
    6e56:	4620      	mov	r0, r4
    6e58:	4798      	blx	r3
    6e5a:	683b      	ldr	r3, [r7, #0]
    6e5c:	6263      	str	r3, [r4, #36]	; 0x24
    6e5e:	6833      	ldr	r3, [r6, #0]
    6e60:	62a3      	str	r3, [r4, #40]	; 0x28
    6e62:	4b14      	ldr	r3, [pc, #80]	; (6eb4 <nrf_cc310_bl_hash_update_internal+0xe8>)
    6e64:	f8c3 a000 	str.w	sl, [r3]
    6e68:	f8c3 a144 	str.w	sl, [r3, #324]	; 0x144
    6e6c:	f8d9 3000 	ldr.w	r3, [r9]
    6e70:	2b00      	cmp	r3, #0
    6e72:	d1fb      	bne.n	6e6c <nrf_cc310_bl_hash_update_internal+0xa0>
    6e74:	602b      	str	r3, [r5, #0]
    6e76:	b003      	add	sp, #12
    6e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e7c:	6a23      	ldr	r3, [r4, #32]
    6e7e:	2040      	movs	r0, #64	; 0x40
    6e80:	2b01      	cmp	r3, #1
    6e82:	bf04      	itt	eq
    6e84:	4a0b      	ldreq	r2, [pc, #44]	; (6eb4 <nrf_cc310_bl_hash_update_internal+0xe8>)
    6e86:	6013      	streq	r3, [r2, #0]
    6e88:	4b0b      	ldr	r3, [pc, #44]	; (6eb8 <nrf_cc310_bl_hash_update_internal+0xec>)
    6e8a:	6019      	str	r1, [r3, #0]
    6e8c:	f8c3 a004 	str.w	sl, [r3, #4]
    6e90:	f000 fc50 	bl	7734 <SaSi_HalWaitInterrupt>
    6e94:	e7d4      	b.n	6e40 <nrf_cc310_bl_hash_update_internal+0x74>
    6e96:	bf00      	nop
    6e98:	50841910 	.word	0x50841910
    6e9c:	50841c20 	.word	0x50841c20
    6ea0:	50841900 	.word	0x50841900
    6ea4:	50841818 	.word	0x50841818
    6ea8:	508417cc 	.word	0x508417cc
    6eac:	508417d0 	.word	0x508417d0
    6eb0:	508417c8 	.word	0x508417c8
    6eb4:	50841684 	.word	0x50841684
    6eb8:	50841c28 	.word	0x50841c28

00006ebc <PkaDoubleMdf2Mdf>:
    6ebc:	4b54      	ldr	r3, [pc, #336]	; (7010 <PkaDoubleMdf2Mdf+0x154>)
    6ebe:	b510      	push	{r4, lr}
    6ec0:	4619      	mov	r1, r3
    6ec2:	b098      	sub	sp, #96	; 0x60
    6ec4:	681a      	ldr	r2, [r3, #0]
    6ec6:	9201      	str	r2, [sp, #4]
    6ec8:	9a01      	ldr	r2, [sp, #4]
    6eca:	07d2      	lsls	r2, r2, #31
    6ecc:	d5fa      	bpl.n	6ec4 <PkaDoubleMdf2Mdf+0x8>
    6ece:	4b51      	ldr	r3, [pc, #324]	; (7014 <PkaDoubleMdf2Mdf+0x158>)
    6ed0:	4a51      	ldr	r2, [pc, #324]	; (7018 <PkaDoubleMdf2Mdf+0x15c>)
    6ed2:	601a      	str	r2, [r3, #0]
    6ed4:	680a      	ldr	r2, [r1, #0]
    6ed6:	9202      	str	r2, [sp, #8]
    6ed8:	9a02      	ldr	r2, [sp, #8]
    6eda:	07d4      	lsls	r4, r2, #31
    6edc:	d5fa      	bpl.n	6ed4 <PkaDoubleMdf2Mdf+0x18>
    6ede:	4a4f      	ldr	r2, [pc, #316]	; (701c <PkaDoubleMdf2Mdf+0x160>)
    6ee0:	601a      	str	r2, [r3, #0]
    6ee2:	680a      	ldr	r2, [r1, #0]
    6ee4:	9203      	str	r2, [sp, #12]
    6ee6:	9a03      	ldr	r2, [sp, #12]
    6ee8:	07d0      	lsls	r0, r2, #31
    6eea:	d5fa      	bpl.n	6ee2 <PkaDoubleMdf2Mdf+0x26>
    6eec:	484c      	ldr	r0, [pc, #304]	; (7020 <PkaDoubleMdf2Mdf+0x164>)
    6eee:	6018      	str	r0, [r3, #0]
    6ef0:	680a      	ldr	r2, [r1, #0]
    6ef2:	9204      	str	r2, [sp, #16]
    6ef4:	9a04      	ldr	r2, [sp, #16]
    6ef6:	07d2      	lsls	r2, r2, #31
    6ef8:	d5fa      	bpl.n	6ef0 <PkaDoubleMdf2Mdf+0x34>
    6efa:	4a4a      	ldr	r2, [pc, #296]	; (7024 <PkaDoubleMdf2Mdf+0x168>)
    6efc:	601a      	str	r2, [r3, #0]
    6efe:	680a      	ldr	r2, [r1, #0]
    6f00:	9205      	str	r2, [sp, #20]
    6f02:	9a05      	ldr	r2, [sp, #20]
    6f04:	07d4      	lsls	r4, r2, #31
    6f06:	d5fa      	bpl.n	6efe <PkaDoubleMdf2Mdf+0x42>
    6f08:	4a47      	ldr	r2, [pc, #284]	; (7028 <PkaDoubleMdf2Mdf+0x16c>)
    6f0a:	601a      	str	r2, [r3, #0]
    6f0c:	680a      	ldr	r2, [r1, #0]
    6f0e:	9206      	str	r2, [sp, #24]
    6f10:	9a06      	ldr	r2, [sp, #24]
    6f12:	07d2      	lsls	r2, r2, #31
    6f14:	d5fa      	bpl.n	6f0c <PkaDoubleMdf2Mdf+0x50>
    6f16:	4a45      	ldr	r2, [pc, #276]	; (702c <PkaDoubleMdf2Mdf+0x170>)
    6f18:	601a      	str	r2, [r3, #0]
    6f1a:	680a      	ldr	r2, [r1, #0]
    6f1c:	9207      	str	r2, [sp, #28]
    6f1e:	9a07      	ldr	r2, [sp, #28]
    6f20:	07d4      	lsls	r4, r2, #31
    6f22:	d5fa      	bpl.n	6f1a <PkaDoubleMdf2Mdf+0x5e>
    6f24:	4a42      	ldr	r2, [pc, #264]	; (7030 <PkaDoubleMdf2Mdf+0x174>)
    6f26:	601a      	str	r2, [r3, #0]
    6f28:	680a      	ldr	r2, [r1, #0]
    6f2a:	9208      	str	r2, [sp, #32]
    6f2c:	9a08      	ldr	r2, [sp, #32]
    6f2e:	07d2      	lsls	r2, r2, #31
    6f30:	d5fa      	bpl.n	6f28 <PkaDoubleMdf2Mdf+0x6c>
    6f32:	4a40      	ldr	r2, [pc, #256]	; (7034 <PkaDoubleMdf2Mdf+0x178>)
    6f34:	601a      	str	r2, [r3, #0]
    6f36:	680a      	ldr	r2, [r1, #0]
    6f38:	9209      	str	r2, [sp, #36]	; 0x24
    6f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6f3c:	07d4      	lsls	r4, r2, #31
    6f3e:	d5fa      	bpl.n	6f36 <PkaDoubleMdf2Mdf+0x7a>
    6f40:	4a3d      	ldr	r2, [pc, #244]	; (7038 <PkaDoubleMdf2Mdf+0x17c>)
    6f42:	601a      	str	r2, [r3, #0]
    6f44:	680a      	ldr	r2, [r1, #0]
    6f46:	920a      	str	r2, [sp, #40]	; 0x28
    6f48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6f4a:	07d2      	lsls	r2, r2, #31
    6f4c:	d5fa      	bpl.n	6f44 <PkaDoubleMdf2Mdf+0x88>
    6f4e:	4a3b      	ldr	r2, [pc, #236]	; (703c <PkaDoubleMdf2Mdf+0x180>)
    6f50:	601a      	str	r2, [r3, #0]
    6f52:	680a      	ldr	r2, [r1, #0]
    6f54:	920b      	str	r2, [sp, #44]	; 0x2c
    6f56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6f58:	07d4      	lsls	r4, r2, #31
    6f5a:	d5fa      	bpl.n	6f52 <PkaDoubleMdf2Mdf+0x96>
    6f5c:	4a38      	ldr	r2, [pc, #224]	; (7040 <PkaDoubleMdf2Mdf+0x184>)
    6f5e:	601a      	str	r2, [r3, #0]
    6f60:	680a      	ldr	r2, [r1, #0]
    6f62:	920c      	str	r2, [sp, #48]	; 0x30
    6f64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6f66:	07d2      	lsls	r2, r2, #31
    6f68:	d5fa      	bpl.n	6f60 <PkaDoubleMdf2Mdf+0xa4>
    6f6a:	4a36      	ldr	r2, [pc, #216]	; (7044 <PkaDoubleMdf2Mdf+0x188>)
    6f6c:	601a      	str	r2, [r3, #0]
    6f6e:	680a      	ldr	r2, [r1, #0]
    6f70:	920d      	str	r2, [sp, #52]	; 0x34
    6f72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6f74:	07d4      	lsls	r4, r2, #31
    6f76:	d5fa      	bpl.n	6f6e <PkaDoubleMdf2Mdf+0xb2>
    6f78:	4a33      	ldr	r2, [pc, #204]	; (7048 <PkaDoubleMdf2Mdf+0x18c>)
    6f7a:	601a      	str	r2, [r3, #0]
    6f7c:	680a      	ldr	r2, [r1, #0]
    6f7e:	920e      	str	r2, [sp, #56]	; 0x38
    6f80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    6f82:	07d2      	lsls	r2, r2, #31
    6f84:	d5fa      	bpl.n	6f7c <PkaDoubleMdf2Mdf+0xc0>
    6f86:	4a31      	ldr	r2, [pc, #196]	; (704c <PkaDoubleMdf2Mdf+0x190>)
    6f88:	601a      	str	r2, [r3, #0]
    6f8a:	680a      	ldr	r2, [r1, #0]
    6f8c:	920f      	str	r2, [sp, #60]	; 0x3c
    6f8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6f90:	07d4      	lsls	r4, r2, #31
    6f92:	d5fa      	bpl.n	6f8a <PkaDoubleMdf2Mdf+0xce>
    6f94:	4a2e      	ldr	r2, [pc, #184]	; (7050 <PkaDoubleMdf2Mdf+0x194>)
    6f96:	601a      	str	r2, [r3, #0]
    6f98:	680a      	ldr	r2, [r1, #0]
    6f9a:	9210      	str	r2, [sp, #64]	; 0x40
    6f9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    6f9e:	07d2      	lsls	r2, r2, #31
    6fa0:	d5fa      	bpl.n	6f98 <PkaDoubleMdf2Mdf+0xdc>
    6fa2:	4a2c      	ldr	r2, [pc, #176]	; (7054 <PkaDoubleMdf2Mdf+0x198>)
    6fa4:	601a      	str	r2, [r3, #0]
    6fa6:	4b1a      	ldr	r3, [pc, #104]	; (7010 <PkaDoubleMdf2Mdf+0x154>)
    6fa8:	4619      	mov	r1, r3
    6faa:	681c      	ldr	r4, [r3, #0]
    6fac:	9411      	str	r4, [sp, #68]	; 0x44
    6fae:	9c11      	ldr	r4, [sp, #68]	; 0x44
    6fb0:	07e4      	lsls	r4, r4, #31
    6fb2:	d5fa      	bpl.n	6faa <PkaDoubleMdf2Mdf+0xee>
    6fb4:	4b17      	ldr	r3, [pc, #92]	; (7014 <PkaDoubleMdf2Mdf+0x158>)
    6fb6:	6018      	str	r0, [r3, #0]
    6fb8:	6808      	ldr	r0, [r1, #0]
    6fba:	9012      	str	r0, [sp, #72]	; 0x48
    6fbc:	9812      	ldr	r0, [sp, #72]	; 0x48
    6fbe:	07c4      	lsls	r4, r0, #31
    6fc0:	d5fa      	bpl.n	6fb8 <PkaDoubleMdf2Mdf+0xfc>
    6fc2:	601a      	str	r2, [r3, #0]
    6fc4:	680a      	ldr	r2, [r1, #0]
    6fc6:	9213      	str	r2, [sp, #76]	; 0x4c
    6fc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6fca:	07d0      	lsls	r0, r2, #31
    6fcc:	d5fa      	bpl.n	6fc4 <PkaDoubleMdf2Mdf+0x108>
    6fce:	4a12      	ldr	r2, [pc, #72]	; (7018 <PkaDoubleMdf2Mdf+0x15c>)
    6fd0:	601a      	str	r2, [r3, #0]
    6fd2:	680a      	ldr	r2, [r1, #0]
    6fd4:	9214      	str	r2, [sp, #80]	; 0x50
    6fd6:	9a14      	ldr	r2, [sp, #80]	; 0x50
    6fd8:	07d2      	lsls	r2, r2, #31
    6fda:	d5fa      	bpl.n	6fd2 <PkaDoubleMdf2Mdf+0x116>
    6fdc:	4a1e      	ldr	r2, [pc, #120]	; (7058 <PkaDoubleMdf2Mdf+0x19c>)
    6fde:	601a      	str	r2, [r3, #0]
    6fe0:	680a      	ldr	r2, [r1, #0]
    6fe2:	9215      	str	r2, [sp, #84]	; 0x54
    6fe4:	9a15      	ldr	r2, [sp, #84]	; 0x54
    6fe6:	07d4      	lsls	r4, r2, #31
    6fe8:	d5fa      	bpl.n	6fe0 <PkaDoubleMdf2Mdf+0x124>
    6fea:	4a1c      	ldr	r2, [pc, #112]	; (705c <PkaDoubleMdf2Mdf+0x1a0>)
    6fec:	601a      	str	r2, [r3, #0]
    6fee:	680a      	ldr	r2, [r1, #0]
    6ff0:	9216      	str	r2, [sp, #88]	; 0x58
    6ff2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    6ff4:	07d0      	lsls	r0, r2, #31
    6ff6:	d5fa      	bpl.n	6fee <PkaDoubleMdf2Mdf+0x132>
    6ff8:	4a19      	ldr	r2, [pc, #100]	; (7060 <PkaDoubleMdf2Mdf+0x1a4>)
    6ffa:	601a      	str	r2, [r3, #0]
    6ffc:	680a      	ldr	r2, [r1, #0]
    6ffe:	9217      	str	r2, [sp, #92]	; 0x5c
    7000:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    7002:	07d2      	lsls	r2, r2, #31
    7004:	d5fa      	bpl.n	6ffc <PkaDoubleMdf2Mdf+0x140>
    7006:	4a17      	ldr	r2, [pc, #92]	; (7064 <PkaDoubleMdf2Mdf+0x1a8>)
    7008:	601a      	str	r2, [r3, #0]
    700a:	b018      	add	sp, #96	; 0x60
    700c:	bd10      	pop	{r4, pc}
    700e:	bf00      	nop
    7010:	508410b0 	.word	0x508410b0
    7014:	50841080 	.word	0x50841080
    7018:	21659300 	.word	0x21659300
    701c:	90310400 	.word	0x90310400
    7020:	90659640 	.word	0x90659640
    7024:	21618300 	.word	0x21618300
    7028:	2130c300 	.word	0x2130c300
    702c:	9064c300 	.word	0x9064c300
    7030:	90618100 	.word	0x90618100
    7034:	21104600 	.word	0x21104600
    7038:	21118100 	.word	0x21118100
    703c:	21444100 	.word	0x21444100
    7040:	2920c300 	.word	0x2920c300
    7044:	c810460c 	.word	0xc810460c
    7048:	21318600 	.word	0x21318600
    704c:	2160c300 	.word	0x2160c300
    7050:	2928c140 	.word	0x2928c140
    7054:	21659640 	.word	0x21659640
    7058:	90311300 	.word	0x90311300
    705c:	29259640 	.word	0x29259640
    7060:	c8144659 	.word	0xc8144659
    7064:	49320440 	.word	0x49320440

00007068 <PkaDoubleMdf2Jcb>:
    7068:	4b49      	ldr	r3, [pc, #292]	; (7190 <PkaDoubleMdf2Jcb+0x128>)
    706a:	b510      	push	{r4, lr}
    706c:	4619      	mov	r1, r3
    706e:	b094      	sub	sp, #80	; 0x50
    7070:	681a      	ldr	r2, [r3, #0]
    7072:	9200      	str	r2, [sp, #0]
    7074:	9a00      	ldr	r2, [sp, #0]
    7076:	07d2      	lsls	r2, r2, #31
    7078:	d5fa      	bpl.n	7070 <PkaDoubleMdf2Jcb+0x8>
    707a:	4b46      	ldr	r3, [pc, #280]	; (7194 <PkaDoubleMdf2Jcb+0x12c>)
    707c:	4a46      	ldr	r2, [pc, #280]	; (7198 <PkaDoubleMdf2Jcb+0x130>)
    707e:	601a      	str	r2, [r3, #0]
    7080:	680a      	ldr	r2, [r1, #0]
    7082:	9201      	str	r2, [sp, #4]
    7084:	9a01      	ldr	r2, [sp, #4]
    7086:	07d4      	lsls	r4, r2, #31
    7088:	d5fa      	bpl.n	7080 <PkaDoubleMdf2Jcb+0x18>
    708a:	4a44      	ldr	r2, [pc, #272]	; (719c <PkaDoubleMdf2Jcb+0x134>)
    708c:	601a      	str	r2, [r3, #0]
    708e:	680a      	ldr	r2, [r1, #0]
    7090:	9202      	str	r2, [sp, #8]
    7092:	9a02      	ldr	r2, [sp, #8]
    7094:	07d0      	lsls	r0, r2, #31
    7096:	d5fa      	bpl.n	708e <PkaDoubleMdf2Jcb+0x26>
    7098:	4841      	ldr	r0, [pc, #260]	; (71a0 <PkaDoubleMdf2Jcb+0x138>)
    709a:	6018      	str	r0, [r3, #0]
    709c:	680a      	ldr	r2, [r1, #0]
    709e:	9203      	str	r2, [sp, #12]
    70a0:	9a03      	ldr	r2, [sp, #12]
    70a2:	07d2      	lsls	r2, r2, #31
    70a4:	d5fa      	bpl.n	709c <PkaDoubleMdf2Jcb+0x34>
    70a6:	4a3f      	ldr	r2, [pc, #252]	; (71a4 <PkaDoubleMdf2Jcb+0x13c>)
    70a8:	601a      	str	r2, [r3, #0]
    70aa:	680a      	ldr	r2, [r1, #0]
    70ac:	9204      	str	r2, [sp, #16]
    70ae:	9a04      	ldr	r2, [sp, #16]
    70b0:	07d4      	lsls	r4, r2, #31
    70b2:	d5fa      	bpl.n	70aa <PkaDoubleMdf2Jcb+0x42>
    70b4:	4a3c      	ldr	r2, [pc, #240]	; (71a8 <PkaDoubleMdf2Jcb+0x140>)
    70b6:	601a      	str	r2, [r3, #0]
    70b8:	680a      	ldr	r2, [r1, #0]
    70ba:	9205      	str	r2, [sp, #20]
    70bc:	9a05      	ldr	r2, [sp, #20]
    70be:	07d2      	lsls	r2, r2, #31
    70c0:	d5fa      	bpl.n	70b8 <PkaDoubleMdf2Jcb+0x50>
    70c2:	4a3a      	ldr	r2, [pc, #232]	; (71ac <PkaDoubleMdf2Jcb+0x144>)
    70c4:	601a      	str	r2, [r3, #0]
    70c6:	680a      	ldr	r2, [r1, #0]
    70c8:	9206      	str	r2, [sp, #24]
    70ca:	9a06      	ldr	r2, [sp, #24]
    70cc:	07d4      	lsls	r4, r2, #31
    70ce:	d5fa      	bpl.n	70c6 <PkaDoubleMdf2Jcb+0x5e>
    70d0:	4a37      	ldr	r2, [pc, #220]	; (71b0 <PkaDoubleMdf2Jcb+0x148>)
    70d2:	601a      	str	r2, [r3, #0]
    70d4:	680a      	ldr	r2, [r1, #0]
    70d6:	9207      	str	r2, [sp, #28]
    70d8:	9a07      	ldr	r2, [sp, #28]
    70da:	07d2      	lsls	r2, r2, #31
    70dc:	d5fa      	bpl.n	70d4 <PkaDoubleMdf2Jcb+0x6c>
    70de:	4a35      	ldr	r2, [pc, #212]	; (71b4 <PkaDoubleMdf2Jcb+0x14c>)
    70e0:	601a      	str	r2, [r3, #0]
    70e2:	680a      	ldr	r2, [r1, #0]
    70e4:	9208      	str	r2, [sp, #32]
    70e6:	9a08      	ldr	r2, [sp, #32]
    70e8:	07d4      	lsls	r4, r2, #31
    70ea:	d5fa      	bpl.n	70e2 <PkaDoubleMdf2Jcb+0x7a>
    70ec:	4a32      	ldr	r2, [pc, #200]	; (71b8 <PkaDoubleMdf2Jcb+0x150>)
    70ee:	601a      	str	r2, [r3, #0]
    70f0:	680a      	ldr	r2, [r1, #0]
    70f2:	9209      	str	r2, [sp, #36]	; 0x24
    70f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    70f6:	07d2      	lsls	r2, r2, #31
    70f8:	d5fa      	bpl.n	70f0 <PkaDoubleMdf2Jcb+0x88>
    70fa:	4a30      	ldr	r2, [pc, #192]	; (71bc <PkaDoubleMdf2Jcb+0x154>)
    70fc:	601a      	str	r2, [r3, #0]
    70fe:	680a      	ldr	r2, [r1, #0]
    7100:	920a      	str	r2, [sp, #40]	; 0x28
    7102:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7104:	07d4      	lsls	r4, r2, #31
    7106:	d5fa      	bpl.n	70fe <PkaDoubleMdf2Jcb+0x96>
    7108:	4a2d      	ldr	r2, [pc, #180]	; (71c0 <PkaDoubleMdf2Jcb+0x158>)
    710a:	601a      	str	r2, [r3, #0]
    710c:	680a      	ldr	r2, [r1, #0]
    710e:	920b      	str	r2, [sp, #44]	; 0x2c
    7110:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7112:	07d2      	lsls	r2, r2, #31
    7114:	d5fa      	bpl.n	710c <PkaDoubleMdf2Jcb+0xa4>
    7116:	4a2b      	ldr	r2, [pc, #172]	; (71c4 <PkaDoubleMdf2Jcb+0x15c>)
    7118:	601a      	str	r2, [r3, #0]
    711a:	680a      	ldr	r2, [r1, #0]
    711c:	920c      	str	r2, [sp, #48]	; 0x30
    711e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7120:	07d4      	lsls	r4, r2, #31
    7122:	d5fa      	bpl.n	711a <PkaDoubleMdf2Jcb+0xb2>
    7124:	4a28      	ldr	r2, [pc, #160]	; (71c8 <PkaDoubleMdf2Jcb+0x160>)
    7126:	601a      	str	r2, [r3, #0]
    7128:	680a      	ldr	r2, [r1, #0]
    712a:	920d      	str	r2, [sp, #52]	; 0x34
    712c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    712e:	07d2      	lsls	r2, r2, #31
    7130:	d5fa      	bpl.n	7128 <PkaDoubleMdf2Jcb+0xc0>
    7132:	4a26      	ldr	r2, [pc, #152]	; (71cc <PkaDoubleMdf2Jcb+0x164>)
    7134:	601a      	str	r2, [r3, #0]
    7136:	680a      	ldr	r2, [r1, #0]
    7138:	920e      	str	r2, [sp, #56]	; 0x38
    713a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    713c:	07d4      	lsls	r4, r2, #31
    713e:	d5fa      	bpl.n	7136 <PkaDoubleMdf2Jcb+0xce>
    7140:	4a23      	ldr	r2, [pc, #140]	; (71d0 <PkaDoubleMdf2Jcb+0x168>)
    7142:	601a      	str	r2, [r3, #0]
    7144:	680a      	ldr	r2, [r1, #0]
    7146:	920f      	str	r2, [sp, #60]	; 0x3c
    7148:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    714a:	07d2      	lsls	r2, r2, #31
    714c:	d5fa      	bpl.n	7144 <PkaDoubleMdf2Jcb+0xdc>
    714e:	4a21      	ldr	r2, [pc, #132]	; (71d4 <PkaDoubleMdf2Jcb+0x16c>)
    7150:	601a      	str	r2, [r3, #0]
    7152:	4b0f      	ldr	r3, [pc, #60]	; (7190 <PkaDoubleMdf2Jcb+0x128>)
    7154:	4619      	mov	r1, r3
    7156:	681c      	ldr	r4, [r3, #0]
    7158:	9410      	str	r4, [sp, #64]	; 0x40
    715a:	9c10      	ldr	r4, [sp, #64]	; 0x40
    715c:	07e4      	lsls	r4, r4, #31
    715e:	d5fa      	bpl.n	7156 <PkaDoubleMdf2Jcb+0xee>
    7160:	4b0c      	ldr	r3, [pc, #48]	; (7194 <PkaDoubleMdf2Jcb+0x12c>)
    7162:	6018      	str	r0, [r3, #0]
    7164:	6808      	ldr	r0, [r1, #0]
    7166:	9011      	str	r0, [sp, #68]	; 0x44
    7168:	9811      	ldr	r0, [sp, #68]	; 0x44
    716a:	07c4      	lsls	r4, r0, #31
    716c:	d5fa      	bpl.n	7164 <PkaDoubleMdf2Jcb+0xfc>
    716e:	601a      	str	r2, [r3, #0]
    7170:	680a      	ldr	r2, [r1, #0]
    7172:	9212      	str	r2, [sp, #72]	; 0x48
    7174:	9a12      	ldr	r2, [sp, #72]	; 0x48
    7176:	07d0      	lsls	r0, r2, #31
    7178:	d5fa      	bpl.n	7170 <PkaDoubleMdf2Jcb+0x108>
    717a:	4a17      	ldr	r2, [pc, #92]	; (71d8 <PkaDoubleMdf2Jcb+0x170>)
    717c:	601a      	str	r2, [r3, #0]
    717e:	680a      	ldr	r2, [r1, #0]
    7180:	9213      	str	r2, [sp, #76]	; 0x4c
    7182:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    7184:	07d2      	lsls	r2, r2, #31
    7186:	d5fa      	bpl.n	717e <PkaDoubleMdf2Jcb+0x116>
    7188:	4a14      	ldr	r2, [pc, #80]	; (71dc <PkaDoubleMdf2Jcb+0x174>)
    718a:	601a      	str	r2, [r3, #0]
    718c:	b014      	add	sp, #80	; 0x50
    718e:	bd10      	pop	{r4, pc}
    7190:	508410b0 	.word	0x508410b0
    7194:	50841080 	.word	0x50841080
    7198:	21659080 	.word	0x21659080
    719c:	90090400 	.word	0x90090400
    71a0:	90659640 	.word	0x90659640
    71a4:	21618080 	.word	0x21618080
    71a8:	21082080 	.word	0x21082080
    71ac:	90642080 	.word	0x90642080
    71b0:	90618100 	.word	0x90618100
    71b4:	21104600 	.word	0x21104600
    71b8:	21118100 	.word	0x21118100
    71bc:	21444100 	.word	0x21444100
    71c0:	29202080 	.word	0x29202080
    71c4:	c8104602 	.word	0xc8104602
    71c8:	21098600 	.word	0x21098600
    71cc:	21602080 	.word	0x21602080
    71d0:	29282140 	.word	0x29282140
    71d4:	21659640 	.word	0x21659640
    71d8:	29259640 	.word	0x29259640
    71dc:	c8144659 	.word	0xc8144659

000071e0 <PkaAddJcbAfn2Mdf>:
    71e0:	4b50      	ldr	r3, [pc, #320]	; (7324 <PkaAddJcbAfn2Mdf+0x144>)
    71e2:	b510      	push	{r4, lr}
    71e4:	461c      	mov	r4, r3
    71e6:	b096      	sub	sp, #88	; 0x58
    71e8:	681a      	ldr	r2, [r3, #0]
    71ea:	9201      	str	r2, [sp, #4]
    71ec:	9a01      	ldr	r2, [sp, #4]
    71ee:	07d2      	lsls	r2, r2, #31
    71f0:	d5fa      	bpl.n	71e8 <PkaAddJcbAfn2Mdf+0x8>
    71f2:	4b4d      	ldr	r3, [pc, #308]	; (7328 <PkaAddJcbAfn2Mdf+0x148>)
    71f4:	4a4d      	ldr	r2, [pc, #308]	; (732c <PkaAddJcbAfn2Mdf+0x14c>)
    71f6:	601a      	str	r2, [r3, #0]
    71f8:	6822      	ldr	r2, [r4, #0]
    71fa:	9202      	str	r2, [sp, #8]
    71fc:	9a02      	ldr	r2, [sp, #8]
    71fe:	07d2      	lsls	r2, r2, #31
    7200:	d5fa      	bpl.n	71f8 <PkaAddJcbAfn2Mdf+0x18>
    7202:	4a4b      	ldr	r2, [pc, #300]	; (7330 <PkaAddJcbAfn2Mdf+0x150>)
    7204:	601a      	str	r2, [r3, #0]
    7206:	4a4b      	ldr	r2, [pc, #300]	; (7334 <PkaAddJcbAfn2Mdf+0x154>)
    7208:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
    720c:	6822      	ldr	r2, [r4, #0]
    720e:	9203      	str	r2, [sp, #12]
    7210:	9a03      	ldr	r2, [sp, #12]
    7212:	07d2      	lsls	r2, r2, #31
    7214:	d5fa      	bpl.n	720c <PkaAddJcbAfn2Mdf+0x2c>
    7216:	6018      	str	r0, [r3, #0]
    7218:	6822      	ldr	r2, [r4, #0]
    721a:	9204      	str	r2, [sp, #16]
    721c:	9a04      	ldr	r2, [sp, #16]
    721e:	07d0      	lsls	r0, r2, #31
    7220:	d5fa      	bpl.n	7218 <PkaAddJcbAfn2Mdf+0x38>
    7222:	4a45      	ldr	r2, [pc, #276]	; (7338 <PkaAddJcbAfn2Mdf+0x158>)
    7224:	601a      	str	r2, [r3, #0]
    7226:	f5a2 0280 	sub.w	r2, r2, #4194304	; 0x400000
    722a:	ea42 4181 	orr.w	r1, r2, r1, lsl #18
    722e:	6822      	ldr	r2, [r4, #0]
    7230:	9205      	str	r2, [sp, #20]
    7232:	9a05      	ldr	r2, [sp, #20]
    7234:	07d2      	lsls	r2, r2, #31
    7236:	d5fa      	bpl.n	722e <PkaAddJcbAfn2Mdf+0x4e>
    7238:	6019      	str	r1, [r3, #0]
    723a:	6822      	ldr	r2, [r4, #0]
    723c:	9206      	str	r2, [sp, #24]
    723e:	9a06      	ldr	r2, [sp, #24]
    7240:	07d0      	lsls	r0, r2, #31
    7242:	d5fa      	bpl.n	723a <PkaAddJcbAfn2Mdf+0x5a>
    7244:	4a3d      	ldr	r2, [pc, #244]	; (733c <PkaAddJcbAfn2Mdf+0x15c>)
    7246:	601a      	str	r2, [r3, #0]
    7248:	6822      	ldr	r2, [r4, #0]
    724a:	9207      	str	r2, [sp, #28]
    724c:	9a07      	ldr	r2, [sp, #28]
    724e:	07d1      	lsls	r1, r2, #31
    7250:	d5fa      	bpl.n	7248 <PkaAddJcbAfn2Mdf+0x68>
    7252:	4a3b      	ldr	r2, [pc, #236]	; (7340 <PkaAddJcbAfn2Mdf+0x160>)
    7254:	601a      	str	r2, [r3, #0]
    7256:	6822      	ldr	r2, [r4, #0]
    7258:	9208      	str	r2, [sp, #32]
    725a:	9a08      	ldr	r2, [sp, #32]
    725c:	07d2      	lsls	r2, r2, #31
    725e:	d5fa      	bpl.n	7256 <PkaAddJcbAfn2Mdf+0x76>
    7260:	4a38      	ldr	r2, [pc, #224]	; (7344 <PkaAddJcbAfn2Mdf+0x164>)
    7262:	601a      	str	r2, [r3, #0]
    7264:	6822      	ldr	r2, [r4, #0]
    7266:	9209      	str	r2, [sp, #36]	; 0x24
    7268:	9a09      	ldr	r2, [sp, #36]	; 0x24
    726a:	07d0      	lsls	r0, r2, #31
    726c:	d5fa      	bpl.n	7264 <PkaAddJcbAfn2Mdf+0x84>
    726e:	4a36      	ldr	r2, [pc, #216]	; (7348 <PkaAddJcbAfn2Mdf+0x168>)
    7270:	601a      	str	r2, [r3, #0]
    7272:	6822      	ldr	r2, [r4, #0]
    7274:	920a      	str	r2, [sp, #40]	; 0x28
    7276:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7278:	07d1      	lsls	r1, r2, #31
    727a:	d5fa      	bpl.n	7272 <PkaAddJcbAfn2Mdf+0x92>
    727c:	4a33      	ldr	r2, [pc, #204]	; (734c <PkaAddJcbAfn2Mdf+0x16c>)
    727e:	601a      	str	r2, [r3, #0]
    7280:	6822      	ldr	r2, [r4, #0]
    7282:	920b      	str	r2, [sp, #44]	; 0x2c
    7284:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7286:	07d2      	lsls	r2, r2, #31
    7288:	d5fa      	bpl.n	7280 <PkaAddJcbAfn2Mdf+0xa0>
    728a:	4a31      	ldr	r2, [pc, #196]	; (7350 <PkaAddJcbAfn2Mdf+0x170>)
    728c:	601a      	str	r2, [r3, #0]
    728e:	6822      	ldr	r2, [r4, #0]
    7290:	920c      	str	r2, [sp, #48]	; 0x30
    7292:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7294:	07d0      	lsls	r0, r2, #31
    7296:	d5fa      	bpl.n	728e <PkaAddJcbAfn2Mdf+0xae>
    7298:	4a2e      	ldr	r2, [pc, #184]	; (7354 <PkaAddJcbAfn2Mdf+0x174>)
    729a:	601a      	str	r2, [r3, #0]
    729c:	6822      	ldr	r2, [r4, #0]
    729e:	920d      	str	r2, [sp, #52]	; 0x34
    72a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    72a2:	07d1      	lsls	r1, r2, #31
    72a4:	d5fa      	bpl.n	729c <PkaAddJcbAfn2Mdf+0xbc>
    72a6:	4a2c      	ldr	r2, [pc, #176]	; (7358 <PkaAddJcbAfn2Mdf+0x178>)
    72a8:	601a      	str	r2, [r3, #0]
    72aa:	6822      	ldr	r2, [r4, #0]
    72ac:	920e      	str	r2, [sp, #56]	; 0x38
    72ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    72b0:	07d2      	lsls	r2, r2, #31
    72b2:	d5fa      	bpl.n	72aa <PkaAddJcbAfn2Mdf+0xca>
    72b4:	4a29      	ldr	r2, [pc, #164]	; (735c <PkaAddJcbAfn2Mdf+0x17c>)
    72b6:	601a      	str	r2, [r3, #0]
    72b8:	6822      	ldr	r2, [r4, #0]
    72ba:	920f      	str	r2, [sp, #60]	; 0x3c
    72bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    72be:	07d0      	lsls	r0, r2, #31
    72c0:	d5fa      	bpl.n	72b8 <PkaAddJcbAfn2Mdf+0xd8>
    72c2:	4a27      	ldr	r2, [pc, #156]	; (7360 <PkaAddJcbAfn2Mdf+0x180>)
    72c4:	601a      	str	r2, [r3, #0]
    72c6:	6821      	ldr	r1, [r4, #0]
    72c8:	9110      	str	r1, [sp, #64]	; 0x40
    72ca:	9910      	ldr	r1, [sp, #64]	; 0x40
    72cc:	07c9      	lsls	r1, r1, #31
    72ce:	d5fa      	bpl.n	72c6 <PkaAddJcbAfn2Mdf+0xe6>
    72d0:	601a      	str	r2, [r3, #0]
    72d2:	4b14      	ldr	r3, [pc, #80]	; (7324 <PkaAddJcbAfn2Mdf+0x144>)
    72d4:	461a      	mov	r2, r3
    72d6:	6819      	ldr	r1, [r3, #0]
    72d8:	9111      	str	r1, [sp, #68]	; 0x44
    72da:	9911      	ldr	r1, [sp, #68]	; 0x44
    72dc:	07c8      	lsls	r0, r1, #31
    72de:	d5fa      	bpl.n	72d6 <PkaAddJcbAfn2Mdf+0xf6>
    72e0:	4b11      	ldr	r3, [pc, #68]	; (7328 <PkaAddJcbAfn2Mdf+0x148>)
    72e2:	4920      	ldr	r1, [pc, #128]	; (7364 <PkaAddJcbAfn2Mdf+0x184>)
    72e4:	6019      	str	r1, [r3, #0]
    72e6:	6811      	ldr	r1, [r2, #0]
    72e8:	9112      	str	r1, [sp, #72]	; 0x48
    72ea:	9912      	ldr	r1, [sp, #72]	; 0x48
    72ec:	07c9      	lsls	r1, r1, #31
    72ee:	d5fa      	bpl.n	72e6 <PkaAddJcbAfn2Mdf+0x106>
    72f0:	491d      	ldr	r1, [pc, #116]	; (7368 <PkaAddJcbAfn2Mdf+0x188>)
    72f2:	6019      	str	r1, [r3, #0]
    72f4:	6811      	ldr	r1, [r2, #0]
    72f6:	9113      	str	r1, [sp, #76]	; 0x4c
    72f8:	9913      	ldr	r1, [sp, #76]	; 0x4c
    72fa:	07cc      	lsls	r4, r1, #31
    72fc:	d5fa      	bpl.n	72f4 <PkaAddJcbAfn2Mdf+0x114>
    72fe:	490b      	ldr	r1, [pc, #44]	; (732c <PkaAddJcbAfn2Mdf+0x14c>)
    7300:	6019      	str	r1, [r3, #0]
    7302:	6811      	ldr	r1, [r2, #0]
    7304:	9114      	str	r1, [sp, #80]	; 0x50
    7306:	9914      	ldr	r1, [sp, #80]	; 0x50
    7308:	07c8      	lsls	r0, r1, #31
    730a:	d5fa      	bpl.n	7302 <PkaAddJcbAfn2Mdf+0x122>
    730c:	4917      	ldr	r1, [pc, #92]	; (736c <PkaAddJcbAfn2Mdf+0x18c>)
    730e:	6019      	str	r1, [r3, #0]
    7310:	6811      	ldr	r1, [r2, #0]
    7312:	9115      	str	r1, [sp, #84]	; 0x54
    7314:	9915      	ldr	r1, [sp, #84]	; 0x54
    7316:	07c9      	lsls	r1, r1, #31
    7318:	d5fa      	bpl.n	7310 <PkaAddJcbAfn2Mdf+0x130>
    731a:	4a15      	ldr	r2, [pc, #84]	; (7370 <PkaAddJcbAfn2Mdf+0x190>)
    731c:	601a      	str	r2, [r3, #0]
    731e:	b016      	add	sp, #88	; 0x58
    7320:	bd10      	pop	{r4, pc}
    7322:	bf00      	nop
    7324:	508410b0 	.word	0x508410b0
    7328:	50841080 	.word	0x50841080
    732c:	90410440 	.word	0x90410440
    7330:	29298600 	.word	0x29298600
    7334:	c80110d8 	.word	0xc80110d8
    7338:	90411440 	.word	0x90411440
    733c:	29211440 	.word	0x29211440
    7340:	21651440 	.word	0x21651440
    7344:	90403400 	.word	0x90403400
    7348:	900c3100 	.word	0x900c3100
    734c:	900c40c0 	.word	0x900c40c0
    7350:	292030c0 	.word	0x292030c0
    7354:	900d9640 	.word	0x900d9640
    7358:	90604100 	.word	0x90604100
    735c:	c8451603 	.word	0xc8451603
    7360:	21118600 	.word	0x21118600
    7364:	21604100 	.word	0x21604100
    7368:	c8444659 	.word	0xc8444659
    736c:	90451440 	.word	0x90451440
    7370:	902d1440 	.word	0x902d1440

00007374 <PkaJcb2Afn>:
    7374:	4826      	ldr	r0, [pc, #152]	; (7410 <PkaJcb2Afn+0x9c>)
    7376:	b570      	push	{r4, r5, r6, lr}
    7378:	4605      	mov	r5, r0
    737a:	b088      	sub	sp, #32
    737c:	6804      	ldr	r4, [r0, #0]
    737e:	9400      	str	r4, [sp, #0]
    7380:	9c00      	ldr	r4, [sp, #0]
    7382:	07e6      	lsls	r6, r4, #31
    7384:	d5fa      	bpl.n	737c <PkaJcb2Afn+0x8>
    7386:	4c23      	ldr	r4, [pc, #140]	; (7414 <PkaJcb2Afn+0xa0>)
    7388:	4823      	ldr	r0, [pc, #140]	; (7418 <PkaJcb2Afn+0xa4>)
    738a:	6004      	str	r4, [r0, #0]
    738c:	4c23      	ldr	r4, [pc, #140]	; (741c <PkaJcb2Afn+0xa8>)
    738e:	ea44 4383 	orr.w	r3, r4, r3, lsl #18
    7392:	682c      	ldr	r4, [r5, #0]
    7394:	9401      	str	r4, [sp, #4]
    7396:	9c01      	ldr	r4, [sp, #4]
    7398:	07e4      	lsls	r4, r4, #31
    739a:	d5fa      	bpl.n	7392 <PkaJcb2Afn+0x1e>
    739c:	6003      	str	r3, [r0, #0]
    739e:	0193      	lsls	r3, r2, #6
    73a0:	ea43 4282 	orr.w	r2, r3, r2, lsl #18
    73a4:	f042 4410 	orr.w	r4, r2, #2415919104	; 0x90000000
    73a8:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
    73ac:	682b      	ldr	r3, [r5, #0]
    73ae:	9302      	str	r3, [sp, #8]
    73b0:	9b02      	ldr	r3, [sp, #8]
    73b2:	07de      	lsls	r6, r3, #31
    73b4:	d5fa      	bpl.n	73ac <PkaJcb2Afn+0x38>
    73b6:	6004      	str	r4, [r0, #0]
    73b8:	682b      	ldr	r3, [r5, #0]
    73ba:	9303      	str	r3, [sp, #12]
    73bc:	9b03      	ldr	r3, [sp, #12]
    73be:	07db      	lsls	r3, r3, #31
    73c0:	d5fa      	bpl.n	73b8 <PkaJcb2Afn+0x44>
    73c2:	4b17      	ldr	r3, [pc, #92]	; (7420 <PkaJcb2Afn+0xac>)
    73c4:	6003      	str	r3, [r0, #0]
    73c6:	018b      	lsls	r3, r1, #6
    73c8:	ea43 4181 	orr.w	r1, r3, r1, lsl #18
    73cc:	f041 4310 	orr.w	r3, r1, #2415919104	; 0x90000000
    73d0:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
    73d4:	682e      	ldr	r6, [r5, #0]
    73d6:	9604      	str	r6, [sp, #16]
    73d8:	9e04      	ldr	r6, [sp, #16]
    73da:	07f6      	lsls	r6, r6, #31
    73dc:	d5fa      	bpl.n	73d4 <PkaJcb2Afn+0x60>
    73de:	6003      	str	r3, [r0, #0]
    73e0:	682b      	ldr	r3, [r5, #0]
    73e2:	9305      	str	r3, [sp, #20]
    73e4:	9b05      	ldr	r3, [sp, #20]
    73e6:	07de      	lsls	r6, r3, #31
    73e8:	d5fa      	bpl.n	73e0 <PkaJcb2Afn+0x6c>
    73ea:	6004      	str	r4, [r0, #0]
    73ec:	f041 4158 	orr.w	r1, r1, #3623878656	; 0xd8000000
    73f0:	682b      	ldr	r3, [r5, #0]
    73f2:	9306      	str	r3, [sp, #24]
    73f4:	9b06      	ldr	r3, [sp, #24]
    73f6:	07dc      	lsls	r4, r3, #31
    73f8:	d5fa      	bpl.n	73f0 <PkaJcb2Afn+0x7c>
    73fa:	6001      	str	r1, [r0, #0]
    73fc:	f042 4258 	orr.w	r2, r2, #3623878656	; 0xd8000000
    7400:	682b      	ldr	r3, [r5, #0]
    7402:	9307      	str	r3, [sp, #28]
    7404:	9b07      	ldr	r3, [sp, #28]
    7406:	07db      	lsls	r3, r3, #31
    7408:	d5fa      	bpl.n	7400 <PkaJcb2Afn+0x8c>
    740a:	6002      	str	r2, [r0, #0]
    740c:	b008      	add	sp, #32
    740e:	bd70      	pop	{r4, r5, r6, pc}
    7410:	508410b0 	.word	0x508410b0
    7414:	290221c0 	.word	0x290221c0
    7418:	50841080 	.word	0x50841080
    741c:	98007180 	.word	0x98007180
    7420:	90186180 	.word	0x90186180

00007424 <PkaAddAff>:
    7424:	4b35      	ldr	r3, [pc, #212]	; (74fc <PkaAddAff+0xd8>)
    7426:	b08e      	sub	sp, #56	; 0x38
    7428:	4619      	mov	r1, r3
    742a:	681a      	ldr	r2, [r3, #0]
    742c:	9200      	str	r2, [sp, #0]
    742e:	9a00      	ldr	r2, [sp, #0]
    7430:	07d2      	lsls	r2, r2, #31
    7432:	d5fa      	bpl.n	742a <PkaAddAff+0x6>
    7434:	4b32      	ldr	r3, [pc, #200]	; (7500 <PkaAddAff+0xdc>)
    7436:	4a33      	ldr	r2, [pc, #204]	; (7504 <PkaAddAff+0xe0>)
    7438:	601a      	str	r2, [r3, #0]
    743a:	680a      	ldr	r2, [r1, #0]
    743c:	9201      	str	r2, [sp, #4]
    743e:	9a01      	ldr	r2, [sp, #4]
    7440:	07d0      	lsls	r0, r2, #31
    7442:	d5fa      	bpl.n	743a <PkaAddAff+0x16>
    7444:	4a30      	ldr	r2, [pc, #192]	; (7508 <PkaAddAff+0xe4>)
    7446:	601a      	str	r2, [r3, #0]
    7448:	680a      	ldr	r2, [r1, #0]
    744a:	9202      	str	r2, [sp, #8]
    744c:	9a02      	ldr	r2, [sp, #8]
    744e:	07d2      	lsls	r2, r2, #31
    7450:	d5fa      	bpl.n	7448 <PkaAddAff+0x24>
    7452:	4a2e      	ldr	r2, [pc, #184]	; (750c <PkaAddAff+0xe8>)
    7454:	601a      	str	r2, [r3, #0]
    7456:	680a      	ldr	r2, [r1, #0]
    7458:	9203      	str	r2, [sp, #12]
    745a:	9a03      	ldr	r2, [sp, #12]
    745c:	07d0      	lsls	r0, r2, #31
    745e:	d5fa      	bpl.n	7456 <PkaAddAff+0x32>
    7460:	4a2b      	ldr	r2, [pc, #172]	; (7510 <PkaAddAff+0xec>)
    7462:	601a      	str	r2, [r3, #0]
    7464:	680a      	ldr	r2, [r1, #0]
    7466:	9204      	str	r2, [sp, #16]
    7468:	9a04      	ldr	r2, [sp, #16]
    746a:	07d2      	lsls	r2, r2, #31
    746c:	d5fa      	bpl.n	7464 <PkaAddAff+0x40>
    746e:	4a29      	ldr	r2, [pc, #164]	; (7514 <PkaAddAff+0xf0>)
    7470:	601a      	str	r2, [r3, #0]
    7472:	680a      	ldr	r2, [r1, #0]
    7474:	9205      	str	r2, [sp, #20]
    7476:	9a05      	ldr	r2, [sp, #20]
    7478:	07d0      	lsls	r0, r2, #31
    747a:	d5fa      	bpl.n	7472 <PkaAddAff+0x4e>
    747c:	4a26      	ldr	r2, [pc, #152]	; (7518 <PkaAddAff+0xf4>)
    747e:	601a      	str	r2, [r3, #0]
    7480:	680a      	ldr	r2, [r1, #0]
    7482:	9206      	str	r2, [sp, #24]
    7484:	9a06      	ldr	r2, [sp, #24]
    7486:	07d2      	lsls	r2, r2, #31
    7488:	d5fa      	bpl.n	7480 <PkaAddAff+0x5c>
    748a:	4a24      	ldr	r2, [pc, #144]	; (751c <PkaAddAff+0xf8>)
    748c:	601a      	str	r2, [r3, #0]
    748e:	680a      	ldr	r2, [r1, #0]
    7490:	9207      	str	r2, [sp, #28]
    7492:	9a07      	ldr	r2, [sp, #28]
    7494:	07d0      	lsls	r0, r2, #31
    7496:	d5fa      	bpl.n	748e <PkaAddAff+0x6a>
    7498:	4a21      	ldr	r2, [pc, #132]	; (7520 <PkaAddAff+0xfc>)
    749a:	601a      	str	r2, [r3, #0]
    749c:	680a      	ldr	r2, [r1, #0]
    749e:	9208      	str	r2, [sp, #32]
    74a0:	9a08      	ldr	r2, [sp, #32]
    74a2:	07d2      	lsls	r2, r2, #31
    74a4:	d5fa      	bpl.n	749c <PkaAddAff+0x78>
    74a6:	4a1f      	ldr	r2, [pc, #124]	; (7524 <PkaAddAff+0x100>)
    74a8:	601a      	str	r2, [r3, #0]
    74aa:	680a      	ldr	r2, [r1, #0]
    74ac:	9209      	str	r2, [sp, #36]	; 0x24
    74ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
    74b0:	07d0      	lsls	r0, r2, #31
    74b2:	d5fa      	bpl.n	74aa <PkaAddAff+0x86>
    74b4:	4a1c      	ldr	r2, [pc, #112]	; (7528 <PkaAddAff+0x104>)
    74b6:	601a      	str	r2, [r3, #0]
    74b8:	680a      	ldr	r2, [r1, #0]
    74ba:	920a      	str	r2, [sp, #40]	; 0x28
    74bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    74be:	07d2      	lsls	r2, r2, #31
    74c0:	d5fa      	bpl.n	74b8 <PkaAddAff+0x94>
    74c2:	4a1a      	ldr	r2, [pc, #104]	; (752c <PkaAddAff+0x108>)
    74c4:	601a      	str	r2, [r3, #0]
    74c6:	6808      	ldr	r0, [r1, #0]
    74c8:	900b      	str	r0, [sp, #44]	; 0x2c
    74ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
    74cc:	07c0      	lsls	r0, r0, #31
    74ce:	d5fa      	bpl.n	74c6 <PkaAddAff+0xa2>
    74d0:	601a      	str	r2, [r3, #0]
    74d2:	680a      	ldr	r2, [r1, #0]
    74d4:	920c      	str	r2, [sp, #48]	; 0x30
    74d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    74d8:	07d0      	lsls	r0, r2, #31
    74da:	d5fa      	bpl.n	74d2 <PkaAddAff+0xae>
    74dc:	4a14      	ldr	r2, [pc, #80]	; (7530 <PkaAddAff+0x10c>)
    74de:	601a      	str	r2, [r3, #0]
    74e0:	680a      	ldr	r2, [r1, #0]
    74e2:	920d      	str	r2, [sp, #52]	; 0x34
    74e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    74e6:	07d2      	lsls	r2, r2, #31
    74e8:	d5fa      	bpl.n	74e0 <PkaAddAff+0xbc>
    74ea:	4a12      	ldr	r2, [pc, #72]	; (7534 <PkaAddAff+0x110>)
    74ec:	210e      	movs	r1, #14
    74ee:	601a      	str	r2, [r3, #0]
    74f0:	2000      	movs	r0, #0
    74f2:	230d      	movs	r3, #13
    74f4:	220f      	movs	r2, #15
    74f6:	b00e      	add	sp, #56	; 0x38
    74f8:	f7ff bf3c 	b.w	7374 <PkaJcb2Afn>
    74fc:	508410b0 	.word	0x508410b0
    7500:	50841080 	.word	0x50841080
    7504:	29014380 	.word	0x29014380
    7508:	21396340 	.word	0x21396340
    750c:	29017080 	.word	0x29017080
    7510:	21542080 	.word	0x21542080
    7514:	9034d100 	.word	0x9034d100
    7518:	903440c0 	.word	0x903440c0
    751c:	292030c0 	.word	0x292030c0
    7520:	900d53c0 	.word	0x900d53c0
    7524:	90384100 	.word	0x90384100
    7528:	c8082383 	.word	0xc8082383
    752c:	2110e380 	.word	0x2110e380
    7530:	21384100 	.word	0x21384100
    7534:	c80843cf 	.word	0xc80843cf

00007538 <PkaSum2ScalarMullt>:
    7538:	2301      	movs	r3, #1
    753a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    753e:	b092      	sub	sp, #72	; 0x48
    7540:	e9cd 3303 	strd	r3, r3, [sp, #12]
    7544:	4b62      	ldr	r3, [pc, #392]	; (76d0 <PkaSum2ScalarMullt+0x198>)
    7546:	461d      	mov	r5, r3
    7548:	681a      	ldr	r2, [r3, #0]
    754a:	9205      	str	r2, [sp, #20]
    754c:	9a05      	ldr	r2, [sp, #20]
    754e:	07d2      	lsls	r2, r2, #31
    7550:	d5fa      	bpl.n	7548 <PkaSum2ScalarMullt+0x10>
    7552:	4b60      	ldr	r3, [pc, #384]	; (76d4 <PkaSum2ScalarMullt+0x19c>)
    7554:	4c60      	ldr	r4, [pc, #384]	; (76d8 <PkaSum2ScalarMullt+0x1a0>)
    7556:	6023      	str	r3, [r4, #0]
    7558:	4b60      	ldr	r3, [pc, #384]	; (76dc <PkaSum2ScalarMullt+0x1a4>)
    755a:	4619      	mov	r1, r3
    755c:	681a      	ldr	r2, [r3, #0]
    755e:	9206      	str	r2, [sp, #24]
    7560:	9a06      	ldr	r2, [sp, #24]
    7562:	07d7      	lsls	r7, r2, #31
    7564:	d5fa      	bpl.n	755c <PkaSum2ScalarMullt+0x24>
    7566:	4b5e      	ldr	r3, [pc, #376]	; (76e0 <PkaSum2ScalarMullt+0x1a8>)
    7568:	681a      	ldr	r2, [r3, #0]
    756a:	04d6      	lsls	r6, r2, #19
    756c:	f100 80a8 	bmi.w	76c0 <PkaSum2ScalarMullt+0x188>
    7570:	682a      	ldr	r2, [r5, #0]
    7572:	9207      	str	r2, [sp, #28]
    7574:	9a07      	ldr	r2, [sp, #28]
    7576:	07d0      	lsls	r0, r2, #31
    7578:	d5fa      	bpl.n	7570 <PkaSum2ScalarMullt+0x38>
    757a:	4a5a      	ldr	r2, [pc, #360]	; (76e4 <PkaSum2ScalarMullt+0x1ac>)
    757c:	6022      	str	r2, [r4, #0]
    757e:	680a      	ldr	r2, [r1, #0]
    7580:	9208      	str	r2, [sp, #32]
    7582:	9a08      	ldr	r2, [sp, #32]
    7584:	07d2      	lsls	r2, r2, #31
    7586:	d5fa      	bpl.n	757e <PkaSum2ScalarMullt+0x46>
    7588:	681e      	ldr	r6, [r3, #0]
    758a:	f3c6 3600 	ubfx	r6, r6, #12, #1
    758e:	2e00      	cmp	r6, #0
    7590:	f040 8098 	bne.w	76c4 <PkaSum2ScalarMullt+0x18c>
    7594:	2012      	movs	r0, #18
    7596:	f7ff f8f3 	bl	6780 <PkaGetRegEffectiveSizeInBits>
    759a:	4607      	mov	r7, r0
    759c:	2013      	movs	r0, #19
    759e:	f7ff f8ef 	bl	6780 <PkaGetRegEffectiveSizeInBits>
    75a2:	4287      	cmp	r7, r0
    75a4:	bf8c      	ite	hi
    75a6:	2012      	movhi	r0, #18
    75a8:	2013      	movls	r0, #19
    75aa:	f7ff f8e9 	bl	6780 <PkaGetRegEffectiveSizeInBits>
    75ae:	1e47      	subs	r7, r0, #1
    75b0:	f7ff ff38 	bl	7424 <PkaAddAff>
    75b4:	ab03      	add	r3, sp, #12
    75b6:	aa01      	add	r2, sp, #4
    75b8:	4639      	mov	r1, r7
    75ba:	2012      	movs	r0, #18
    75bc:	f7ff f926 	bl	680c <PkaGetNextMsBit>
    75c0:	ab04      	add	r3, sp, #16
    75c2:	4680      	mov	r8, r0
    75c4:	aa02      	add	r2, sp, #8
    75c6:	4639      	mov	r1, r7
    75c8:	2013      	movs	r0, #19
    75ca:	f7ff f91f 	bl	680c <PkaGetNextMsBit>
    75ce:	eb00 0048 	add.w	r0, r0, r8, lsl #1
    75d2:	2802      	cmp	r0, #2
    75d4:	d032      	beq.n	763c <PkaSum2ScalarMullt+0x104>
    75d6:	2803      	cmp	r0, #3
    75d8:	d03e      	beq.n	7658 <PkaSum2ScalarMullt+0x120>
    75da:	2801      	cmp	r0, #1
    75dc:	d174      	bne.n	76c8 <PkaSum2ScalarMullt+0x190>
    75de:	682b      	ldr	r3, [r5, #0]
    75e0:	9309      	str	r3, [sp, #36]	; 0x24
    75e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    75e4:	07db      	lsls	r3, r3, #31
    75e6:	d5fa      	bpl.n	75de <PkaSum2ScalarMullt+0xa6>
    75e8:	4b3f      	ldr	r3, [pc, #252]	; (76e8 <PkaSum2ScalarMullt+0x1b0>)
    75ea:	6023      	str	r3, [r4, #0]
    75ec:	682b      	ldr	r3, [r5, #0]
    75ee:	930a      	str	r3, [sp, #40]	; 0x28
    75f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    75f2:	07d8      	lsls	r0, r3, #31
    75f4:	d5fa      	bpl.n	75ec <PkaSum2ScalarMullt+0xb4>
    75f6:	4b3d      	ldr	r3, [pc, #244]	; (76ec <PkaSum2ScalarMullt+0x1b4>)
    75f8:	6023      	str	r3, [r4, #0]
    75fa:	682b      	ldr	r3, [r5, #0]
    75fc:	930f      	str	r3, [sp, #60]	; 0x3c
    75fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7600:	07d9      	lsls	r1, r3, #31
    7602:	d5fa      	bpl.n	75fa <PkaSum2ScalarMullt+0xc2>
    7604:	4b3a      	ldr	r3, [pc, #232]	; (76f0 <PkaSum2ScalarMullt+0x1b8>)
    7606:	6023      	str	r3, [r4, #0]
    7608:	682b      	ldr	r3, [r5, #0]
    760a:	9310      	str	r3, [sp, #64]	; 0x40
    760c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    760e:	07da      	lsls	r2, r3, #31
    7610:	d5fa      	bpl.n	7608 <PkaSum2ScalarMullt+0xd0>
    7612:	4b38      	ldr	r3, [pc, #224]	; (76f4 <PkaSum2ScalarMullt+0x1bc>)
    7614:	6023      	str	r3, [r4, #0]
    7616:	682b      	ldr	r3, [r5, #0]
    7618:	9311      	str	r3, [sp, #68]	; 0x44
    761a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    761c:	07db      	lsls	r3, r3, #31
    761e:	d5fa      	bpl.n	7616 <PkaSum2ScalarMullt+0xde>
    7620:	4b35      	ldr	r3, [pc, #212]	; (76f8 <PkaSum2ScalarMullt+0x1c0>)
    7622:	6023      	str	r3, [r4, #0]
    7624:	3f01      	subs	r7, #1
    7626:	d525      	bpl.n	7674 <PkaSum2ScalarMullt+0x13c>
    7628:	2310      	movs	r3, #16
    762a:	2219      	movs	r2, #25
    762c:	2118      	movs	r1, #24
    762e:	2000      	movs	r0, #0
    7630:	f7ff fea0 	bl	7374 <PkaJcb2Afn>
    7634:	4630      	mov	r0, r6
    7636:	b012      	add	sp, #72	; 0x48
    7638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    763c:	682b      	ldr	r3, [r5, #0]
    763e:	930b      	str	r3, [sp, #44]	; 0x2c
    7640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7642:	07d9      	lsls	r1, r3, #31
    7644:	d5fa      	bpl.n	763c <PkaSum2ScalarMullt+0x104>
    7646:	4b2d      	ldr	r3, [pc, #180]	; (76fc <PkaSum2ScalarMullt+0x1c4>)
    7648:	6023      	str	r3, [r4, #0]
    764a:	682b      	ldr	r3, [r5, #0]
    764c:	930c      	str	r3, [sp, #48]	; 0x30
    764e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7650:	07da      	lsls	r2, r3, #31
    7652:	d5fa      	bpl.n	764a <PkaSum2ScalarMullt+0x112>
    7654:	4b2a      	ldr	r3, [pc, #168]	; (7700 <PkaSum2ScalarMullt+0x1c8>)
    7656:	e7cf      	b.n	75f8 <PkaSum2ScalarMullt+0xc0>
    7658:	682b      	ldr	r3, [r5, #0]
    765a:	930d      	str	r3, [sp, #52]	; 0x34
    765c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    765e:	07db      	lsls	r3, r3, #31
    7660:	d5fa      	bpl.n	7658 <PkaSum2ScalarMullt+0x120>
    7662:	4b28      	ldr	r3, [pc, #160]	; (7704 <PkaSum2ScalarMullt+0x1cc>)
    7664:	6023      	str	r3, [r4, #0]
    7666:	682b      	ldr	r3, [r5, #0]
    7668:	930e      	str	r3, [sp, #56]	; 0x38
    766a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    766c:	07d8      	lsls	r0, r3, #31
    766e:	d5fa      	bpl.n	7666 <PkaSum2ScalarMullt+0x12e>
    7670:	4b25      	ldr	r3, [pc, #148]	; (7708 <PkaSum2ScalarMullt+0x1d0>)
    7672:	e7c1      	b.n	75f8 <PkaSum2ScalarMullt+0xc0>
    7674:	ab03      	add	r3, sp, #12
    7676:	aa01      	add	r2, sp, #4
    7678:	4639      	mov	r1, r7
    767a:	2012      	movs	r0, #18
    767c:	f7ff f8c6 	bl	680c <PkaGetNextMsBit>
    7680:	ab04      	add	r3, sp, #16
    7682:	4604      	mov	r4, r0
    7684:	aa02      	add	r2, sp, #8
    7686:	4639      	mov	r1, r7
    7688:	2013      	movs	r0, #19
    768a:	f7ff f8bf 	bl	680c <PkaGetNextMsBit>
    768e:	eb10 0444 	adds.w	r4, r0, r4, lsl #1
    7692:	d102      	bne.n	769a <PkaSum2ScalarMullt+0x162>
    7694:	f7ff fc12 	bl	6ebc <PkaDoubleMdf2Mdf>
    7698:	e7c4      	b.n	7624 <PkaSum2ScalarMullt+0xec>
    769a:	f7ff fce5 	bl	7068 <PkaDoubleMdf2Jcb>
    769e:	2c02      	cmp	r4, #2
    76a0:	d008      	beq.n	76b4 <PkaSum2ScalarMullt+0x17c>
    76a2:	2c03      	cmp	r4, #3
    76a4:	d009      	beq.n	76ba <PkaSum2ScalarMullt+0x182>
    76a6:	2c01      	cmp	r4, #1
    76a8:	d110      	bne.n	76cc <PkaSum2ScalarMullt+0x194>
    76aa:	2117      	movs	r1, #23
    76ac:	2016      	movs	r0, #22
    76ae:	f7ff fd97 	bl	71e0 <PkaAddJcbAfn2Mdf>
    76b2:	e7b7      	b.n	7624 <PkaSum2ScalarMullt+0xec>
    76b4:	2115      	movs	r1, #21
    76b6:	2014      	movs	r0, #20
    76b8:	e7f9      	b.n	76ae <PkaSum2ScalarMullt+0x176>
    76ba:	210f      	movs	r1, #15
    76bc:	200e      	movs	r0, #14
    76be:	e7f6      	b.n	76ae <PkaSum2ScalarMullt+0x176>
    76c0:	4e12      	ldr	r6, [pc, #72]	; (770c <PkaSum2ScalarMullt+0x1d4>)
    76c2:	e7b7      	b.n	7634 <PkaSum2ScalarMullt+0xfc>
    76c4:	4e12      	ldr	r6, [pc, #72]	; (7710 <PkaSum2ScalarMullt+0x1d8>)
    76c6:	e7b5      	b.n	7634 <PkaSum2ScalarMullt+0xfc>
    76c8:	4e12      	ldr	r6, [pc, #72]	; (7714 <PkaSum2ScalarMullt+0x1dc>)
    76ca:	e7b3      	b.n	7634 <PkaSum2ScalarMullt+0xfc>
    76cc:	4e12      	ldr	r6, [pc, #72]	; (7718 <PkaSum2ScalarMullt+0x1e0>)
    76ce:	e7b1      	b.n	7634 <PkaSum2ScalarMullt+0xfc>
    76d0:	508410b0 	.word	0x508410b0
    76d4:	514a0800 	.word	0x514a0800
    76d8:	50841080 	.word	0x50841080
    76dc:	508410b4 	.word	0x508410b4
    76e0:	50841088 	.word	0x50841088
    76e4:	514e0800 	.word	0x514e0800
    76e8:	495a0600 	.word	0x495a0600
    76ec:	495e0640 	.word	0x495e0640
    76f0:	41420400 	.word	0x41420400
    76f4:	49421400 	.word	0x49421400
    76f8:	492e0440 	.word	0x492e0440
    76fc:	49520600 	.word	0x49520600
    7700:	49560640 	.word	0x49560640
    7704:	493a0600 	.word	0x493a0600
    7708:	493e0640 	.word	0x493e0640
    770c:	00f10806 	.word	0x00f10806
    7710:	00f10807 	.word	0x00f10807
    7714:	00f10804 	.word	0x00f10804
    7718:	00f10805 	.word	0x00f10805

0000771c <SaSi_HalClearInterruptBit>:
    771c:	4b01      	ldr	r3, [pc, #4]	; (7724 <SaSi_HalClearInterruptBit+0x8>)
    771e:	6018      	str	r0, [r3, #0]
    7720:	4770      	bx	lr
    7722:	bf00      	nop
    7724:	50841a08 	.word	0x50841a08

00007728 <SaSi_HalMaskInterrupt>:
    7728:	4b01      	ldr	r3, [pc, #4]	; (7730 <SaSi_HalMaskInterrupt+0x8>)
    772a:	6018      	str	r0, [r3, #0]
    772c:	4770      	bx	lr
    772e:	bf00      	nop
    7730:	50841a04 	.word	0x50841a04

00007734 <SaSi_HalWaitInterrupt>:
    7734:	4a03      	ldr	r2, [pc, #12]	; (7744 <SaSi_HalWaitInterrupt+0x10>)
    7736:	6813      	ldr	r3, [r2, #0]
    7738:	4218      	tst	r0, r3
    773a:	d0fc      	beq.n	7736 <SaSi_HalWaitInterrupt+0x2>
    773c:	4a02      	ldr	r2, [pc, #8]	; (7748 <SaSi_HalWaitInterrupt+0x14>)
    773e:	6010      	str	r0, [r2, #0]
    7740:	4618      	mov	r0, r3
    7742:	4770      	bx	lr
    7744:	50841a00 	.word	0x50841a00
    7748:	50841a08 	.word	0x50841a08

0000774c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    774c:	4770      	bx	lr

0000774e <gpio_pin_get>:
{
    774e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7750:	460c      	mov	r4, r1
	const struct gpio_driver_data *const data =
    7752:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
    7754:	6883      	ldr	r3, [r0, #8]
    7756:	a901      	add	r1, sp, #4
    7758:	685b      	ldr	r3, [r3, #4]
    775a:	4798      	blx	r3
	if (ret == 0) {
    775c:	b948      	cbnz	r0, 7772 <gpio_pin_get+0x24>
		*value ^= data->invert;
    775e:	9b01      	ldr	r3, [sp, #4]
    7760:	682a      	ldr	r2, [r5, #0]
    7762:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    7764:	2301      	movs	r3, #1
    7766:	fa03 f104 	lsl.w	r1, r3, r4
    776a:	420a      	tst	r2, r1
    776c:	bf14      	ite	ne
    776e:	4618      	movne	r0, r3
    7770:	2000      	moveq	r0, #0
}
    7772:	b003      	add	sp, #12
    7774:	bd30      	pop	{r4, r5, pc}

00007776 <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    7776:	2301      	movs	r3, #1
    7778:	fa03 f101 	lsl.w	r1, r3, r1
    777c:	6903      	ldr	r3, [r0, #16]
    777e:	681b      	ldr	r3, [r3, #0]
    7780:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    7782:	bf18      	it	ne
    7784:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    7788:	b112      	cbz	r2, 7790 <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
    778a:	6883      	ldr	r3, [r0, #8]
    778c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    778e:	4718      	bx	r3
    7790:	6883      	ldr	r3, [r0, #8]
    7792:	691b      	ldr	r3, [r3, #16]
    7794:	e7fb      	b.n	778e <gpio_pin_set.isra.0+0x18>

00007796 <gpio_pin_configure_dt.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
    7796:	4603      	mov	r3, r0
    7798:	b470      	push	{r4, r5, r6}
    779a:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
    779c:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    779e:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    77a0:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
    77a2:	4322      	orrs	r2, r4
		data->invert |= (gpio_port_pins_t)BIT(pin);
    77a4:	2401      	movs	r4, #1
	struct gpio_driver_data *data =
    77a6:	6905      	ldr	r5, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    77a8:	408c      	lsls	r4, r1
    77aa:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    77ac:	f012 0f01 	tst.w	r2, #1
	const struct gpio_driver_api *api =
    77b0:	6886      	ldr	r6, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    77b2:	bf14      	ite	ne
    77b4:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    77b6:	43a3      	biceq	r3, r4
    77b8:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
    77ba:	6833      	ldr	r3, [r6, #0]
}
    77bc:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
    77be:	4718      	bx	r3

000077c0 <flash_area_id_from_multi_image_slot>:
    switch (slot) {
    77c0:	b129      	cbz	r1, 77ce <flash_area_id_from_multi_image_slot+0xe>
    return -EINVAL; /* flash_area_open will fail on that */
    77c2:	2901      	cmp	r1, #1
    77c4:	bf0c      	ite	eq
    77c6:	2009      	moveq	r0, #9
    77c8:	f06f 0015 	mvnne.w	r0, #21
    77cc:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    77ce:	2003      	movs	r0, #3
}
    77d0:	4770      	bx	lr

000077d2 <flash_area_get_device_id>:

uint8_t flash_area_get_device_id(const struct flash_area *fa)
{
	(void)fa;
	return FLASH_DEVICE_ID;
}
    77d2:	2000      	movs	r0, #0
    77d4:	4770      	bx	lr

000077d6 <os_heap_init>:
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
}
#else
void os_heap_init(void)
{
}
    77d6:	4770      	bx	lr

000077d8 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    77d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    77dc:	460e      	mov	r6, r1
    77de:	4617      	mov	r7, r2
    77e0:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    77e2:	4604      	mov	r4, r0
    77e4:	b928      	cbnz	r0, 77f2 <bootutil_tlv_iter_begin+0x1a>
        return -1;
    77e6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    77ea:	4640      	mov	r0, r8
    77ec:	b003      	add	sp, #12
    77ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    77f2:	2900      	cmp	r1, #0
    77f4:	d0f7      	beq.n	77e6 <bootutil_tlv_iter_begin+0xe>
    77f6:	2a00      	cmp	r2, #0
    77f8:	d0f5      	beq.n	77e6 <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    77fa:	68cb      	ldr	r3, [r1, #12]
    77fc:	890d      	ldrh	r5, [r1, #8]
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    77fe:	4638      	mov	r0, r7
    off_ = BOOT_TLV_OFF(hdr);
    7800:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    7802:	2304      	movs	r3, #4
    7804:	4629      	mov	r1, r5
    7806:	eb0d 0203 	add.w	r2, sp, r3
    780a:	f000 fc93 	bl	8134 <flash_area_read>
    780e:	4680      	mov	r8, r0
    7810:	2800      	cmp	r0, #0
    7812:	d1e8      	bne.n	77e6 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    7814:	f646 1208 	movw	r2, #26888	; 0x6908
    7818:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    781c:	8973      	ldrh	r3, [r6, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    781e:	4291      	cmp	r1, r2
    7820:	d125      	bne.n	786e <bootutil_tlv_iter_begin+0x96>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    7822:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    7826:	4299      	cmp	r1, r3
    7828:	d1dd      	bne.n	77e6 <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    782a:	2304      	movs	r3, #4
    782c:	4638      	mov	r0, r7
    782e:	eb0d 0203 	add.w	r2, sp, r3
    7832:	4429      	add	r1, r5
    7834:	f000 fc7e 	bl	8134 <flash_area_read>
    7838:	2800      	cmp	r0, #0
    783a:	d1d4      	bne.n	77e6 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    783c:	f646 1307 	movw	r3, #26887	; 0x6907
    7840:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7844:	429a      	cmp	r2, r3
    7846:	d1ce      	bne.n	77e6 <bootutil_tlv_iter_begin+0xe>
    it->fap = fap;
    7848:	e9c4 6700 	strd	r6, r7, [r4]
    it->prot = prot;
    784c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    it->type = type;
    7850:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->prot = prot;
    7854:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    7856:	8973      	ldrh	r3, [r6, #10]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    7858:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    785c:	442b      	add	r3, r5
    785e:	60e3      	str	r3, [r4, #12]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    7860:	8973      	ldrh	r3, [r6, #10]
    7862:	4413      	add	r3, r2
    7864:	442b      	add	r3, r5
    it->tlv_off = off_ + sizeof(info);
    7866:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    7868:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    786a:	6125      	str	r5, [r4, #16]
    return 0;
    786c:	e7bd      	b.n	77ea <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    786e:	2b00      	cmp	r3, #0
    7870:	d0e4      	beq.n	783c <bootutil_tlv_iter_begin+0x64>
    7872:	e7b8      	b.n	77e6 <bootutil_tlv_iter_begin+0xe>

00007874 <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    7874:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7878:	460e      	mov	r6, r1
    787a:	4617      	mov	r7, r2
    787c:	461d      	mov	r5, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    787e:	4604      	mov	r4, r0
    7880:	b920      	cbnz	r0, 788c <bootutil_tlv_iter_next+0x18>
        return -1;
    7882:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    7886:	b002      	add	sp, #8
    7888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    788c:	6803      	ldr	r3, [r0, #0]
    788e:	2b00      	cmp	r3, #0
    7890:	d0f7      	beq.n	7882 <bootutil_tlv_iter_next+0xe>
    7892:	6843      	ldr	r3, [r0, #4]
    7894:	2b00      	cmp	r3, #0
    7896:	d0f4      	beq.n	7882 <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    7898:	f64f 78ff 	movw	r8, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    789c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    78a0:	429a      	cmp	r2, r3
    78a2:	d216      	bcs.n	78d2 <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    78a4:	6823      	ldr	r3, [r4, #0]
    78a6:	895b      	ldrh	r3, [r3, #10]
    78a8:	b123      	cbz	r3, 78b4 <bootutil_tlv_iter_next+0x40>
    78aa:	68e3      	ldr	r3, [r4, #12]
    78ac:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    78ae:	bf04      	itt	eq
    78b0:	3304      	addeq	r3, #4
    78b2:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    78b4:	2304      	movs	r3, #4
    78b6:	6921      	ldr	r1, [r4, #16]
    78b8:	6860      	ldr	r0, [r4, #4]
    78ba:	eb0d 0203 	add.w	r2, sp, r3
    78be:	f000 fc39 	bl	8134 <flash_area_read>
        if (rc) {
    78c2:	2800      	cmp	r0, #0
    78c4:	d1dd      	bne.n	7882 <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    78c6:	7aa3      	ldrb	r3, [r4, #10]
    78c8:	b12b      	cbz	r3, 78d6 <bootutil_tlv_iter_next+0x62>
    78ca:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
    78ce:	429a      	cmp	r2, r3
    78d0:	d301      	bcc.n	78d6 <bootutil_tlv_iter_next+0x62>
            return 1;
    78d2:	2001      	movs	r0, #1
    78d4:	e7d7      	b.n	7886 <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    78d6:	8923      	ldrh	r3, [r4, #8]
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    78d8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    78dc:	4543      	cmp	r3, r8
    78de:	f101 0204 	add.w	r2, r1, #4
    78e2:	d003      	beq.n	78ec <bootutil_tlv_iter_next+0x78>
    78e4:	f8bd c004 	ldrh.w	ip, [sp, #4]
    78e8:	459c      	cmp	ip, r3
    78ea:	d10b      	bne.n	7904 <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    78ec:	b115      	cbz	r5, 78f4 <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    78ee:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    78f2:	802b      	strh	r3, [r5, #0]
            *off = it->tlv_off + sizeof(tlv);
    78f4:	6923      	ldr	r3, [r4, #16]
    78f6:	3304      	adds	r3, #4
    78f8:	6033      	str	r3, [r6, #0]
            *len = tlv.it_len;
    78fa:	8039      	strh	r1, [r7, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    78fc:	6923      	ldr	r3, [r4, #16]
    78fe:	4413      	add	r3, r2
    7900:	6123      	str	r3, [r4, #16]
            return 0;
    7902:	e7c0      	b.n	7886 <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    7904:	6923      	ldr	r3, [r4, #16]
    7906:	4413      	add	r3, r2
    7908:	6123      	str	r3, [r4, #16]
    790a:	e7c7      	b.n	789c <bootutil_tlv_iter_next+0x28>

0000790c <bootutil_read_bigint>:
{
    790c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    790e:	460c      	mov	r4, r1
    7910:	4606      	mov	r6, r0
    7912:	4611      	mov	r1, r2
    if (mbedtls_asn1_get_tag(cp, end, &len, MBEDTLS_ASN1_INTEGER)) {
    7914:	2302      	movs	r3, #2
    7916:	4620      	mov	r0, r4
    7918:	aa01      	add	r2, sp, #4
    791a:	f000 fa3d 	bl	7d98 <mbedtls_asn1_get_tag>
    791e:	4605      	mov	r5, r0
    7920:	b9e8      	cbnz	r0, 795e <bootutil_read_bigint+0x52>
    if (len >= NUM_ECC_BYTES) {
    7922:	9a01      	ldr	r2, [sp, #4]
    7924:	2a1f      	cmp	r2, #31
    7926:	d90e      	bls.n	7946 <bootutil_read_bigint+0x3a>
        memcpy(i, *cp + len - NUM_ECC_BYTES, NUM_ECC_BYTES);
    7928:	f1a2 0120 	sub.w	r1, r2, #32
    792c:	4630      	mov	r0, r6
    792e:	2220      	movs	r2, #32
    7930:	6823      	ldr	r3, [r4, #0]
    7932:	4419      	add	r1, r3
        memcpy(i + NUM_ECC_BYTES - len, *cp, len);
    7934:	f000 ff64 	bl	8800 <memcpy>
    *cp += len;
    7938:	6823      	ldr	r3, [r4, #0]
    793a:	9a01      	ldr	r2, [sp, #4]
    793c:	4413      	add	r3, r2
    793e:	6023      	str	r3, [r4, #0]
}
    7940:	4628      	mov	r0, r5
    7942:	b002      	add	sp, #8
    7944:	bd70      	pop	{r4, r5, r6, pc}
        memset(i, 0, NUM_ECC_BYTES - len);
    7946:	4601      	mov	r1, r0
    7948:	f1c2 0220 	rsb	r2, r2, #32
    794c:	4630      	mov	r0, r6
    794e:	f000 ff62 	bl	8816 <memset>
        memcpy(i + NUM_ECC_BYTES - len, *cp, len);
    7952:	9a01      	ldr	r2, [sp, #4]
    7954:	6821      	ldr	r1, [r4, #0]
    7956:	f1c2 0020 	rsb	r0, r2, #32
    795a:	4430      	add	r0, r6
    795c:	e7ea      	b.n	7934 <bootutil_read_bigint+0x28>
        return -3;
    795e:	f06f 0502 	mvn.w	r5, #2
    7962:	e7ed      	b.n	7940 <bootutil_read_bigint+0x34>

00007964 <boot_fih_memequal>:
    return memcmp(s1, s2, n);
    7964:	f000 bf25 	b.w	87b2 <memcmp>

00007968 <boot_trailer_sz>:
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    7968:	f44f 7340 	mov.w	r3, #768	; 0x300
    796c:	4358      	muls	r0, r3
}
    796e:	3030      	adds	r0, #48	; 0x30
    7970:	4770      	bx	lr

00007972 <boot_status_entries>:
	return fa->fa_id;
    7972:	780b      	ldrb	r3, [r1, #0]
    if (flash_area_get_id(fap) == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    7974:	2b03      	cmp	r3, #3
    7976:	d006      	beq.n	7986 <boot_status_entries+0x14>
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    7978:	2b09      	cmp	r3, #9
    797a:	bf14      	ite	ne
    797c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    7980:	f44f 7040 	moveq.w	r0, #768	; 0x300
    7984:	4770      	bx	lr
    7986:	f44f 7040 	mov.w	r0, #768	; 0x300
}
    798a:	4770      	bx	lr

0000798c <boot_status_off>:
{
    798c:	b510      	push	{r4, lr}
    798e:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    7990:	f000 fc10 	bl	81b4 <flash_area_align>
}
    7994:	f44f 7240 	mov.w	r2, #768	; 0x300
    return flash_area_get_size(fap) - off_from_end;
    7998:	68a3      	ldr	r3, [r4, #8]
    799a:	3b30      	subs	r3, #48	; 0x30
}
    799c:	fb02 3010 	mls	r0, r2, r0, r3
    79a0:	bd10      	pop	{r4, pc}

000079a2 <boot_write_copy_done>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    79a2:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    79a4:	2201      	movs	r2, #1
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    79a6:	3918      	subs	r1, #24
    79a8:	f021 0107 	bic.w	r1, r1, #7
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    79ac:	3908      	subs	r1, #8
    79ae:	f001 baf6 	b.w	8f9e <boot_write_trailer_flag>

000079b2 <boot_write_swap_size>:
{
    79b2:	b513      	push	{r0, r1, r4, lr}
    79b4:	4604      	mov	r4, r0
    79b6:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    79b8:	f001 fa82 	bl	8ec0 <boot_swap_info_off>
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    79bc:	2304      	movs	r3, #4
    79be:	f1a0 0108 	sub.w	r1, r0, #8
    79c2:	eb0d 0203 	add.w	r2, sp, r3
    79c6:	4620      	mov	r0, r4
    79c8:	f001 fabd 	bl	8f46 <boot_write_trailer>
}
    79cc:	b002      	add	sp, #8
    79ce:	bd10      	pop	{r4, pc}

000079d0 <boot_read_image_headers>:
{
    79d0:	b570      	push	{r4, r5, r6, lr}
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    79d2:	4613      	mov	r3, r2
{
    79d4:	460e      	mov	r6, r1
    79d6:	4615      	mov	r5, r2
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    79d8:	2100      	movs	r1, #0
    79da:	4602      	mov	r2, r0
{
    79dc:	4604      	mov	r4, r0
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    79de:	f7f9 fa41 	bl	e64 <boot_read_image_header>
        if (rc != 0) {
    79e2:	b950      	cbnz	r0, 79fa <boot_read_image_headers+0x2a>
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    79e4:	462b      	mov	r3, r5
    79e6:	2101      	movs	r1, #1
    79e8:	4620      	mov	r0, r4
    79ea:	f104 022c 	add.w	r2, r4, #44	; 0x2c
    79ee:	f7f9 fa39 	bl	e64 <boot_read_image_header>
        if (rc != 0) {
    79f2:	b110      	cbz	r0, 79fa <boot_read_image_headers+0x2a>
                return 0;
    79f4:	2e00      	cmp	r6, #0
    79f6:	bf08      	it	eq
    79f8:	2000      	moveq	r0, #0
}
    79fa:	bd70      	pop	{r4, r5, r6, pc}

000079fc <boot_read_image_size.constprop.0.isra.0>:
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    79fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    79fe:	4604      	mov	r4, r0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    7a00:	2000      	movs	r0, #0
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    7a02:	460d      	mov	r5, r1
    7a04:	4616      	mov	r6, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    7a06:	f7ff fedb 	bl	77c0 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    7a0a:	4669      	mov	r1, sp
    7a0c:	b2c0      	uxtb	r0, r0
    7a0e:	f7fa f9fd 	bl	1e0c <flash_area_open>
    if (rc != 0) {
    7a12:	bb30      	cbnz	r0, 7a62 <boot_read_image_size.constprop.0.isra.0+0x66>
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    7a14:	232c      	movs	r3, #44	; 0x2c
    7a16:	fb03 4405 	mla	r4, r3, r5, r4
    7a1a:	68e3      	ldr	r3, [r4, #12]
    7a1c:	8925      	ldrh	r5, [r4, #8]
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    7a1e:	9800      	ldr	r0, [sp, #0]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    7a20:	441d      	add	r5, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    7a22:	2304      	movs	r3, #4
    7a24:	4629      	mov	r1, r5
    7a26:	eb0d 0203 	add.w	r2, sp, r3
    7a2a:	f000 fb83 	bl	8134 <flash_area_read>
    7a2e:	b9c0      	cbnz	r0, 7a62 <boot_read_image_size.constprop.0.isra.0+0x66>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    7a30:	f646 1308 	movw	r3, #26888	; 0x6908
    7a34:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    7a38:	8964      	ldrh	r4, [r4, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    7a3a:	429a      	cmp	r2, r3
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    7a3c:	9800      	ldr	r0, [sp, #0]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    7a3e:	d115      	bne.n	7a6c <boot_read_image_size.constprop.0.isra.0+0x70>
        if (protect_tlv_size != info.it_tlv_tot) {
    7a40:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7a44:	429c      	cmp	r4, r3
    7a46:	d10c      	bne.n	7a62 <boot_read_image_size.constprop.0.isra.0+0x66>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    7a48:	2304      	movs	r3, #4
    7a4a:	1961      	adds	r1, r4, r5
    7a4c:	eb0d 0203 	add.w	r2, sp, r3
    7a50:	f000 fb70 	bl	8134 <flash_area_read>
    7a54:	b928      	cbnz	r0, 7a62 <boot_read_image_size.constprop.0.isra.0+0x66>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    7a56:	f646 1307 	movw	r3, #26887	; 0x6907
    7a5a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7a5e:	429a      	cmp	r2, r3
    7a60:	d007      	beq.n	7a72 <boot_read_image_size.constprop.0.isra.0+0x76>
    flash_area_close(fap);
    7a62:	9800      	ldr	r0, [sp, #0]
    7a64:	f000 fb65 	bl	8132 <flash_area_close>
}
    7a68:	b002      	add	sp, #8
    7a6a:	bd70      	pop	{r4, r5, r6, pc}
    } else if (protect_tlv_size != 0) {
    7a6c:	2c00      	cmp	r4, #0
    7a6e:	d0f2      	beq.n	7a56 <boot_read_image_size.constprop.0.isra.0+0x5a>
    7a70:	e7f7      	b.n	7a62 <boot_read_image_size.constprop.0.isra.0+0x66>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    7a72:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    7a76:	4421      	add	r1, r4
    7a78:	4429      	add	r1, r5
    7a7a:	6031      	str	r1, [r6, #0]
    rc = 0;
    7a7c:	e7f1      	b.n	7a62 <boot_read_image_size.constprop.0.isra.0+0x66>

00007a7e <boot_read_sectors>:
{
    7a7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    7a80:	f44f 7580 	mov.w	r5, #256	; 0x100
{
    7a84:	4604      	mov	r4, r0
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    7a86:	6a42      	ldr	r2, [r0, #36]	; 0x24
    7a88:	a901      	add	r1, sp, #4
    7a8a:	2003      	movs	r0, #3
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    7a8c:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    7a8e:	f7fa f9e5 	bl	1e5c <flash_area_get_sectors>
    if (rc != 0) {
    7a92:	b958      	cbnz	r0, 7aac <boot_read_sectors+0x2e>
    *out_num_sectors = num_sectors;
    7a94:	9b01      	ldr	r3, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    7a96:	2009      	movs	r0, #9
    7a98:	6d22      	ldr	r2, [r4, #80]	; 0x50
    *out_num_sectors = num_sectors;
    7a9a:	62a3      	str	r3, [r4, #40]	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    7a9c:	a901      	add	r1, sp, #4
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    7a9e:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    7aa0:	f7fa f9dc 	bl	1e5c <flash_area_get_sectors>
    if (rc != 0) {
    7aa4:	4605      	mov	r5, r0
    7aa6:	b128      	cbz	r0, 7ab4 <boot_read_sectors+0x36>
        return BOOT_EFLASH_SEC;
    7aa8:	2509      	movs	r5, #9
    7aaa:	e000      	b.n	7aae <boot_read_sectors+0x30>
        return BOOT_EFLASH;
    7aac:	2501      	movs	r5, #1
}
    7aae:	4628      	mov	r0, r5
    7ab0:	b003      	add	sp, #12
    7ab2:	bd30      	pop	{r4, r5, pc}
    *out_num_sectors = num_sectors;
    7ab4:	9b01      	ldr	r3, [sp, #4]
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    7ab6:	6a20      	ldr	r0, [r4, #32]
    *out_num_sectors = num_sectors;
    7ab8:	6563      	str	r3, [r4, #84]	; 0x54
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    7aba:	f000 fb7b 	bl	81b4 <flash_area_align>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    7abe:	65e0      	str	r0, [r4, #92]	; 0x5c
    return 0;
    7ac0:	e7f5      	b.n	7aae <boot_read_sectors+0x30>

00007ac2 <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    7ac2:	2301      	movs	r3, #1
    7ac4:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    7ac6:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    7aca:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    7acc:	2300      	movs	r3, #0
    bs->source = 0;
    7ace:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    7ad2:	4770      	bx	lr

00007ad4 <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    7ad4:	7943      	ldrb	r3, [r0, #5]
    7ad6:	2b01      	cmp	r3, #1
    7ad8:	d107      	bne.n	7aea <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    7ada:	6803      	ldr	r3, [r0, #0]
    7adc:	2b01      	cmp	r3, #1
    7ade:	d104      	bne.n	7aea <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    7ae0:	7900      	ldrb	r0, [r0, #4]
    7ae2:	1e43      	subs	r3, r0, #1
    7ae4:	4258      	negs	r0, r3
    7ae6:	4158      	adcs	r0, r3
    7ae8:	4770      	bx	lr
    7aea:	2000      	movs	r0, #0
}
    7aec:	4770      	bx	lr

00007aee <boot_write_status>:
{
    7aee:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7af0:	4606      	mov	r6, r0
    7af2:	460d      	mov	r5, r1
    rc = flash_area_open(area_id, &fap);
    7af4:	2003      	movs	r0, #3
    7af6:	a901      	add	r1, sp, #4
    7af8:	f7fa f988 	bl	1e0c <flash_area_open>
    if (rc != 0) {
    7afc:	bb38      	cbnz	r0, 7b4e <boot_write_status+0x60>
    off = boot_status_off(fap) +
    7afe:	9801      	ldr	r0, [sp, #4]
    7b00:	f7ff ff44 	bl	798c <boot_status_off>
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    7b04:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    off = boot_status_off(fap) +
    7b06:	4604      	mov	r4, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    7b08:	4628      	mov	r0, r5
    7b0a:	f000 f8e6 	bl	7cda <boot_status_internal_off>
    off = boot_status_off(fap) +
    7b0e:	4404      	add	r4, r0
    align = flash_area_align(fap);
    7b10:	9801      	ldr	r0, [sp, #4]
    7b12:	f000 fb4f 	bl	81b4 <flash_area_align>
    7b16:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    7b18:	9801      	ldr	r0, [sp, #4]
    7b1a:	f000 fb52 	bl	81c2 <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    7b1e:	2208      	movs	r2, #8
    erased_val = flash_area_erased_val(fap);
    7b20:	4601      	mov	r1, r0
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    7b22:	eb0d 0002 	add.w	r0, sp, r2
    7b26:	f000 fe76 	bl	8816 <memset>
    buf[0] = bs->state;
    7b2a:	792b      	ldrb	r3, [r5, #4]
    rc = flash_area_write(fap, off, buf, align);
    7b2c:	4621      	mov	r1, r4
    buf[0] = bs->state;
    7b2e:	f88d 3008 	strb.w	r3, [sp, #8]
    rc = flash_area_write(fap, off, buf, align);
    7b32:	9801      	ldr	r0, [sp, #4]
    7b34:	4633      	mov	r3, r6
    7b36:	aa02      	add	r2, sp, #8
    7b38:	f000 fb11 	bl	815e <flash_area_write>
    if (rc != 0) {
    7b3c:	1e04      	subs	r4, r0, #0
    flash_area_close(fap);
    7b3e:	9801      	ldr	r0, [sp, #4]
    if (rc != 0) {
    7b40:	bf18      	it	ne
    7b42:	2401      	movne	r4, #1
    flash_area_close(fap);
    7b44:	f000 faf5 	bl	8132 <flash_area_close>
}
    7b48:	4620      	mov	r0, r4
    7b4a:	b004      	add	sp, #16
    7b4c:	bd70      	pop	{r4, r5, r6, pc}
        return BOOT_EFLASH;
    7b4e:	2401      	movs	r4, #1
    7b50:	e7fa      	b.n	7b48 <boot_write_status+0x5a>

00007b52 <boot_erase_region>:
    return flash_area_erase(fap, off, sz);
    7b52:	f000 bb19 	b.w	8188 <flash_area_erase>

00007b56 <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    7b56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7b5a:	460e      	mov	r6, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", flash_area_get_id(fap));

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    7b5c:	2100      	movs	r1, #0
{
    7b5e:	4607      	mov	r7, r0
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    7b60:	4608      	mov	r0, r1
    7b62:	f7ff fe2d 	bl	77c0 <flash_area_id_from_multi_image_slot>
    7b66:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    7b68:	2101      	movs	r1, #1
    7b6a:	2000      	movs	r0, #0
    7b6c:	f7ff fe28 	bl	77c0 <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (flash_area_get_id(fap) == fa_id_primary) {
    7b70:	7833      	ldrb	r3, [r6, #0]
    7b72:	429c      	cmp	r4, r3
    7b74:	d021      	beq.n	7bba <swap_erase_trailer_sectors+0x64>
        slot = BOOT_PRIMARY_SLOT;
    } else if (flash_area_get_id(fap) == fa_id_secondary) {
    7b76:	4298      	cmp	r0, r3
    7b78:	d121      	bne.n	7bbe <swap_erase_trailer_sectors+0x68>
        slot = BOOT_SECONDARY_SLOT;
    7b7a:	2501      	movs	r5, #1
    return BOOT_IMG(state, slot).num_sectors;
    7b7c:	232c      	movs	r3, #44	; 0x2c
    7b7e:	fb03 7505 	mla	r5, r3, r5, r7
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    7b82:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    sector = boot_img_num_sectors(state, slot) - 1;
    7b84:	6aac      	ldr	r4, [r5, #40]	; 0x28
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    7b86:	f7ff feef 	bl	7968 <boot_trailer_sz>
    total_sz = 0;
    7b8a:	f04f 0800 	mov.w	r8, #0
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    7b8e:	4607      	mov	r7, r0
    sector = boot_img_num_sectors(state, slot) - 1;
    7b90:	3c01      	subs	r4, #1
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    7b92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    7b94:	4630      	mov	r0, r6
    7b96:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    7b9a:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
	return fs->fs_size;
    7b9e:	f8d2 9004 	ldr.w	r9, [r2, #4]
    7ba2:	681b      	ldr	r3, [r3, #0]
    7ba4:	464a      	mov	r2, r9
    7ba6:	1ac9      	subs	r1, r1, r3
        assert(rc == 0);

        sector--;
        total_sz += sz;
    7ba8:	44c8      	add	r8, r9
        rc = boot_erase_region(fap, off, sz);
    7baa:	f7ff ffd2 	bl	7b52 <boot_erase_region>
    } while (total_sz < trailer_sz);
    7bae:	45b8      	cmp	r8, r7
        sector--;
    7bb0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
    } while (total_sz < trailer_sz);
    7bb4:	d3ed      	bcc.n	7b92 <swap_erase_trailer_sectors+0x3c>

    return rc;
}
    7bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        slot = BOOT_PRIMARY_SLOT;
    7bba:	2500      	movs	r5, #0
    7bbc:	e7de      	b.n	7b7c <swap_erase_trailer_sectors+0x26>
        return BOOT_EFLASH;
    7bbe:	2001      	movs	r0, #1
    7bc0:	e7f9      	b.n	7bb6 <swap_erase_trailer_sectors+0x60>

00007bc2 <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    7bc2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7bc4:	4615      	mov	r5, r2
    7bc6:	460c      	mov	r4, r1

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", flash_area_get_id(fap));

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    7bc8:	2009      	movs	r0, #9
    7bca:	4669      	mov	r1, sp
    7bcc:	f001 f9fe 	bl	8fcc <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    7bd0:	79e9      	ldrb	r1, [r5, #7]
    7bd2:	2901      	cmp	r1, #1
    7bd4:	d003      	beq.n	7bde <swap_status_init+0x1c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    7bd6:	2200      	movs	r2, #0
    7bd8:	4620      	mov	r0, r4
    7bda:	f001 fa0b 	bl	8ff4 <boot_write_swap_info>
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    7bde:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7be2:	2b01      	cmp	r3, #1
    7be4:	d102      	bne.n	7bec <swap_status_init+0x2a>
        rc = boot_write_image_ok(fap);
    7be6:	4620      	mov	r0, r4
    7be8:	f001 f9e3 	bl	8fb2 <boot_write_image_ok>
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    7bec:	68a9      	ldr	r1, [r5, #8]
    7bee:	4620      	mov	r0, r4
    7bf0:	f7ff fedf 	bl	79b2 <boot_write_swap_size>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    7bf4:	4620      	mov	r0, r4
    7bf6:	f7fc fc43 	bl	4480 <boot_write_magic>
    assert(rc == 0);

    return 0;
}
    7bfa:	2000      	movs	r0, #0
    7bfc:	b003      	add	sp, #12
    7bfe:	bd30      	pop	{r4, r5, pc}

00007c00 <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    7c00:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7c02:	460d      	mov	r5, r1
    7c04:	4606      	mov	r6, r0
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    7c06:	f7f9 fa17 	bl	1038 <swap_status_source>
    7c0a:	4604      	mov	r4, r0
    7c0c:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    7c0e:	b358      	cbz	r0, 7c68 <swap_read_status+0x68>
    7c10:	2802      	cmp	r0, #2
    7c12:	d12e      	bne.n	7c72 <swap_read_status+0x72>
    default:
        assert(0);
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    7c14:	2003      	movs	r0, #3
    7c16:	a901      	add	r1, sp, #4
    7c18:	f7fa f8f8 	bl	1e0c <flash_area_open>
    if (rc != 0) {
    7c1c:	bb58      	cbnz	r0, 7c76 <swap_read_status+0x76>
        return BOOT_EFLASH;
    }

    rc = swap_read_status_bytes(fap, state, bs);
    7c1e:	462a      	mov	r2, r5
    7c20:	4631      	mov	r1, r6
    7c22:	9801      	ldr	r0, [sp, #4]
    7c24:	f7f9 f96c 	bl	f00 <swap_read_status_bytes>
    if (rc == 0) {
    7c28:	4604      	mov	r4, r0
    7c2a:	b9d0      	cbnz	r0, 7c62 <swap_read_status+0x62>
        off = boot_swap_info_off(fap);
    7c2c:	9801      	ldr	r0, [sp, #4]
    7c2e:	f001 f947 	bl	8ec0 <boot_swap_info_off>
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    7c32:	2301      	movs	r3, #1
        off = boot_swap_info_off(fap);
    7c34:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    7c36:	f10d 0203 	add.w	r2, sp, #3
    7c3a:	9801      	ldr	r0, [sp, #4]
    7c3c:	f000 fa7a 	bl	8134 <flash_area_read>
        if (rc != 0) {
    7c40:	4604      	mov	r4, r0
    7c42:	b9a0      	cbnz	r0, 7c6e <swap_read_status+0x6e>
            rc = BOOT_EFLASH;
            goto done;
        }

        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    7c44:	2201      	movs	r2, #1
    7c46:	9801      	ldr	r0, [sp, #4]
    7c48:	f10d 0103 	add.w	r1, sp, #3
    7c4c:	f001 f94c 	bl	8ee8 <bootutil_buffer_is_erased>
    7c50:	b110      	cbz	r0, 7c58 <swap_read_status+0x58>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    7c52:	2301      	movs	r3, #1
    7c54:	f88d 3003 	strb.w	r3, [sp, #3]
            rc = 0;
        }

        /* Extract the swap type info */
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    7c58:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7c5c:	f003 030f 	and.w	r3, r3, #15
    7c60:	71eb      	strb	r3, [r5, #7]
    }

done:
    flash_area_close(fap);
    7c62:	9801      	ldr	r0, [sp, #4]
    7c64:	f000 fa65 	bl	8132 <flash_area_close>

    return rc;
}
    7c68:	4620      	mov	r0, r4
    7c6a:	b002      	add	sp, #8
    7c6c:	bd70      	pop	{r4, r5, r6, pc}
            rc = BOOT_EFLASH;
    7c6e:	2401      	movs	r4, #1
    7c70:	e7f7      	b.n	7c62 <swap_read_status+0x62>
    switch (bs->source) {
    7c72:	2407      	movs	r4, #7
    7c74:	e7f8      	b.n	7c68 <swap_read_status+0x68>
        return BOOT_EFLASH;
    7c76:	2401      	movs	r4, #1
    7c78:	e7f6      	b.n	7c68 <swap_read_status+0x68>

00007c7a <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    7c7a:	b513      	push	{r0, r1, r4, lr}
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    7c7c:	2003      	movs	r0, #3
    7c7e:	a901      	add	r1, sp, #4
    7c80:	f7fa f8c4 	bl	1e0c <flash_area_open>
            &fap);
    if (rc != 0) {
    7c84:	b948      	cbnz	r0, 7c9a <swap_set_copy_done+0x20>
        return BOOT_EFLASH;
    }

    rc = boot_write_copy_done(fap);
    7c86:	9801      	ldr	r0, [sp, #4]
    7c88:	f7ff fe8b 	bl	79a2 <boot_write_copy_done>
    7c8c:	4604      	mov	r4, r0
    flash_area_close(fap);
    7c8e:	9801      	ldr	r0, [sp, #4]
    7c90:	f000 fa4f 	bl	8132 <flash_area_close>
    return rc;
}
    7c94:	4620      	mov	r0, r4
    7c96:	b002      	add	sp, #8
    7c98:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    7c9a:	2401      	movs	r4, #1
    7c9c:	e7fa      	b.n	7c94 <swap_set_copy_done+0x1a>

00007c9e <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    7c9e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    7ca0:	2003      	movs	r0, #3
    7ca2:	a901      	add	r1, sp, #4
    7ca4:	f7fa f8b2 	bl	1e0c <flash_area_open>
            &fap);
    if (rc != 0) {
    7ca8:	b9a8      	cbnz	r0, 7cd6 <swap_set_image_ok+0x38>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state);
    7caa:	9801      	ldr	r0, [sp, #4]
    7cac:	a902      	add	r1, sp, #8
    7cae:	f7fc fc07 	bl	44c0 <boot_read_swap_state>
    if (rc != 0) {
    7cb2:	4604      	mov	r4, r0
    7cb4:	b968      	cbnz	r0, 7cd2 <swap_set_image_ok+0x34>
        rc = BOOT_EFLASH;
        goto out;
    }

    if (state.image_ok == BOOT_FLAG_UNSET) {
    7cb6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7cba:	2b03      	cmp	r3, #3
    7cbc:	d103      	bne.n	7cc6 <swap_set_image_ok+0x28>
        rc = boot_write_image_ok(fap);
    7cbe:	9801      	ldr	r0, [sp, #4]
    7cc0:	f001 f977 	bl	8fb2 <boot_write_image_ok>
    7cc4:	4604      	mov	r4, r0
    }

out:
    flash_area_close(fap);
    7cc6:	9801      	ldr	r0, [sp, #4]
    7cc8:	f000 fa33 	bl	8132 <flash_area_close>
    return rc;
}
    7ccc:	4620      	mov	r0, r4
    7cce:	b004      	add	sp, #16
    7cd0:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    7cd2:	2401      	movs	r4, #1
    7cd4:	e7f7      	b.n	7cc6 <swap_set_image_ok+0x28>
        return BOOT_EFLASH;
    7cd6:	2401      	movs	r4, #1
    7cd8:	e7f8      	b.n	7ccc <swap_set_image_ok+0x2e>

00007cda <boot_status_internal_off>:
{
    7cda:	b510      	push	{r4, lr}
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    7cdc:	7943      	ldrb	r3, [r0, #5]
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    7cde:	7902      	ldrb	r2, [r0, #4]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    7ce0:	2b01      	cmp	r3, #1
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    7ce2:	bf06      	itte	eq
    7ce4:	2300      	moveq	r3, #0
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    7ce6:	460c      	moveq	r4, r1
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    7ce8:	020b      	lslne	r3, r1, #8
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    7cea:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    off = ((bs->op == BOOT_STATUS_OP_MOVE) ?
    7cee:	fb01 3302 	mla	r3, r1, r2, r3
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    7cf2:	6802      	ldr	r2, [r0, #0]
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    7cf4:	bf18      	it	ne
    7cf6:	004c      	lslne	r4, r1, #1
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    7cf8:	3a01      	subs	r2, #1
}
    7cfa:	fb04 3002 	mla	r0, r4, r2, r3
    7cfe:	bd10      	pop	{r4, pc}

00007d00 <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    7d00:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    7d02:	6803      	ldr	r3, [r0, #0]
    7d04:	1acd      	subs	r5, r1, r3
    7d06:	2d00      	cmp	r5, #0
    7d08:	dc02      	bgt.n	7d10 <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    7d0a:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
    7d0e:	bd70      	pop	{r4, r5, r6, pc}
    if( ( **p & 0x80 ) == 0 )
    7d10:	f993 6000 	ldrsb.w	r6, [r3]
    7d14:	781c      	ldrb	r4, [r3, #0]
    7d16:	2e00      	cmp	r6, #0
    7d18:	db0a      	blt.n	7d30 <mbedtls_asn1_get_len+0x30>
        *len = *(*p)++;
    7d1a:	1c5c      	adds	r4, r3, #1
    7d1c:	6004      	str	r4, [r0, #0]
    7d1e:	781b      	ldrb	r3, [r3, #0]
    7d20:	6013      	str	r3, [r2, #0]
    if( *len > (size_t) ( end - *p ) )
    7d22:	6803      	ldr	r3, [r0, #0]
    7d24:	1ac9      	subs	r1, r1, r3
    7d26:	6813      	ldr	r3, [r2, #0]
    7d28:	428b      	cmp	r3, r1
    7d2a:	d8ee      	bhi.n	7d0a <mbedtls_asn1_get_len+0xa>
    return( 0 );
    7d2c:	2000      	movs	r0, #0
    7d2e:	e7ee      	b.n	7d0e <mbedtls_asn1_get_len+0xe>
        switch( **p & 0x7F )
    7d30:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    7d34:	3c01      	subs	r4, #1
    7d36:	2c03      	cmp	r4, #3
    7d38:	d82b      	bhi.n	7d92 <mbedtls_asn1_get_len+0x92>
    7d3a:	e8df f004 	tbb	[pc, r4]
    7d3e:	0a02      	.short	0x0a02
    7d40:	2114      	.short	0x2114
            if( ( end - *p ) < 2 )
    7d42:	2d01      	cmp	r5, #1
    7d44:	d0e1      	beq.n	7d0a <mbedtls_asn1_get_len+0xa>
            *len = (*p)[1];
    7d46:	785b      	ldrb	r3, [r3, #1]
    7d48:	6013      	str	r3, [r2, #0]
            (*p) += 2;
    7d4a:	6803      	ldr	r3, [r0, #0]
    7d4c:	3302      	adds	r3, #2
            (*p) += 5;
    7d4e:	6003      	str	r3, [r0, #0]
            break;
    7d50:	e7e7      	b.n	7d22 <mbedtls_asn1_get_len+0x22>
            if( ( end - *p ) < 3 )
    7d52:	2d02      	cmp	r5, #2
    7d54:	ddd9      	ble.n	7d0a <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    7d56:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    7d5a:	ba5b      	rev16	r3, r3
    7d5c:	b29b      	uxth	r3, r3
    7d5e:	6013      	str	r3, [r2, #0]
            (*p) += 3;
    7d60:	6803      	ldr	r3, [r0, #0]
    7d62:	3303      	adds	r3, #3
    7d64:	e7f3      	b.n	7d4e <mbedtls_asn1_get_len+0x4e>
            if( ( end - *p ) < 4 )
    7d66:	2d03      	cmp	r5, #3
    7d68:	ddcf      	ble.n	7d0a <mbedtls_asn1_get_len+0xa>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    7d6a:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    7d6c:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    7d6e:	0224      	lsls	r4, r4, #8
    7d70:	78db      	ldrb	r3, [r3, #3]
            *len = ( (size_t)(*p)[1] << 16 ) |
    7d72:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    7d76:	4323      	orrs	r3, r4
            *len = ( (size_t)(*p)[1] << 16 ) |
    7d78:	6013      	str	r3, [r2, #0]
            (*p) += 4;
    7d7a:	6803      	ldr	r3, [r0, #0]
    7d7c:	3304      	adds	r3, #4
    7d7e:	e7e6      	b.n	7d4e <mbedtls_asn1_get_len+0x4e>
            if( ( end - *p ) < 5 )
    7d80:	2d04      	cmp	r5, #4
    7d82:	ddc2      	ble.n	7d0a <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    7d84:	f8d3 3001 	ldr.w	r3, [r3, #1]
    7d88:	ba1b      	rev	r3, r3
    7d8a:	6013      	str	r3, [r2, #0]
            (*p) += 5;
    7d8c:	6803      	ldr	r3, [r0, #0]
    7d8e:	3305      	adds	r3, #5
    7d90:	e7dd      	b.n	7d4e <mbedtls_asn1_get_len+0x4e>
        switch( **p & 0x7F )
    7d92:	f06f 0063 	mvn.w	r0, #99	; 0x63
    7d96:	e7ba      	b.n	7d0e <mbedtls_asn1_get_len+0xe>

00007d98 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    7d98:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    7d9a:	6804      	ldr	r4, [r0, #0]
    7d9c:	1b0e      	subs	r6, r1, r4
    7d9e:	2e00      	cmp	r6, #0
    7da0:	dd07      	ble.n	7db2 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    7da2:	7826      	ldrb	r6, [r4, #0]
    7da4:	429e      	cmp	r6, r3
    7da6:	d108      	bne.n	7dba <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    7da8:	3401      	adds	r4, #1
    7daa:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    7dac:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    7dae:	f7ff bfa7 	b.w	7d00 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    7db2:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    7db6:	bc70      	pop	{r4, r5, r6}
    7db8:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    7dba:	f06f 0061 	mvn.w	r0, #97	; 0x61
    7dbe:	e7fa      	b.n	7db6 <mbedtls_asn1_get_tag+0x1e>

00007dc0 <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
    7dc0:	b538      	push	{r3, r4, r5, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
    7dc2:	2303      	movs	r3, #3
{
    7dc4:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
    7dc6:	f7ff ffe7 	bl	7d98 <mbedtls_asn1_get_tag>
    7dca:	b918      	cbnz	r0, 7dd4 <mbedtls_asn1_get_bitstring_null+0x14>
        return( ret );

    if( *len == 0 )
    7dcc:	6813      	ldr	r3, [r2, #0]
    7dce:	b913      	cbnz	r3, 7dd6 <mbedtls_asn1_get_bitstring_null+0x16>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
    7dd0:	f06f 0067 	mvn.w	r0, #103	; 0x67
    if( **p != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
    ++( *p );

    return( 0 );
}
    7dd4:	bd38      	pop	{r3, r4, r5, pc}
    --( *len );
    7dd6:	3b01      	subs	r3, #1
    7dd8:	6013      	str	r3, [r2, #0]
    if( **p != 0 )
    7dda:	6823      	ldr	r3, [r4, #0]
    7ddc:	781a      	ldrb	r2, [r3, #0]
    7dde:	2a00      	cmp	r2, #0
    7de0:	d1f6      	bne.n	7dd0 <mbedtls_asn1_get_bitstring_null+0x10>
    ++( *p );
    7de2:	3301      	adds	r3, #1
    7de4:	6023      	str	r3, [r4, #0]
    return( 0 );
    7de6:	e7f5      	b.n	7dd4 <mbedtls_asn1_get_bitstring_null+0x14>

00007de8 <mbedtls_asn1_get_alg>:
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
    7de8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7dec:	4690      	mov	r8, r2
    7dee:	461f      	mov	r7, r3
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    7df0:	aa01      	add	r2, sp, #4
    7df2:	2330      	movs	r3, #48	; 0x30
{
    7df4:	4605      	mov	r5, r0
    7df6:	460e      	mov	r6, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    7df8:	f7ff ffce 	bl	7d98 <mbedtls_asn1_get_tag>
    7dfc:	4604      	mov	r4, r0
    7dfe:	b9f0      	cbnz	r0, 7e3e <mbedtls_asn1_get_alg+0x56>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
    7e00:	682b      	ldr	r3, [r5, #0]
    7e02:	1af6      	subs	r6, r6, r3
    7e04:	2e00      	cmp	r6, #0
    7e06:	dd34      	ble.n	7e72 <mbedtls_asn1_get_alg+0x8a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
    7e08:	4642      	mov	r2, r8
    7e0a:	781b      	ldrb	r3, [r3, #0]
    end = *p + len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
    7e0c:	4628      	mov	r0, r5
    alg->tag = **p;
    7e0e:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
    7e12:	682e      	ldr	r6, [r5, #0]
    7e14:	9b01      	ldr	r3, [sp, #4]
    7e16:	441e      	add	r6, r3
    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
    7e18:	4631      	mov	r1, r6
    7e1a:	2306      	movs	r3, #6
    7e1c:	f7ff ffbc 	bl	7d98 <mbedtls_asn1_get_tag>
    7e20:	4604      	mov	r4, r0
    7e22:	b960      	cbnz	r0, 7e3e <mbedtls_asn1_get_alg+0x56>
        return( ret );

    alg->p = *p;
    7e24:	682b      	ldr	r3, [r5, #0]
    *p += alg->len;
    7e26:	f8d8 2004 	ldr.w	r2, [r8, #4]
    alg->p = *p;
    7e2a:	f8c8 3008 	str.w	r3, [r8, #8]
    *p += alg->len;
    7e2e:	1899      	adds	r1, r3, r2

    if( *p == end )
    7e30:	42b1      	cmp	r1, r6
    *p += alg->len;
    7e32:	6029      	str	r1, [r5, #0]
    if( *p == end )
    7e34:	d107      	bne.n	7e46 <mbedtls_asn1_get_alg+0x5e>
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
    7e36:	210c      	movs	r1, #12
    7e38:	4638      	mov	r0, r7
    7e3a:	f7fe f97b 	bl	6134 <mbedtls_platform_zeroize>

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
    7e3e:	4620      	mov	r0, r4
    7e40:	b002      	add	sp, #8
    7e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    params->tag = **p;
    7e46:	5c9b      	ldrb	r3, [r3, r2]
    7e48:	463a      	mov	r2, r7
    7e4a:	f842 3b04 	str.w	r3, [r2], #4
    (*p)++;
    7e4e:	682b      	ldr	r3, [r5, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
    7e50:	4631      	mov	r1, r6
    (*p)++;
    7e52:	3301      	adds	r3, #1
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
    7e54:	4628      	mov	r0, r5
    (*p)++;
    7e56:	602b      	str	r3, [r5, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
    7e58:	f7ff ff52 	bl	7d00 <mbedtls_asn1_get_len>
    7e5c:	b960      	cbnz	r0, 7e78 <mbedtls_asn1_get_alg+0x90>
    params->p = *p;
    7e5e:	682b      	ldr	r3, [r5, #0]
    *p += params->len;
    7e60:	687a      	ldr	r2, [r7, #4]
    params->p = *p;
    7e62:	60bb      	str	r3, [r7, #8]
    *p += params->len;
    7e64:	4413      	add	r3, r2
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    7e66:	42b3      	cmp	r3, r6
    7e68:	bf18      	it	ne
    7e6a:	f06f 0465 	mvnne.w	r4, #101	; 0x65
    *p += params->len;
    7e6e:	602b      	str	r3, [r5, #0]
    if( *p != end )
    7e70:	e7e5      	b.n	7e3e <mbedtls_asn1_get_alg+0x56>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    7e72:	f06f 045f 	mvn.w	r4, #95	; 0x5f
    7e76:	e7e2      	b.n	7e3e <mbedtls_asn1_get_alg+0x56>
    7e78:	4604      	mov	r4, r0
    7e7a:	e7e0      	b.n	7e3e <mbedtls_asn1_get_alg+0x56>

00007e7c <cc310_sha256_update>:
{
    7e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((uint32_t) data < CONFIG_SRAM_BASE_ADDRESS) {
    7e7e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
{
    7e82:	4605      	mov	r5, r0
    7e84:	4614      	mov	r4, r2
    7e86:	af00      	add	r7, sp, #0
    if ((uint32_t) data < CONFIG_SRAM_BASE_ADDRESS) {
    7e88:	d210      	bcs.n	7eac <cc310_sha256_update+0x30>
    7e8a:	466e      	mov	r6, sp
        uint8_t stack_buffer[data_len];
    7e8c:	1dd3      	adds	r3, r2, #7
    7e8e:	f023 0307 	bic.w	r3, r3, #7
    7e92:	ebad 0d03 	sub.w	sp, sp, r3
        memcpy(stack_buffer, data, block_len);
    7e96:	4668      	mov	r0, sp
    7e98:	f000 fcb2 	bl	8800 <memcpy>
        nrf_cc310_bl_hash_sha256_update(ctx, stack_buffer, block_len);
    7e9c:	4669      	mov	r1, sp
    7e9e:	4622      	mov	r2, r4
    7ea0:	4628      	mov	r0, r5
    7ea2:	f7fe fba7 	bl	65f4 <nrf_cc310_bl_hash_sha256_update>
    7ea6:	46b5      	mov	sp, r6
};
    7ea8:	46bd      	mov	sp, r7
    7eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        nrf_cc310_bl_hash_sha256_update(ctx, data, data_len);
    7eac:	f7fe fba2 	bl	65f4 <nrf_cc310_bl_hash_sha256_update>
};
    7eb0:	e7fa      	b.n	7ea8 <cc310_sha256_update+0x2c>

00007eb2 <crc16_itu_t>:
	return seed;
}

uint16_t crc16_itu_t(uint16_t seed, const uint8_t *src, size_t len)
{
	for (; len > 0; len--) {
    7eb2:	440a      	add	r2, r1
    7eb4:	428a      	cmp	r2, r1
    7eb6:	d100      	bne.n	7eba <crc16_itu_t+0x8>
		seed ^= seed << 12U;
		seed ^= (seed & 0xffU) << 5U;
	}

	return seed;
}
    7eb8:	4770      	bx	lr
		seed ^= *src++;
    7eba:	f811 3b01 	ldrb.w	r3, [r1], #1
    7ebe:	ba40      	rev16	r0, r0
    7ec0:	b280      	uxth	r0, r0
    7ec2:	4058      	eors	r0, r3
		seed ^= (seed & 0xffU) >> 4U;
    7ec4:	f3c0 1303 	ubfx	r3, r0, #4, #4
    7ec8:	4043      	eors	r3, r0
		seed ^= seed << 12U;
    7eca:	0318      	lsls	r0, r3, #12
    7ecc:	b280      	uxth	r0, r0
    7ece:	4043      	eors	r3, r0
		seed ^= (seed & 0xffU) << 5U;
    7ed0:	0158      	lsls	r0, r3, #5
    7ed2:	f400 50ff 	and.w	r0, r0, #8160	; 0x1fe0
    7ed6:	4058      	eors	r0, r3
	for (; len > 0; len--) {
    7ed8:	e7ec      	b.n	7eb4 <crc16_itu_t+0x2>

00007eda <arch_printk_char_out>:
}
    7eda:	2000      	movs	r0, #0
    7edc:	4770      	bx	lr

00007ede <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    7ede:	b40f      	push	{r0, r1, r2, r3}
    7ee0:	b507      	push	{r0, r1, r2, lr}
    7ee2:	a904      	add	r1, sp, #16
    7ee4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    7ee8:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    7eea:	f7f9 fc1f 	bl	172c <vprintk>

	va_end(ap);
}
    7eee:	b003      	add	sp, #12
    7ef0:	f85d eb04 	ldr.w	lr, [sp], #4
    7ef4:	b004      	add	sp, #16
    7ef6:	4770      	bx	lr

00007ef8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    7ef8:	4604      	mov	r4, r0
    7efa:	b508      	push	{r3, lr}
    7efc:	4608      	mov	r0, r1
    7efe:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    7f00:	461a      	mov	r2, r3
    7f02:	47a0      	blx	r4
	return z_impl_z_current_get();
    7f04:	f7fd fe5a 	bl	5bbc <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    7f08:	f7fb fa90 	bl	342c <z_impl_k_thread_abort>

00007f0c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    7f0c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    7f0e:	f013 0307 	ands.w	r3, r3, #7
    7f12:	d105      	bne.n	7f20 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    7f14:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    7f16:	2b00      	cmp	r3, #0
    7f18:	bf0c      	ite	eq
    7f1a:	2000      	moveq	r0, #0
    7f1c:	2003      	movne	r0, #3
    7f1e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    7f20:	2b02      	cmp	r3, #2
    7f22:	d105      	bne.n	7f30 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    7f24:	8b40      	ldrh	r0, [r0, #26]
    7f26:	fab0 f080 	clz	r0, r0
    7f2a:	0940      	lsrs	r0, r0, #5
    7f2c:	0080      	lsls	r0, r0, #2
    7f2e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    7f30:	2b01      	cmp	r3, #1
    7f32:	d105      	bne.n	7f40 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    7f34:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    7f36:	2b00      	cmp	r3, #0
    7f38:	bf0c      	ite	eq
    7f3a:	2000      	moveq	r0, #0
    7f3c:	2005      	movne	r0, #5
    7f3e:	4770      	bx	lr
	int evt = EVT_NOP;
    7f40:	2000      	movs	r0, #0
}
    7f42:	4770      	bx	lr

00007f44 <validate_args>:
{
    7f44:	b510      	push	{r4, lr}
    7f46:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    7f48:	b100      	cbz	r0, 7f4c <validate_args+0x8>
    7f4a:	b911      	cbnz	r1, 7f52 <validate_args+0xe>
		return -EINVAL;
    7f4c:	f06f 0015 	mvn.w	r0, #21
}
    7f50:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    7f52:	1d08      	adds	r0, r1, #4
    7f54:	f000 f8c1 	bl	80da <sys_notify_validate>
	if ((rv == 0)
    7f58:	2800      	cmp	r0, #0
    7f5a:	d1f9      	bne.n	7f50 <validate_args+0xc>
	    && ((cli->notify.flags
    7f5c:	68a3      	ldr	r3, [r4, #8]
    7f5e:	2b03      	cmp	r3, #3
    7f60:	d9f6      	bls.n	7f50 <validate_args+0xc>
    7f62:	e7f3      	b.n	7f4c <validate_args+0x8>

00007f64 <notify_one>:
{
    7f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f68:	460d      	mov	r5, r1
    7f6a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    7f6c:	4619      	mov	r1, r3
    7f6e:	1d28      	adds	r0, r5, #4
{
    7f70:	4690      	mov	r8, r2
    7f72:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    7f74:	f000 f8c2 	bl	80fc <sys_notify_finalize>
	if (cb) {
    7f78:	4604      	mov	r4, r0
    7f7a:	b138      	cbz	r0, 7f8c <notify_one+0x28>
		cb(mgr, cli, state, res);
    7f7c:	4633      	mov	r3, r6
    7f7e:	4642      	mov	r2, r8
    7f80:	4629      	mov	r1, r5
    7f82:	4638      	mov	r0, r7
    7f84:	46a4      	mov	ip, r4
}
    7f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    7f8a:	4760      	bx	ip
}
    7f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007f90 <transition_complete>:
{
    7f90:	b410      	push	{r4}
	__asm__ volatile(
    7f92:	f04f 0420 	mov.w	r4, #32
    7f96:	f3ef 8211 	mrs	r2, BASEPRI
    7f9a:	f384 8812 	msr	BASEPRI_MAX, r4
    7f9e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    7fa2:	6141      	str	r1, [r0, #20]
}
    7fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
    7fa8:	2101      	movs	r1, #1
    7faa:	f7f9 bbcd 	b.w	1748 <process_event>

00007fae <onoff_manager_init>:
{
    7fae:	b538      	push	{r3, r4, r5, lr}
    7fb0:	460c      	mov	r4, r1
	if ((mgr == NULL)
    7fb2:	4605      	mov	r5, r0
    7fb4:	b158      	cbz	r0, 7fce <onoff_manager_init+0x20>
	    || (transitions == NULL)
    7fb6:	b151      	cbz	r1, 7fce <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    7fb8:	680b      	ldr	r3, [r1, #0]
    7fba:	b143      	cbz	r3, 7fce <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    7fbc:	684b      	ldr	r3, [r1, #4]
    7fbe:	b133      	cbz	r3, 7fce <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    7fc0:	221c      	movs	r2, #28
    7fc2:	2100      	movs	r1, #0
    7fc4:	f000 fc27 	bl	8816 <memset>
	return 0;
    7fc8:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    7fca:	612c      	str	r4, [r5, #16]
}
    7fcc:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    7fce:	f06f 0015 	mvn.w	r0, #21
    7fd2:	e7fb      	b.n	7fcc <onoff_manager_init+0x1e>

00007fd4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    7fd4:	b570      	push	{r4, r5, r6, lr}
    7fd6:	4605      	mov	r5, r0
    7fd8:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    7fda:	f7ff ffb3 	bl	7f44 <validate_args>

	if (rv < 0) {
    7fde:	1e04      	subs	r4, r0, #0
    7fe0:	db15      	blt.n	800e <CONFIG_FPROTECT_BLOCK_SIZE+0xe>
    7fe2:	f04f 0320 	mov.w	r3, #32
    7fe6:	f3ef 8211 	mrs	r2, BASEPRI
    7fea:	f383 8812 	msr	BASEPRI_MAX, r3
    7fee:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    7ff2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7ff6:	8b6b      	ldrh	r3, [r5, #26]
    7ff8:	8b2c      	ldrh	r4, [r5, #24]
    7ffa:	428b      	cmp	r3, r1
    7ffc:	f004 0407 	and.w	r4, r4, #7
    8000:	d107      	bne.n	8012 <CONFIG_FPROTECT_BLOCK_SIZE+0x12>
	__asm__ volatile(
    8002:	f382 8811 	msr	BASEPRI, r2
    8006:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    800a:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    800e:	4620      	mov	r0, r4
    8010:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    8012:	2c02      	cmp	r4, #2
    8014:	d10c      	bne.n	8030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
		mgr->refs += 1U;
    8016:	3301      	adds	r3, #1
    8018:	836b      	strh	r3, [r5, #26]
    801a:	f382 8811 	msr	BASEPRI, r2
    801e:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    8022:	2300      	movs	r3, #0
    8024:	4622      	mov	r2, r4
    8026:	4631      	mov	r1, r6
    8028:	4628      	mov	r0, r5
    802a:	f7ff ff9b 	bl	7f64 <notify_one>
    802e:	e7ee      	b.n	800e <CONFIG_FPROTECT_BLOCK_SIZE+0xe>
	} else if ((state == ONOFF_STATE_OFF)
    8030:	2c06      	cmp	r4, #6
    8032:	d814      	bhi.n	805e <CONFIG_FPROTECT_BLOCK_SIZE+0x5e>
    8034:	e8df f004 	tbb	[pc, r4]
    8038:	13131304 	.word	0x13131304
    803c:	1a04      	.short	0x1a04
    803e:	04          	.byte	0x04
    803f:	00          	.byte	0x00
	parent->next = child;
    8040:	2300      	movs	r3, #0
    8042:	6033      	str	r3, [r6, #0]
	return list->tail;
    8044:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    8046:	b93b      	cbnz	r3, 8058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>
	list->head = node;
    8048:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    804c:	b9ac      	cbnz	r4, 807a <CONFIG_FPROTECT_BLOCK_SIZE+0x7a>
		process_event(mgr, EVT_RECHECK, key);
    804e:	2102      	movs	r1, #2
    8050:	4628      	mov	r0, r5
    8052:	f7f9 fb79 	bl	1748 <process_event>
    8056:	e7da      	b.n	800e <CONFIG_FPROTECT_BLOCK_SIZE+0xe>
	parent->next = child;
    8058:	601e      	str	r6, [r3, #0]
	list->tail = node;
    805a:	606e      	str	r6, [r5, #4]
}
    805c:	e7f6      	b.n	804c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
    805e:	f382 8811 	msr	BASEPRI, r2
    8062:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    8066:	f06f 0404 	mvn.w	r4, #4
    806a:	e7d0      	b.n	800e <CONFIG_FPROTECT_BLOCK_SIZE+0xe>
    806c:	f382 8811 	msr	BASEPRI, r2
    8070:	f3bf 8f6f 	isb	sy
    8074:	f06f 0485 	mvn.w	r4, #133	; 0x85
    8078:	e7c9      	b.n	800e <CONFIG_FPROTECT_BLOCK_SIZE+0xe>
    807a:	f382 8811 	msr	BASEPRI, r2
    807e:	f3bf 8f6f 	isb	sy
		if (notify) {
    8082:	e7c4      	b.n	800e <CONFIG_FPROTECT_BLOCK_SIZE+0xe>

00008084 <onoff_sync_lock>:
	__asm__ volatile(
    8084:	f04f 0220 	mov.w	r2, #32
    8088:	f3ef 8311 	mrs	r3, BASEPRI
    808c:	f382 8812 	msr	BASEPRI_MAX, r2
    8090:	f3bf 8f6f 	isb	sy
}

int onoff_sync_lock(struct onoff_sync_service *srv,
		    k_spinlock_key_t *keyp)
{
	*keyp = k_spin_lock(&srv->lock);
    8094:	600b      	str	r3, [r1, #0]
	return srv->count;
}
    8096:	6800      	ldr	r0, [r0, #0]
    8098:	4770      	bx	lr

0000809a <onoff_sync_finalize>:
int onoff_sync_finalize(struct onoff_sync_service *srv,
			k_spinlock_key_t key,
			struct onoff_client *cli,
			int res,
			bool on)
{
    809a:	b538      	push	{r3, r4, r5, lr}

	/* Clear errors visible when locked.  If they are to be
	 * preserved the caller must finalize with the previous
	 * error code.
	 */
	if (srv->count < 0) {
    809c:	6804      	ldr	r4, [r0, #0]
{
    809e:	460d      	mov	r5, r1
	if (srv->count < 0) {
    80a0:	2c00      	cmp	r4, #0
		srv->count = 0;
    80a2:	bfbc      	itt	lt
    80a4:	2400      	movlt	r4, #0
    80a6:	6004      	strlt	r4, [r0, #0]
	}
	if (res < 0) {
    80a8:	2b00      	cmp	r3, #0
{
    80aa:	4611      	mov	r1, r2
    80ac:	f89d 2010 	ldrb.w	r2, [sp, #16]
	if (res < 0) {
    80b0:	db10      	blt.n	80d4 <onoff_sync_finalize+0x3a>
		srv->count = res;
		state = ONOFF_STATE_ERROR;
	} else if (on) {
		srv->count += 1;
    80b2:	6804      	ldr	r4, [r0, #0]
	} else if (on) {
    80b4:	b162      	cbz	r2, 80d0 <onoff_sync_finalize+0x36>
		srv->count += 1;
    80b6:	3401      	adds	r4, #1
	uint32_t state = ONOFF_STATE_ON;
    80b8:	2202      	movs	r2, #2
		srv->count = res;
    80ba:	6004      	str	r4, [r0, #0]
	__asm__ volatile(
    80bc:	f385 8811 	msr	BASEPRI, r5
    80c0:	f3bf 8f6f 	isb	sy

	int rv = srv->count;

	k_spin_unlock(&srv->lock, key);

	if (cli) {
    80c4:	b111      	cbz	r1, 80cc <onoff_sync_finalize+0x32>
		/* Detect service mis-use: onoff does not callback on transition
		 * to off, so no client should have been passed.
		 */
		__ASSERT_NO_MSG(on);
		notify_one(NULL, cli, state, res);
    80c6:	2000      	movs	r0, #0
    80c8:	f7ff ff4c 	bl	7f64 <notify_one>
	}

	return rv;
}
    80cc:	4620      	mov	r0, r4
    80ce:	bd38      	pop	{r3, r4, r5, pc}
		srv->count -= 1;
    80d0:	3c01      	subs	r4, #1
    80d2:	e7f1      	b.n	80b8 <onoff_sync_finalize+0x1e>
    80d4:	461c      	mov	r4, r3
		state = ONOFF_STATE_ERROR;
    80d6:	2201      	movs	r2, #1
    80d8:	e7ef      	b.n	80ba <onoff_sync_finalize+0x20>

000080da <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    80da:	4603      	mov	r3, r0
    80dc:	b158      	cbz	r0, 80f6 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    80de:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    80e0:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    80e4:	2a01      	cmp	r2, #1
    80e6:	d003      	beq.n	80f0 <sys_notify_validate+0x16>
    80e8:	2a03      	cmp	r2, #3
    80ea:	d104      	bne.n	80f6 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    80ec:	6802      	ldr	r2, [r0, #0]
    80ee:	b112      	cbz	r2, 80f6 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    80f0:	2000      	movs	r0, #0
    80f2:	6098      	str	r0, [r3, #8]
    80f4:	4770      	bx	lr
    80f6:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    80fa:	4770      	bx	lr

000080fc <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    80fc:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    80fe:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    8100:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    8104:	2a03      	cmp	r2, #3
    8106:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    810a:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    810c:	bf14      	ite	ne
    810e:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    8110:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    8112:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    8114:	4770      	bx	lr

00008116 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_META, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    8116:	4770      	bx	lr

00008118 <z_log_minimal_printk>:
#include <zephyr/sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
    8118:	b40f      	push	{r0, r1, r2, r3}
    811a:	b507      	push	{r0, r1, r2, lr}
    811c:	a904      	add	r1, sp, #16
    811e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    8122:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    8124:	f7f9 fb02 	bl	172c <vprintk>
	va_end(ap);
}
    8128:	b003      	add	sp, #12
    812a:	f85d eb04 	ldr.w	lr, [sp], #4
    812e:	b004      	add	sp, #16
    8130:	4770      	bx	lr

00008132 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
    8132:	4770      	bx	lr

00008134 <flash_area_read>:


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
    8134:	2900      	cmp	r1, #0

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    8136:	b430      	push	{r4, r5}
    8138:	4604      	mov	r4, r0
    813a:	4618      	mov	r0, r3
    813c:	db0b      	blt.n	8156 <flash_area_read+0x22>
    813e:	68a5      	ldr	r5, [r4, #8]
    8140:	4408      	add	r0, r1
    8142:	42a8      	cmp	r0, r5
    8144:	d807      	bhi.n	8156 <flash_area_read+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_read(fa->fa_dev, fa->fa_off + off, dst, len);
    8146:	68e0      	ldr	r0, [r4, #12]
    8148:	6864      	ldr	r4, [r4, #4]
    814a:	4421      	add	r1, r4
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    814c:	6884      	ldr	r4, [r0, #8]
    814e:	6824      	ldr	r4, [r4, #0]
    8150:	46a4      	mov	ip, r4
}
    8152:	bc30      	pop	{r4, r5}
    8154:	4760      	bx	ip
    8156:	f06f 0015 	mvn.w	r0, #21
    815a:	bc30      	pop	{r4, r5}
    815c:	4770      	bx	lr

0000815e <flash_area_write>:
    815e:	2900      	cmp	r1, #0

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    8160:	b430      	push	{r4, r5}
    8162:	4604      	mov	r4, r0
    8164:	4618      	mov	r0, r3
    8166:	db0b      	blt.n	8180 <flash_area_write+0x22>
    8168:	68a5      	ldr	r5, [r4, #8]
    816a:	4408      	add	r0, r1
    816c:	42a8      	cmp	r0, r5
    816e:	d807      	bhi.n	8180 <flash_area_write+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_write(fa->fa_dev, fa->fa_off + off, (void *)src, len);
    8170:	68e0      	ldr	r0, [r4, #12]
    8172:	6864      	ldr	r4, [r4, #4]
    8174:	4421      	add	r1, r4
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->write(dev, offset, data, len);
    8176:	6884      	ldr	r4, [r0, #8]
    8178:	6864      	ldr	r4, [r4, #4]
    817a:	46a4      	mov	ip, r4
}
    817c:	bc30      	pop	{r4, r5}
    817e:	4760      	bx	ip
    8180:	f06f 0015 	mvn.w	r0, #21
    8184:	bc30      	pop	{r4, r5}
    8186:	4770      	bx	lr

00008188 <flash_area_erase>:
    8188:	2900      	cmp	r1, #0

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    818a:	4603      	mov	r3, r0
    818c:	b410      	push	{r4}
    818e:	4610      	mov	r0, r2
    8190:	db0b      	blt.n	81aa <flash_area_erase+0x22>
    8192:	689c      	ldr	r4, [r3, #8]
    8194:	4408      	add	r0, r1
    8196:	42a0      	cmp	r0, r4
    8198:	d807      	bhi.n	81aa <flash_area_erase+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_erase(fa->fa_dev, fa->fa_off + off, len);
    819a:	68d8      	ldr	r0, [r3, #12]
    819c:	685b      	ldr	r3, [r3, #4]
    819e:	4419      	add	r1, r3
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
    81a0:	6883      	ldr	r3, [r0, #8]
}
    81a2:	f85d 4b04 	ldr.w	r4, [sp], #4
    81a6:	689b      	ldr	r3, [r3, #8]
    81a8:	4718      	bx	r3
    81aa:	f06f 0015 	mvn.w	r0, #21
    81ae:	f85d 4b04 	ldr.w	r4, [sp], #4
    81b2:	4770      	bx	lr

000081b4 <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
    81b4:	b508      	push	{r3, lr}
	return flash_get_write_block_size(fa->fa_dev);
    81b6:	68c0      	ldr	r0, [r0, #12]
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    81b8:	6883      	ldr	r3, [r0, #8]
    81ba:	68db      	ldr	r3, [r3, #12]
    81bc:	4798      	blx	r3
}
    81be:	6800      	ldr	r0, [r0, #0]
    81c0:	bd08      	pop	{r3, pc}

000081c2 <flash_area_erased_val>:
{
	return fa->fa_dev;
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    81c2:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(fa->fa_dev);
    81c4:	68c0      	ldr	r0, [r0, #12]
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    81c6:	6883      	ldr	r3, [r0, #8]
    81c8:	68db      	ldr	r3, [r3, #12]
    81ca:	4798      	blx	r3

	return param->erase_value;
}
    81cc:	7900      	ldrb	r0, [r0, #4]
    81ce:	bd08      	pop	{r3, pc}

000081d0 <get_sectors_cb>:
{
    81d0:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    81d2:	684c      	ldr	r4, [r1, #4]
    81d4:	6803      	ldr	r3, [r0, #0]
    81d6:	42a3      	cmp	r3, r4
    81d8:	d201      	bcs.n	81de <get_sectors_cb+0xe>
		*bail_value = true;
    81da:	2001      	movs	r0, #1
}
    81dc:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
    81de:	688a      	ldr	r2, [r1, #8]
    81e0:	4422      	add	r2, r4
    81e2:	4293      	cmp	r3, r2
    81e4:	d301      	bcc.n	81ea <get_sectors_cb+0x1a>
		*bail_value = false;
    81e6:	2000      	movs	r0, #0
    81e8:	e7f8      	b.n	81dc <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
    81ea:	694e      	ldr	r6, [r1, #20]
    81ec:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
    81f0:	42b5      	cmp	r5, r6
    81f2:	d303      	bcc.n	81fc <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
    81f4:	f06f 030b 	mvn.w	r3, #11
    81f8:	618b      	str	r3, [r1, #24]
		return true;
    81fa:	e7f4      	b.n	81e6 <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    81fc:	1b1b      	subs	r3, r3, r4
    81fe:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    8202:	6843      	ldr	r3, [r0, #4]
    8204:	6908      	ldr	r0, [r1, #16]
    8206:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
    820a:	6053      	str	r3, [r2, #4]
	data->ret_idx++;
    820c:	690b      	ldr	r3, [r1, #16]
    820e:	3301      	adds	r3, #1
    8210:	610b      	str	r3, [r1, #16]
	return true;
    8212:	e7e2      	b.n	81da <get_sectors_cb+0xa>

00008214 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    8214:	2000      	movs	r0, #0
{
    8216:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    8218:	f7f9 fdc4 	bl	1da4 <sys_reboot>

0000821c <console_write>:
{
    821c:	b570      	push	{r4, r5, r6, lr}
    821e:	4606      	mov	r6, r0
    8220:	460d      	mov	r5, r1
	for (i = 0; i < cnt; i++) {
    8222:	2400      	movs	r4, #0
    8224:	42ac      	cmp	r4, r5
    8226:	db00      	blt.n	822a <console_write+0xe>
}
    8228:	bd70      	pop	{r4, r5, r6, pc}
		if (console_out((int)str[i]) == EOF) {
    822a:	5d30      	ldrb	r0, [r6, r4]
    822c:	f7f9 ff82 	bl	2134 <console_out>
    8230:	3001      	adds	r0, #1
    8232:	d0f9      	beq.n	8228 <console_write+0xc>
	for (i = 0; i < cnt; i++) {
    8234:	3401      	adds	r4, #1
    8236:	e7f5      	b.n	8224 <console_write+0x8>

00008238 <initial_checks>:
} while(0)

static bool initial_checks(zcbor_state_t *state)
{
	ZCBOR_CHECK_ERROR();
	ZCBOR_CHECK_PAYLOAD();
    8238:	6802      	ldr	r2, [r0, #0]
    823a:	68c3      	ldr	r3, [r0, #12]
    823c:	429a      	cmp	r2, r3
    823e:	bf21      	itttt	cs
    8240:	2208      	movcs	r2, #8
    8242:	6943      	ldrcs	r3, [r0, #20]
    8244:	2000      	movcs	r0, #0
    8246:	60da      	strcs	r2, [r3, #12]
	return true;
    8248:	bf38      	it	cc
    824a:	2001      	movcc	r0, #1
}
    824c:	4770      	bx	lr

0000824e <type_check>:

static bool type_check(zcbor_state_t *state, zcbor_major_type_t exp_major_type)
{
    824e:	b510      	push	{r4, lr}
    8250:	4604      	mov	r4, r0
	if (!initial_checks(state)) {
    8252:	f7ff fff1 	bl	8238 <initial_checks>
    8256:	b138      	cbz	r0, 8268 <type_check+0x1a>
		ZCBOR_FAIL();
	}
	zcbor_major_type_t major_type = MAJOR_TYPE(*state->payload);
    8258:	6823      	ldr	r3, [r4, #0]
    825a:	781b      	ldrb	r3, [r3, #0]

	if (major_type != exp_major_type) {
    825c:	ebb1 1f53 	cmp.w	r1, r3, lsr #5
    8260:	d003      	beq.n	826a <type_check+0x1c>
    8262:	220a      	movs	r2, #10
    8264:	6963      	ldr	r3, [r4, #20]
    8266:	60da      	str	r2, [r3, #12]
		ZCBOR_FAIL();
    8268:	2000      	movs	r0, #0
		ZCBOR_ERR(ZCBOR_ERR_WRONG_TYPE);
	}
	return true;
}
    826a:	bd10      	pop	{r4, pc}

0000826c <value_extract>:
 *          CBOR values are always big-endian, so this function converts from
 *          big to little-endian if necessary (@ref CONFIG_BIG_ENDIAN).
 */
static bool value_extract(zcbor_state_t *state,
		void *const result, uint_fast32_t result_len)
{
    826c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8270:	4604      	mov	r4, r0
    8272:	4617      	mov	r7, r2
	zcbor_trace();
	zcbor_assert(result_len != 0, "0-length result not supported.\r\n");
	zcbor_assert(result != NULL, NULL);

	INITIAL_CHECKS();
    8274:	f7ff ffe0 	bl	8238 <initial_checks>
{
    8278:	460d      	mov	r5, r1
	INITIAL_CHECKS();
    827a:	4680      	mov	r8, r0
    827c:	b120      	cbz	r0, 8288 <value_extract+0x1c>
	ZCBOR_ERR_IF((state->elem_count == 0), ZCBOR_ERR_LOW_ELEM_COUNT);
    827e:	68a3      	ldr	r3, [r4, #8]
    8280:	b93b      	cbnz	r3, 8292 <value_extract+0x26>
    8282:	2203      	movs	r2, #3
    8284:	6963      	ldr	r3, [r4, #20]
    8286:	60da      	str	r2, [r3, #12]
	INITIAL_CHECKS();
    8288:	f04f 0800 	mov.w	r8, #0
		(state->payload) += len;
	}

	(state->elem_count)--;
	return true;
}
    828c:	4640      	mov	r0, r8
    828e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t additional = ADDITIONAL(*state->payload);
    8292:	6823      	ldr	r3, [r4, #0]
	memset(result, 0, result_len);
    8294:	463a      	mov	r2, r7
	uint8_t additional = ADDITIONAL(*state->payload);
    8296:	781e      	ldrb	r6, [r3, #0]
	state->payload_bak = state->payload;
    8298:	6063      	str	r3, [r4, #4]
	(state->payload)++;
    829a:	3301      	adds	r3, #1
	memset(result, 0, result_len);
    829c:	2100      	movs	r1, #0
    829e:	4628      	mov	r0, r5
	uint8_t additional = ADDITIONAL(*state->payload);
    82a0:	f006 061f 	and.w	r6, r6, #31
	(state->payload)++;
    82a4:	6023      	str	r3, [r4, #0]
	memset(result, 0, result_len);
    82a6:	f000 fab6 	bl	8816 <memset>
	if (additional <= ZCBOR_VALUE_IN_HEADER) {
    82aa:	2e17      	cmp	r6, #23
    82ac:	d804      	bhi.n	82b8 <value_extract+0x4c>
		u8_result[0] = additional;
    82ae:	702e      	strb	r6, [r5, #0]
	(state->elem_count)--;
    82b0:	68a3      	ldr	r3, [r4, #8]
    82b2:	3b01      	subs	r3, #1
    82b4:	60a3      	str	r3, [r4, #8]
	return true;
    82b6:	e7e9      	b.n	828c <value_extract+0x20>
	if (ZCBOR_VALUE_IS_1_BYTE <= additional && additional <= ZCBOR_VALUE_IS_8_BYTES) {
    82b8:	3e18      	subs	r6, #24
    82ba:	b2f2      	uxtb	r2, r6
    82bc:	2a03      	cmp	r2, #3
		FAIL_AND_DECR_IF(len > result_len, ZCBOR_ERR_INT_SIZE);
    82be:	6823      	ldr	r3, [r4, #0]
	if (ZCBOR_VALUE_IS_1_BYTE <= additional && additional <= ZCBOR_VALUE_IS_8_BYTES) {
    82c0:	d808      	bhi.n	82d4 <value_extract+0x68>
		return 1U << (additional - ZCBOR_VALUE_IS_1_BYTE);
    82c2:	2101      	movs	r1, #1
    82c4:	40b1      	lsls	r1, r6
		FAIL_AND_DECR_IF(len > result_len, ZCBOR_ERR_INT_SIZE);
    82c6:	428f      	cmp	r7, r1
    82c8:	d209      	bcs.n	82de <value_extract+0x72>
    82ca:	3b01      	subs	r3, #1
    82cc:	6023      	str	r3, [r4, #0]
    82ce:	2205      	movs	r2, #5
    82d0:	6963      	ldr	r3, [r4, #20]
    82d2:	e7d8      	b.n	8286 <value_extract+0x1a>
		FAIL_AND_DECR_IF(len == 0, ZCBOR_ERR_ADDITIONAL_INVAL); // additional_len() did not recognize the additional value.
    82d4:	3b01      	subs	r3, #1
    82d6:	6023      	str	r3, [r4, #0]
    82d8:	2207      	movs	r2, #7
    82da:	6963      	ldr	r3, [r4, #20]
    82dc:	e7d3      	b.n	8286 <value_extract+0x1a>
		FAIL_AND_DECR_IF((state->payload + len) > state->payload_end,
    82de:	68e0      	ldr	r0, [r4, #12]
    82e0:	185a      	adds	r2, r3, r1
    82e2:	4290      	cmp	r0, r2
    82e4:	d204      	bcs.n	82f0 <value_extract+0x84>
    82e6:	3b01      	subs	r3, #1
    82e8:	6023      	str	r3, [r4, #0]
    82ea:	2208      	movs	r2, #8
    82ec:	6963      	ldr	r3, [r4, #20]
    82ee:	e7ca      	b.n	8286 <value_extract+0x1a>
    82f0:	1e4b      	subs	r3, r1, #1
    82f2:	3d01      	subs	r5, #1
			u8_result[i] = (state->payload)[len - i - 1];
    82f4:	6822      	ldr	r2, [r4, #0]
    82f6:	5cd2      	ldrb	r2, [r2, r3]
		for (uint_fast32_t i = 0; i < len; i++) {
    82f8:	3b01      	subs	r3, #1
			u8_result[i] = (state->payload)[len - i - 1];
    82fa:	f805 2f01 	strb.w	r2, [r5, #1]!
		for (uint_fast32_t i = 0; i < len; i++) {
    82fe:	d2f9      	bcs.n	82f4 <value_extract+0x88>
		(state->payload) += len;
    8300:	6823      	ldr	r3, [r4, #0]
    8302:	440b      	add	r3, r1
    8304:	6023      	str	r3, [r4, #0]
    8306:	e7d3      	b.n	82b0 <value_extract+0x44>

00008308 <str_start_decode>:
}


static bool str_start_decode(zcbor_state_t *state,
		struct zcbor_string *result, zcbor_major_type_t exp_major_type)
{
    8308:	b538      	push	{r3, r4, r5, lr}
    830a:	460c      	mov	r4, r1
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    830c:	4611      	mov	r1, r2
{
    830e:	4605      	mov	r5, r0
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    8310:	f7ff ff9d 	bl	824e <type_check>
    8314:	b908      	cbnz	r0, 831a <str_start_decode+0x12>
    8316:	2000      	movs	r0, #0
		ZCBOR_FAIL();
	}

	result->value = state->payload;
	return true;
}
    8318:	bd38      	pop	{r3, r4, r5, pc}
	if (!value_extract(state, &result->len, sizeof(result->len))) {
    831a:	2204      	movs	r2, #4
    831c:	4628      	mov	r0, r5
    831e:	18a1      	adds	r1, r4, r2
    8320:	f7ff ffa4 	bl	826c <value_extract>
    8324:	2800      	cmp	r0, #0
    8326:	d0f6      	beq.n	8316 <str_start_decode+0xe>
	result->value = state->payload;
    8328:	682b      	ldr	r3, [r5, #0]
    832a:	6023      	str	r3, [r4, #0]
	return true;
    832c:	e7f4      	b.n	8318 <str_start_decode+0x10>

0000832e <list_map_start_decode>:
}


static bool list_map_start_decode(zcbor_state_t *state,
		zcbor_major_type_t exp_major_type)
{
    832e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8330:	4604      	mov	r4, r0
	uint_fast32_t new_elem_count;
	bool indefinite_length_array = false;

	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    8332:	f7ff ff8c 	bl	824e <type_check>
    8336:	4605      	mov	r5, r0
    8338:	b168      	cbz	r0, 8356 <list_map_start_decode+0x28>

	if (ADDITIONAL(*state->payload) == ZCBOR_VALUE_IS_INDEFINITE_LENGTH) {
    833a:	6822      	ldr	r2, [r4, #0]
    833c:	7813      	ldrb	r3, [r2, #0]
    833e:	f003 031f 	and.w	r3, r3, #31
    8342:	2b1f      	cmp	r3, #31
    8344:	d119      	bne.n	837a <list_map_start_decode+0x4c>
		/* Indefinite length array. */
		new_elem_count = ZCBOR_LARGE_ELEM_COUNT;
    8346:	f06f 0310 	mvn.w	r3, #16
    834a:	9301      	str	r3, [sp, #4]
		ZCBOR_ERR_IF(state->elem_count == 0, ZCBOR_ERR_LOW_ELEM_COUNT);
    834c:	68a3      	ldr	r3, [r4, #8]
    834e:	b92b      	cbnz	r3, 835c <list_map_start_decode+0x2e>
    8350:	2203      	movs	r2, #3
    8352:	6963      	ldr	r3, [r4, #20]
    8354:	60da      	str	r2, [r3, #12]
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    8356:	2000      	movs	r0, #0
	}

	state->indefinite_length_array = indefinite_length_array;

	return true;
}
    8358:	b003      	add	sp, #12
    835a:	bd30      	pop	{r4, r5, pc}
		state->payload++;
    835c:	3201      	adds	r2, #1
		state->elem_count--;
    835e:	3b01      	subs	r3, #1
		state->payload++;
    8360:	6022      	str	r2, [r4, #0]
		state->elem_count--;
    8362:	60a3      	str	r3, [r4, #8]
	if (!zcbor_new_backup(state, new_elem_count)) {
    8364:	4620      	mov	r0, r4
    8366:	9901      	ldr	r1, [sp, #4]
    8368:	f000 f98b 	bl	8682 <zcbor_new_backup>
    836c:	b978      	cbnz	r0, 838e <list_map_start_decode+0x60>
		FAIL_RESTORE();
    836e:	6863      	ldr	r3, [r4, #4]
    8370:	6023      	str	r3, [r4, #0]
    8372:	68a3      	ldr	r3, [r4, #8]
    8374:	3301      	adds	r3, #1
    8376:	60a3      	str	r3, [r4, #8]
    8378:	e7ed      	b.n	8356 <list_map_start_decode+0x28>
		if (!value_extract(state, &new_elem_count, sizeof(new_elem_count))) {
    837a:	2204      	movs	r2, #4
    837c:	4620      	mov	r0, r4
    837e:	eb0d 0102 	add.w	r1, sp, r2
    8382:	f7ff ff73 	bl	826c <value_extract>
    8386:	2800      	cmp	r0, #0
    8388:	d0e5      	beq.n	8356 <list_map_start_decode+0x28>
	bool indefinite_length_array = false;
    838a:	2500      	movs	r5, #0
    838c:	e7ea      	b.n	8364 <list_map_start_decode+0x36>
	state->indefinite_length_array = indefinite_length_array;
    838e:	7425      	strb	r5, [r4, #16]
	return true;
    8390:	e7e2      	b.n	8358 <list_map_start_decode+0x2a>

00008392 <list_map_end_decode>:
	return true;
}


static bool list_map_end_decode(zcbor_state_t *state)
{
    8392:	b510      	push	{r4, lr}
	uint_fast32_t max_elem_count = 0;

	if (state->indefinite_length_array) {
    8394:	7c02      	ldrb	r2, [r0, #16]
{
    8396:	4604      	mov	r4, r0
	if (state->indefinite_length_array) {
    8398:	b18a      	cbz	r2, 83be <list_map_end_decode+0x2c>
	INITIAL_CHECKS();
    839a:	f7ff ff4d 	bl	8238 <initial_checks>
    839e:	b130      	cbz	r0, 83ae <list_map_end_decode+0x1c>
	ZCBOR_ERR_IF(*state->payload != 0xFF, ZCBOR_ERR_WRONG_TYPE);
    83a0:	6823      	ldr	r3, [r4, #0]
    83a2:	781a      	ldrb	r2, [r3, #0]
    83a4:	2aff      	cmp	r2, #255	; 0xff
    83a6:	d004      	beq.n	83b2 <list_map_end_decode+0x20>
    83a8:	220a      	movs	r2, #10
    83aa:	6963      	ldr	r3, [r4, #20]
    83ac:	60da      	str	r2, [r3, #12]
			max_elem_count)) {
		ZCBOR_FAIL();
	}

	return true;
}
    83ae:	2000      	movs	r0, #0
    83b0:	bd10      	pop	{r4, pc}
	state->payload++;
    83b2:	3301      	adds	r3, #1
    83b4:	6023      	str	r3, [r4, #0]
		state->indefinite_length_array = false;
    83b6:	2300      	movs	r3, #0
		max_elem_count = ZCBOR_MAX_ELEM_COUNT;
    83b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		state->indefinite_length_array = false;
    83bc:	7423      	strb	r3, [r4, #16]
	if (!zcbor_process_backup(state,
    83be:	4620      	mov	r0, r4
}
    83c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!zcbor_process_backup(state,
    83c4:	2107      	movs	r1, #7
    83c6:	f000 b97a 	b.w	86be <zcbor_process_backup>

000083ca <str_decode>:
{
    83ca:	b538      	push	{r3, r4, r5, lr}
    83cc:	4604      	mov	r4, r0
    83ce:	460d      	mov	r5, r1
	if (!str_start_decode(state, result, exp_major_type)) {
    83d0:	f7ff ff9a 	bl	8308 <str_start_decode>
    83d4:	b180      	cbz	r0, 83f8 <str_decode+0x2e>
	if (result->len > (state->payload_end - state->payload)) {
    83d6:	6823      	ldr	r3, [r4, #0]
    83d8:	68e2      	ldr	r2, [r4, #12]
    83da:	6869      	ldr	r1, [r5, #4]
    83dc:	1ad2      	subs	r2, r2, r3
    83de:	4291      	cmp	r1, r2
    83e0:	d802      	bhi.n	83e8 <str_decode+0x1e>
	state->payload += result->len;
    83e2:	440b      	add	r3, r1
    83e4:	6023      	str	r3, [r4, #0]
}
    83e6:	bd38      	pop	{r3, r4, r5, pc}
    83e8:	2208      	movs	r2, #8
		ERR_RESTORE(ZCBOR_ERR_NO_PAYLOAD);
    83ea:	6863      	ldr	r3, [r4, #4]
    83ec:	6023      	str	r3, [r4, #0]
    83ee:	68a3      	ldr	r3, [r4, #8]
    83f0:	3301      	adds	r3, #1
    83f2:	60a3      	str	r3, [r4, #8]
    83f4:	6963      	ldr	r3, [r4, #20]
    83f6:	60da      	str	r2, [r3, #12]
		ZCBOR_FAIL();
    83f8:	2000      	movs	r0, #0
    83fa:	e7f4      	b.n	83e6 <str_decode+0x1c>

000083fc <str_expect>:
{
    83fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    83fe:	460e      	mov	r6, r1
	if (!str_decode(state, &tmp_result, exp_major_type)) {
    8400:	4669      	mov	r1, sp
{
    8402:	4604      	mov	r4, r0
	if (!str_decode(state, &tmp_result, exp_major_type)) {
    8404:	f7ff ffe1 	bl	83ca <str_decode>
    8408:	4605      	mov	r5, r0
    840a:	b158      	cbz	r0, 8424 <str_expect+0x28>
	if ((tmp_result.len != result->len)
    840c:	9a01      	ldr	r2, [sp, #4]
    840e:	6873      	ldr	r3, [r6, #4]
    8410:	429a      	cmp	r2, r3
    8412:	d00b      	beq.n	842c <str_expect+0x30>
    8414:	220b      	movs	r2, #11
		ERR_RESTORE(ZCBOR_ERR_WRONG_VALUE);
    8416:	6863      	ldr	r3, [r4, #4]
    8418:	6023      	str	r3, [r4, #0]
    841a:	68a3      	ldr	r3, [r4, #8]
    841c:	3301      	adds	r3, #1
    841e:	60a3      	str	r3, [r4, #8]
    8420:	6963      	ldr	r3, [r4, #20]
    8422:	60da      	str	r2, [r3, #12]
		ZCBOR_FAIL();
    8424:	2500      	movs	r5, #0
}
    8426:	4628      	mov	r0, r5
    8428:	b002      	add	sp, #8
    842a:	bd70      	pop	{r4, r5, r6, pc}
			|| memcmp(result->value, tmp_result.value, tmp_result.len)) {
    842c:	9900      	ldr	r1, [sp, #0]
    842e:	6830      	ldr	r0, [r6, #0]
    8430:	f000 f9bf 	bl	87b2 <memcmp>
    8434:	2800      	cmp	r0, #0
    8436:	d0f6      	beq.n	8426 <str_expect+0x2a>
    8438:	e7ec      	b.n	8414 <str_expect+0x18>

0000843a <zcbor_int64_decode>:
{
    843a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    843c:	4604      	mov	r4, r0
    843e:	460d      	mov	r5, r1
	INITIAL_CHECKS();
    8440:	f7ff fefa 	bl	8238 <initial_checks>
    8444:	b140      	cbz	r0, 8458 <zcbor_int64_decode+0x1e>
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    8446:	6823      	ldr	r3, [r4, #0]
    8448:	781b      	ldrb	r3, [r3, #0]
	if (major_type != ZCBOR_MAJOR_TYPE_PINT
    844a:	2b3f      	cmp	r3, #63	; 0x3f
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    844c:	ea4f 1653 	mov.w	r6, r3, lsr #5
	if (major_type != ZCBOR_MAJOR_TYPE_PINT
    8450:	d905      	bls.n	845e <zcbor_int64_decode+0x24>
    8452:	220a      	movs	r2, #10
    8454:	6963      	ldr	r3, [r4, #20]
    8456:	60da      	str	r2, [r3, #12]
	INITIAL_CHECKS();
    8458:	2000      	movs	r0, #0
}
    845a:	b002      	add	sp, #8
    845c:	bd70      	pop	{r4, r5, r6, pc}
	if (!value_extract(state, &uint_result, sizeof(uint_result))) {
    845e:	2208      	movs	r2, #8
    8460:	4669      	mov	r1, sp
    8462:	4620      	mov	r0, r4
    8464:	f7ff ff02 	bl	826c <value_extract>
    8468:	2800      	cmp	r0, #0
    846a:	d0f5      	beq.n	8458 <zcbor_int64_decode+0x1e>
	int_result = (int64_t)uint_result;
    846c:	e9dd 2300 	ldrd	r2, r3, [sp]
	if (int_result < 0) {
    8470:	2b00      	cmp	r3, #0
    8472:	da07      	bge.n	8484 <zcbor_int64_decode+0x4a>
		ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
    8474:	6863      	ldr	r3, [r4, #4]
    8476:	2205      	movs	r2, #5
    8478:	6023      	str	r3, [r4, #0]
    847a:	68a3      	ldr	r3, [r4, #8]
    847c:	3301      	adds	r3, #1
    847e:	60a3      	str	r3, [r4, #8]
    8480:	6963      	ldr	r3, [r4, #20]
    8482:	e7e8      	b.n	8456 <zcbor_int64_decode+0x1c>
	if (major_type == ZCBOR_MAJOR_TYPE_NINT) {
    8484:	2e01      	cmp	r6, #1
		*result = -1 - int_result;
    8486:	bf04      	itt	eq
    8488:	43d2      	mvneq	r2, r2
    848a:	43db      	mvneq	r3, r3
    848c:	e9c5 2300 	strd	r2, r3, [r5]
    8490:	e7e3      	b.n	845a <zcbor_int64_decode+0x20>

00008492 <zcbor_int32_decode>:
{
    8492:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8494:	460d      	mov	r5, r1
	if (zcbor_int64_decode(state, &result64)) {
    8496:	4669      	mov	r1, sp
{
    8498:	4604      	mov	r4, r0
	if (zcbor_int64_decode(state, &result64)) {
    849a:	f7ff ffce 	bl	843a <zcbor_int64_decode>
    849e:	b910      	cbnz	r0, 84a6 <zcbor_int32_decode+0x14>
			ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
    84a0:	2000      	movs	r0, #0
}
    84a2:	b003      	add	sp, #12
    84a4:	bd30      	pop	{r4, r5, pc}
		if (result64 > INT32_MAX) {
    84a6:	9b00      	ldr	r3, [sp, #0]
    84a8:	9a01      	ldr	r2, [sp, #4]
    84aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    84ae:	f172 0200 	sbcs.w	r2, r2, #0
    84b2:	db08      	blt.n	84c6 <zcbor_int32_decode+0x34>
    84b4:	2205      	movs	r2, #5
			ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
    84b6:	6863      	ldr	r3, [r4, #4]
    84b8:	6023      	str	r3, [r4, #0]
    84ba:	68a3      	ldr	r3, [r4, #8]
    84bc:	3301      	adds	r3, #1
    84be:	60a3      	str	r3, [r4, #8]
    84c0:	6963      	ldr	r3, [r4, #20]
    84c2:	60da      	str	r2, [r3, #12]
    84c4:	e7ec      	b.n	84a0 <zcbor_int32_decode+0xe>
		*result = (int32_t)result64;
    84c6:	602b      	str	r3, [r5, #0]
		return true;
    84c8:	e7eb      	b.n	84a2 <zcbor_int32_decode+0x10>

000084ca <zcbor_bstr_decode>:
	return str_decode(state, result, ZCBOR_MAJOR_TYPE_BSTR);
    84ca:	2202      	movs	r2, #2
    84cc:	f7ff bf7d 	b.w	83ca <str_decode>

000084d0 <zcbor_tstr_expect>:
	return str_expect(state, result, ZCBOR_MAJOR_TYPE_TSTR);
    84d0:	2203      	movs	r2, #3
    84d2:	f7ff bf93 	b.w	83fc <str_expect>

000084d6 <zcbor_map_start_decode>:
{
    84d6:	b510      	push	{r4, lr}
	bool ret = list_map_start_decode(state, ZCBOR_MAJOR_TYPE_MAP);
    84d8:	2105      	movs	r1, #5
{
    84da:	4604      	mov	r4, r0
	bool ret = list_map_start_decode(state, ZCBOR_MAJOR_TYPE_MAP);
    84dc:	f7ff ff27 	bl	832e <list_map_start_decode>
	if (ret && !state->indefinite_length_array) {
    84e0:	b168      	cbz	r0, 84fe <zcbor_map_start_decode+0x28>
    84e2:	7c23      	ldrb	r3, [r4, #16]
    84e4:	b963      	cbnz	r3, 8500 <zcbor_map_start_decode+0x2a>
		if (state->elem_count >= (ZCBOR_MAX_ELEM_COUNT / 2)) {
    84e6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    84ea:	68a3      	ldr	r3, [r4, #8]
    84ec:	4293      	cmp	r3, r2
    84ee:	d308      	bcc.n	8502 <zcbor_map_start_decode+0x2c>
			ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
    84f0:	6862      	ldr	r2, [r4, #4]
    84f2:	3301      	adds	r3, #1
    84f4:	6022      	str	r2, [r4, #0]
    84f6:	2205      	movs	r2, #5
    84f8:	60a3      	str	r3, [r4, #8]
    84fa:	6963      	ldr	r3, [r4, #20]
    84fc:	60da      	str	r2, [r3, #12]
    84fe:	2000      	movs	r0, #0
}
    8500:	bd10      	pop	{r4, pc}
		state->elem_count *= 2;
    8502:	005b      	lsls	r3, r3, #1
    8504:	60a3      	str	r3, [r4, #8]
    8506:	e7fb      	b.n	8500 <zcbor_map_start_decode+0x2a>

00008508 <zcbor_map_end_decode>:
{
	return list_map_end_decode(state);
}


bool zcbor_map_end_decode(zcbor_state_t *state)
    8508:	f7ff bf43 	b.w	8392 <list_map_end_decode>

0000850c <zcbor_list_map_end_force_decode>:
}


bool zcbor_list_map_end_force_decode(zcbor_state_t *state)
{
	if (!zcbor_process_backup(state,
    850c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8510:	2107      	movs	r1, #7
    8512:	f000 b8d4 	b.w	86be <zcbor_process_backup>

00008516 <zcbor_multi_decode>:
		uint_fast32_t *num_decode,
		zcbor_decoder_t decoder,
		zcbor_state_t *state,
		void *result,
		uint_fast32_t result_len)
{
    8516:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    851a:	4681      	mov	r9, r0
    851c:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
    8520:	4688      	mov	r8, r1
    8522:	4617      	mov	r7, r2
    8524:	469a      	mov	sl, r3
	ZCBOR_CHECK_ERROR();
	for (uint_fast32_t i = 0; i < max_decode; i++) {
    8526:	2400      	movs	r4, #0
    8528:	4544      	cmp	r4, r8
    852a:	d102      	bne.n	8532 <zcbor_multi_decode+0x1c>
			zcbor_print("Found %" PRIuFAST32 " elements.\r\n", i);
			return true;
		}
	}
	zcbor_print("Found %" PRIuFAST32 " elements.\r\n", max_decode);
	*num_decode = max_decode;
    852c:	603c      	str	r4, [r7, #0]
			return true;
    852e:	2001      	movs	r0, #1
    8530:	e013      	b.n	855a <zcbor_multi_decode+0x44>
		uint8_t const *payload_bak = state->payload;
    8532:	682b      	ldr	r3, [r5, #0]
		if (!decoder(state,
    8534:	4631      	mov	r1, r6
    8536:	4628      	mov	r0, r5
		uint8_t const *payload_bak = state->payload;
    8538:	9301      	str	r3, [sp, #4]
		uint_fast32_t elem_count_bak = state->elem_count;
    853a:	f8d5 b008 	ldr.w	fp, [r5, #8]
		if (!decoder(state,
    853e:	47d0      	blx	sl
    8540:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8542:	441e      	add	r6, r3
    8544:	9b01      	ldr	r3, [sp, #4]
    8546:	b958      	cbnz	r0, 8560 <zcbor_multi_decode+0x4a>
			ZCBOR_ERR_IF(i < min_decode, ZCBOR_ERR_ITERATIONS);
    8548:	454c      	cmp	r4, r9
			*num_decode = i;
    854a:	603c      	str	r4, [r7, #0]
			state->payload = payload_bak;
    854c:	602b      	str	r3, [r5, #0]
			state->elem_count = elem_count_bak;
    854e:	f8c5 b008 	str.w	fp, [r5, #8]
			ZCBOR_ERR_IF(i < min_decode, ZCBOR_ERR_ITERATIONS);
    8552:	d2ec      	bcs.n	852e <zcbor_multi_decode+0x18>
    8554:	220d      	movs	r2, #13
    8556:	696b      	ldr	r3, [r5, #20]
    8558:	60da      	str	r2, [r3, #12]
	return true;
}
    855a:	b003      	add	sp, #12
    855c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (uint_fast32_t i = 0; i < max_decode; i++) {
    8560:	3401      	adds	r4, #1
    8562:	e7e1      	b.n	8528 <zcbor_multi_decode+0x12>

00008564 <str_encode>:
}


static bool str_encode(zcbor_state_t *state,
		const struct zcbor_string *input, zcbor_major_type_t major_type)
{
    8564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (input->len > (state->payload_end - state->payload)) {
    8568:	f8d0 900c 	ldr.w	r9, [r0, #12]
    856c:	6805      	ldr	r5, [r0, #0]
    856e:	f8d1 a004 	ldr.w	sl, [r1, #4]
    8572:	eba9 0305 	sub.w	r3, r9, r5
    8576:	459a      	cmp	sl, r3
{
    8578:	4604      	mov	r4, r0
    857a:	460e      	mov	r6, r1
    857c:	4690      	mov	r8, r2
	if (input->len > (state->payload_end - state->payload)) {
    857e:	d906      	bls.n	858e <str_encode+0x2a>
    8580:	2208      	movs	r2, #8
    8582:	6963      	ldr	r3, [r4, #20]
    8584:	60da      	str	r2, [r3, #12]
		ZCBOR_ERR(ZCBOR_ERR_NO_PAYLOAD);
    8586:	2500      	movs	r5, #0
		 * because of bstrx_cbor_start_encode/bstrx_cbor_end_encode. */
		memmove(state->payload_mut, input->value, input->len);
	}
	state->payload += input->len;
	return true;
}
    8588:	4628      	mov	r0, r5
    858a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    858e:	460f      	mov	r7, r1
    8590:	f857 3b04 	ldr.w	r3, [r7], #4
    8594:	b143      	cbz	r3, 85a8 <str_encode+0x44>
    8596:	2104      	movs	r1, #4
    8598:	4638      	mov	r0, r7
    859a:	f7fa faa9 	bl	2af0 <get_result_len>
			+ 1 + input->len + (size_t)state->payload)
    859e:	4455      	add	r5, sl
    85a0:	3501      	adds	r5, #1
    85a2:	4405      	add	r5, r0
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    85a4:	45a9      	cmp	r9, r5
    85a6:	d3eb      	bcc.n	8580 <str_encode+0x1c>
	if (!value_encode(state, major_type, &input->len, sizeof(input->len))) {
    85a8:	2304      	movs	r3, #4
    85aa:	463a      	mov	r2, r7
    85ac:	4641      	mov	r1, r8
    85ae:	4620      	mov	r0, r4
    85b0:	f7fa fab8 	bl	2b24 <value_encode>
    85b4:	4605      	mov	r5, r0
    85b6:	2800      	cmp	r0, #0
    85b8:	d0e5      	beq.n	8586 <str_encode+0x22>
	if (state->payload_mut != input->value) {
    85ba:	6820      	ldr	r0, [r4, #0]
    85bc:	6831      	ldr	r1, [r6, #0]
    85be:	4288      	cmp	r0, r1
    85c0:	d002      	beq.n	85c8 <str_encode+0x64>
		memmove(state->payload_mut, input->value, input->len);
    85c2:	6872      	ldr	r2, [r6, #4]
    85c4:	f000 f905 	bl	87d2 <memmove>
	state->payload += input->len;
    85c8:	6823      	ldr	r3, [r4, #0]
    85ca:	6872      	ldr	r2, [r6, #4]
    85cc:	4413      	add	r3, r2
    85ce:	6023      	str	r3, [r4, #0]
	return true;
    85d0:	e7da      	b.n	8588 <str_encode+0x24>

000085d2 <zcbor_int64_put>:
{
    85d2:	b507      	push	{r0, r1, r2, lr}
    85d4:	e9cd 2300 	strd	r2, r3, [sp]
	if (input < 0) {
    85d8:	2b00      	cmp	r3, #0
{
    85da:	4611      	mov	r1, r2
		input = -1 - input;
    85dc:	bfbb      	ittet	lt
    85de:	43db      	mvnlt	r3, r3
    85e0:	43d1      	mvnlt	r1, r2
		major_type = ZCBOR_MAJOR_TYPE_PINT;
    85e2:	2100      	movge	r1, #0
		input = -1 - input;
    85e4:	e9cd 1300 	strdlt	r1, r3, [sp]
	if (!value_encode(state, major_type, &input, 8)) {
    85e8:	466a      	mov	r2, sp
		major_type = ZCBOR_MAJOR_TYPE_NINT;
    85ea:	bfb8      	it	lt
    85ec:	2101      	movlt	r1, #1
	if (!value_encode(state, major_type, &input, 8)) {
    85ee:	2308      	movs	r3, #8
    85f0:	f7fa fa98 	bl	2b24 <value_encode>
}
    85f4:	b003      	add	sp, #12
    85f6:	f85d fb04 	ldr.w	pc, [sp], #4

000085fa <zcbor_int32_put>:
{
    85fa:	460a      	mov	r2, r1
	return zcbor_int64_put(state, input);
    85fc:	17cb      	asrs	r3, r1, #31
    85fe:	f7ff bfe8 	b.w	85d2 <zcbor_int64_put>

00008602 <zcbor_uint32_put>:
{
    8602:	b507      	push	{r0, r1, r2, lr}
    8604:	460b      	mov	r3, r1
	return zcbor_uint64_put(state, input);
    8606:	2100      	movs	r1, #0
	if (!value_encode(state, major_type, input, 8)) {
    8608:	466a      	mov	r2, sp
	return zcbor_uint64_put(state, input);
    860a:	e9cd 3100 	strd	r3, r1, [sp]
	if (!value_encode(state, major_type, input, 8)) {
    860e:	2308      	movs	r3, #8
    8610:	f7fa fa88 	bl	2b24 <value_encode>
}
    8614:	b003      	add	sp, #12
    8616:	f85d fb04 	ldr.w	pc, [sp], #4

0000861a <zcbor_tstr_encode>:
}


bool zcbor_tstr_encode(zcbor_state_t *state, const struct zcbor_string *input)
{
	return str_encode(state, input, ZCBOR_MAJOR_TYPE_TSTR);
    861a:	2203      	movs	r2, #3
    861c:	f7ff bfa2 	b.w	8564 <str_encode>

00008620 <zcbor_list_start_encode>:
	ZCBOR_CHECK_PAYLOAD();
    8620:	6803      	ldr	r3, [r0, #0]
    8622:	68c2      	ldr	r2, [r0, #12]
    8624:	4293      	cmp	r3, r2
    8626:	d304      	bcc.n	8632 <zcbor_list_start_encode+0x12>
    8628:	2208      	movs	r2, #8
    862a:	6943      	ldr	r3, [r0, #20]
    862c:	2000      	movs	r0, #0
    862e:	60da      	str	r2, [r3, #12]
    8630:	4770      	bx	lr
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    8632:	1c5a      	adds	r2, r3, #1
    8634:	6002      	str	r2, [r0, #0]
    8636:	229f      	movs	r2, #159	; 0x9f
	return true;
    8638:	2001      	movs	r0, #1
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    863a:	701a      	strb	r2, [r3, #0]


bool zcbor_list_start_encode(zcbor_state_t *state, uint_fast32_t max_num)
{
	return list_map_start_encode(state, max_num, ZCBOR_MAJOR_TYPE_LIST);
}
    863c:	4770      	bx	lr

0000863e <zcbor_map_start_encode>:
	ZCBOR_CHECK_PAYLOAD();
    863e:	6803      	ldr	r3, [r0, #0]
    8640:	68c2      	ldr	r2, [r0, #12]
    8642:	4293      	cmp	r3, r2
    8644:	d304      	bcc.n	8650 <zcbor_map_start_encode+0x12>
    8646:	2208      	movs	r2, #8
    8648:	6943      	ldr	r3, [r0, #20]
    864a:	2000      	movs	r0, #0
    864c:	60da      	str	r2, [r3, #12]
    864e:	4770      	bx	lr
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    8650:	1c5a      	adds	r2, r3, #1
    8652:	6002      	str	r2, [r0, #0]
    8654:	22bf      	movs	r2, #191	; 0xbf
	return true;
    8656:	2001      	movs	r0, #1
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    8658:	701a      	strb	r2, [r3, #0]


bool zcbor_map_start_encode(zcbor_state_t *state, uint_fast32_t max_num)
{
	return list_map_start_encode(state, max_num, ZCBOR_MAJOR_TYPE_MAP);
}
    865a:	4770      	bx	lr

0000865c <zcbor_list_end_encode>:
	ZCBOR_CHECK_PAYLOAD();
    865c:	6803      	ldr	r3, [r0, #0]
    865e:	68c2      	ldr	r2, [r0, #12]
    8660:	4293      	cmp	r3, r2
    8662:	d304      	bcc.n	866e <zcbor_list_end_encode+0x12>
    8664:	2208      	movs	r2, #8
    8666:	6943      	ldr	r3, [r0, #20]
    8668:	2000      	movs	r0, #0
    866a:	60da      	str	r2, [r3, #12]
    866c:	4770      	bx	lr
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    866e:	1c5a      	adds	r2, r3, #1
    8670:	6002      	str	r2, [r0, #0]
    8672:	22ff      	movs	r2, #255	; 0xff
	return true;
    8674:	2001      	movs	r0, #1
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    8676:	701a      	strb	r2, [r3, #0]


bool zcbor_list_end_encode(zcbor_state_t *state, uint_fast32_t max_num)
{
	return list_map_end_encode(state, max_num, ZCBOR_MAJOR_TYPE_LIST);
}
    8678:	4770      	bx	lr

0000867a <zcbor_map_end_encode>:


bool zcbor_map_end_encode(zcbor_state_t *state, uint_fast32_t max_num)
    867a:	f7ff bfef 	b.w	865c <zcbor_list_end_encode>

0000867e <zcbor_new_encode_state>:


bool zcbor_new_encode_state(zcbor_state_t *state_array, uint_fast32_t n_states,
		uint8_t *payload, size_t payload_len, uint_fast32_t elem_count)
{
	return zcbor_new_state(state_array, n_states, payload, payload_len, elem_count);
    867e:	f000 b85c 	b.w	873a <zcbor_new_state>

00008682 <zcbor_new_backup>:

_Static_assert((sizeof(zcbor_state_t) >= sizeof(struct zcbor_state_constant)),
	"This code needs zcbor_state_t to be at least as large as zcbor_backups_t.");

bool zcbor_new_backup(zcbor_state_t *state, uint_fast32_t new_elem_count)
{
    8682:	b538      	push	{r3, r4, r5, lr}
	ZCBOR_CHECK_ERROR();

	if ((state->constant_state->current_backup)
    8684:	6943      	ldr	r3, [r0, #20]
{
    8686:	460d      	mov	r5, r1
	if ((state->constant_state->current_backup)
    8688:	e9d3 1201 	ldrd	r1, r2, [r3, #4]
    868c:	4291      	cmp	r1, r2
{
    868e:	4604      	mov	r4, r0
    8690:	f04f 0000 	mov.w	r0, #0
	if ((state->constant_state->current_backup)
    8694:	d302      	bcc.n	869c <zcbor_new_backup+0x1a>
    8696:	2201      	movs	r2, #1
    8698:	60da      	str	r2, [r3, #12]
		sizeof(zcbor_state_t));

	state->elem_count = new_elem_count;

	return true;
}
    869a:	bd38      	pop	{r3, r4, r5, pc}
	state->payload_moved = false;
    869c:	7460      	strb	r0, [r4, #17]
	(state->constant_state->current_backup)++;
    869e:	685a      	ldr	r2, [r3, #4]
	memcpy(&state->constant_state->backup_list[i], state,
    86a0:	4621      	mov	r1, r4
	(state->constant_state->current_backup)++;
    86a2:	3201      	adds	r2, #1
    86a4:	605a      	str	r2, [r3, #4]
	memcpy(&state->constant_state->backup_list[i], state,
    86a6:	2218      	movs	r2, #24
	uint_fast32_t i = (state->constant_state->current_backup) - 1;
    86a8:	6963      	ldr	r3, [r4, #20]
    86aa:	6858      	ldr	r0, [r3, #4]
	memcpy(&state->constant_state->backup_list[i], state,
    86ac:	681b      	ldr	r3, [r3, #0]
	uint_fast32_t i = (state->constant_state->current_backup) - 1;
    86ae:	3801      	subs	r0, #1
	memcpy(&state->constant_state->backup_list[i], state,
    86b0:	fb02 3000 	mla	r0, r2, r0, r3
    86b4:	f000 f8a4 	bl	8800 <memcpy>
	return true;
    86b8:	2001      	movs	r0, #1
	state->elem_count = new_elem_count;
    86ba:	60a5      	str	r5, [r4, #8]
	return true;
    86bc:	e7ed      	b.n	869a <zcbor_new_backup+0x18>

000086be <zcbor_process_backup>:


bool zcbor_process_backup(zcbor_state_t *state, uint32_t flags,
		uint_fast32_t max_elem_count)
{
    86be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    86c2:	4616      	mov	r6, r2
	const uint8_t *payload = state->payload;
	const uint_fast32_t elem_count = state->elem_count;

	ZCBOR_CHECK_ERROR();

	if (state->constant_state->current_backup == 0) {
    86c4:	6942      	ldr	r2, [r0, #20]
{
    86c6:	4604      	mov	r4, r0
	if (state->constant_state->current_backup == 0) {
    86c8:	6853      	ldr	r3, [r2, #4]
{
    86ca:	460d      	mov	r5, r1
	const uint8_t *payload = state->payload;
    86cc:	6807      	ldr	r7, [r0, #0]
	const uint_fast32_t elem_count = state->elem_count;
    86ce:	f8d0 8008 	ldr.w	r8, [r0, #8]
	if (state->constant_state->current_backup == 0) {
    86d2:	b923      	cbnz	r3, 86de <zcbor_process_backup+0x20>
    86d4:	2302      	movs	r3, #2
    86d6:	60d3      	str	r3, [r2, #12]
		zcbor_print("No backups available.\r\n");
		ZCBOR_ERR(ZCBOR_ERR_NO_BACKUP_ACTIVE);
    86d8:	2000      	movs	r0, #0
	if (flags & ZCBOR_FLAG_TRANSFER_PAYLOAD) {
		state->payload = payload;
	}

	return true;
}
    86da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (flags & ZCBOR_FLAG_RESTORE) {
    86de:	07e9      	lsls	r1, r5, #31
    86e0:	d50d      	bpl.n	86fe <zcbor_process_backup+0x40>
			if (state->constant_state->backup_list[i].payload_moved) {
    86e2:	6811      	ldr	r1, [r2, #0]
    86e4:	2218      	movs	r2, #24
		uint_fast32_t i = state->constant_state->current_backup - 1;
    86e6:	3b01      	subs	r3, #1
		if (!(flags & ZCBOR_FLAG_TRANSFER_PAYLOAD)) {
    86e8:	0768      	lsls	r0, r5, #29
			if (state->constant_state->backup_list[i].payload_moved) {
    86ea:	fb02 1103 	mla	r1, r2, r3, r1
		if (!(flags & ZCBOR_FLAG_TRANSFER_PAYLOAD)) {
    86ee:	d402      	bmi.n	86f6 <zcbor_process_backup+0x38>
			if (state->constant_state->backup_list[i].payload_moved) {
    86f0:	7c4b      	ldrb	r3, [r1, #17]
    86f2:	2b00      	cmp	r3, #0
    86f4:	d1f0      	bne.n	86d8 <zcbor_process_backup+0x1a>
		memcpy(state, &state->constant_state->backup_list[i],
    86f6:	2218      	movs	r2, #24
    86f8:	4620      	mov	r0, r4
    86fa:	f000 f881 	bl	8800 <memcpy>
	if (flags & ZCBOR_FLAG_CONSUME) {
    86fe:	07aa      	lsls	r2, r5, #30
		state->constant_state->current_backup--;
    8700:	bf41      	itttt	mi
    8702:	6962      	ldrmi	r2, [r4, #20]
    8704:	6853      	ldrmi	r3, [r2, #4]
    8706:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
    870a:	6053      	strmi	r3, [r2, #4]
	if (elem_count > max_elem_count) {
    870c:	45b0      	cmp	r8, r6
    870e:	d903      	bls.n	8718 <zcbor_process_backup+0x5a>
    8710:	2204      	movs	r2, #4
    8712:	6963      	ldr	r3, [r4, #20]
    8714:	60da      	str	r2, [r3, #12]
		ZCBOR_ERR(ZCBOR_ERR_HIGH_ELEM_COUNT);
    8716:	e7df      	b.n	86d8 <zcbor_process_backup+0x1a>
	if (flags & ZCBOR_FLAG_TRANSFER_PAYLOAD) {
    8718:	076b      	lsls	r3, r5, #29
    871a:	d401      	bmi.n	8720 <zcbor_process_backup+0x62>
	return true;
    871c:	2001      	movs	r0, #1
    871e:	e7dc      	b.n	86da <zcbor_process_backup+0x1c>
		state->payload = payload;
    8720:	6027      	str	r7, [r4, #0]
    8722:	e7fb      	b.n	871c <zcbor_process_backup+0x5e>

00008724 <zcbor_union_start_code>:
}


bool zcbor_union_start_code(zcbor_state_t *state)
{
	if (!zcbor_new_backup(state, state->elem_count)) {
    8724:	6881      	ldr	r1, [r0, #8]
    8726:	f7ff bfac 	b.w	8682 <zcbor_new_backup>

0000872a <zcbor_union_elem_code>:
}


bool zcbor_union_elem_code(zcbor_state_t *state)
{
	if (!zcbor_process_backup(state, ZCBOR_FLAG_RESTORE, state->elem_count)) {
    872a:	2101      	movs	r1, #1
    872c:	6882      	ldr	r2, [r0, #8]
    872e:	f7ff bfc6 	b.w	86be <zcbor_process_backup>

00008732 <zcbor_union_end_code>:
	return true;
}

bool zcbor_union_end_code(zcbor_state_t *state)
{
	if (!zcbor_process_backup(state, ZCBOR_FLAG_CONSUME, state->elem_count)) {
    8732:	2102      	movs	r1, #2
    8734:	6882      	ldr	r2, [r0, #8]
    8736:	f7ff bfc2 	b.w	86be <zcbor_process_backup>

0000873a <zcbor_new_state>:
	return true;
}

bool zcbor_new_state(zcbor_state_t *state_array, uint_fast32_t n_states,
		const uint8_t *payload, size_t payload_len, uint_fast32_t elem_count)
{
    873a:	b510      	push	{r4, lr}
	state_array[0].payload = payload;
    873c:	6002      	str	r2, [r0, #0]
	state_array[0].payload_end = payload + payload_len;
    873e:	441a      	add	r2, r3
	state_array[0].elem_count = elem_count;
    8740:	9b02      	ldr	r3, [sp, #8]
{
    8742:	4604      	mov	r4, r0
	state_array[0].payload_end = payload + payload_len;
    8744:	60c2      	str	r2, [r0, #12]
	state_array[0].elem_count = elem_count;
    8746:	6083      	str	r3, [r0, #8]
	state_array[0].indefinite_length_array = false;
    8748:	2000      	movs	r0, #0
	state_array[0].payload_moved = false;
	state_array[0].constant_state = NULL;

	if(n_states < 2) {
    874a:	2901      	cmp	r1, #1
	state_array[0].indefinite_length_array = false;
    874c:	8220      	strh	r0, [r4, #16]
	if(n_states < 2) {
    874e:	d801      	bhi.n	8754 <zcbor_new_state+0x1a>
	state_array[0].constant_state = NULL;
    8750:	6160      	str	r0, [r4, #20]
#endif
	if (n_states > 2) {
		state_array[0].constant_state->backup_list = &state_array[1];
	}
	return true;
}
    8752:	bd10      	pop	{r4, pc}
	state_array[0].constant_state = (struct zcbor_state_constant *)&state_array[n_states - 1];
    8754:	2318      	movs	r3, #24
    8756:	434b      	muls	r3, r1
    8758:	3b18      	subs	r3, #24
    875a:	18e2      	adds	r2, r4, r3
    875c:	6162      	str	r2, [r4, #20]
	state_array[0].constant_state->backup_list = NULL;
    875e:	50e0      	str	r0, [r4, r3]
	state_array[0].constant_state->num_backups = n_states - 2;
    8760:	6963      	ldr	r3, [r4, #20]
    8762:	1e8a      	subs	r2, r1, #2
    8764:	609a      	str	r2, [r3, #8]
	state_array[0].constant_state->current_backup = 0;
    8766:	6963      	ldr	r3, [r4, #20]
	if (n_states > 2) {
    8768:	2902      	cmp	r1, #2
	state_array[0].constant_state->current_backup = 0;
    876a:	6058      	str	r0, [r3, #4]
	state_array[0].constant_state->error = ZCBOR_SUCCESS;
    876c:	6963      	ldr	r3, [r4, #20]
    876e:	60d8      	str	r0, [r3, #12]
	if (n_states > 2) {
    8770:	d101      	bne.n	8776 <zcbor_new_state+0x3c>
	return true;
    8772:	2001      	movs	r0, #1
    8774:	e7ed      	b.n	8752 <zcbor_new_state+0x18>
		state_array[0].constant_state->backup_list = &state_array[1];
    8776:	6963      	ldr	r3, [r4, #20]
    8778:	3418      	adds	r4, #24
    877a:	601c      	str	r4, [r3, #0]
    877c:	e7f9      	b.n	8772 <zcbor_new_state+0x38>

0000877e <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    877e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    8780:	6800      	ldr	r0, [r0, #0]
    8782:	f7fa ba35 	b.w	2bf0 <z_arm_fatal_error>

00008786 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    8786:	2100      	movs	r1, #0
    8788:	2001      	movs	r0, #1
    878a:	f7fa ba31 	b.w	2bf0 <z_arm_fatal_error>

0000878e <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    878e:	b508      	push	{r3, lr}
	handler();
    8790:	f7fa fac6 	bl	2d20 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    8794:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    8798:	f7fa bbbe 	b.w	2f18 <z_arm_exc_exit>

0000879c <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    879c:	6e43      	ldr	r3, [r0, #100]	; 0x64
    879e:	f383 880b 	msr	PSPLIM, r3
}
    87a2:	4770      	bx	lr

000087a4 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    87a4:	4603      	mov	r3, r0
	size_t n = 0;
    87a6:	2000      	movs	r0, #0

	while (*s != '\0') {
    87a8:	5c1a      	ldrb	r2, [r3, r0]
    87aa:	b902      	cbnz	r2, 87ae <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    87ac:	4770      	bx	lr
		n++;
    87ae:	3001      	adds	r0, #1
    87b0:	e7fa      	b.n	87a8 <strlen+0x4>

000087b2 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    87b2:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    87b4:	b15a      	cbz	r2, 87ce <memcmp+0x1c>
    87b6:	3901      	subs	r1, #1
    87b8:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    87ba:	f810 2b01 	ldrb.w	r2, [r0], #1
    87be:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    87c2:	42a0      	cmp	r0, r4
    87c4:	d001      	beq.n	87ca <memcmp+0x18>
    87c6:	429a      	cmp	r2, r3
    87c8:	d0f7      	beq.n	87ba <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    87ca:	1ad0      	subs	r0, r2, r3
}
    87cc:	bd10      	pop	{r4, pc}
		return 0;
    87ce:	4610      	mov	r0, r2
    87d0:	e7fc      	b.n	87cc <memcmp+0x1a>

000087d2 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    87d2:	1a43      	subs	r3, r0, r1
    87d4:	4293      	cmp	r3, r2
{
    87d6:	b510      	push	{r4, lr}
    87d8:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    87dc:	d308      	bcc.n	87f0 <memmove+0x1e>
	char *dest = d;
    87de:	4602      	mov	r2, r0
    87e0:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    87e2:	429a      	cmp	r2, r3
    87e4:	d00b      	beq.n	87fe <memmove+0x2c>
			*dest = *src;
    87e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    87ea:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    87ee:	e7f8      	b.n	87e2 <memmove+0x10>
    87f0:	440a      	add	r2, r1
			dest[n] = src[n];
    87f2:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    87f6:	428a      	cmp	r2, r1
			dest[n] = src[n];
    87f8:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    87fc:	d1f9      	bne.n	87f2 <memmove+0x20>
		}
	}

	return d;
}
    87fe:	bd10      	pop	{r4, pc}

00008800 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    8800:	b510      	push	{r4, lr}
    8802:	1e43      	subs	r3, r0, #1
    8804:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    8806:	4291      	cmp	r1, r2
    8808:	d100      	bne.n	880c <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    880a:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    880c:	f811 4b01 	ldrb.w	r4, [r1], #1
    8810:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    8814:	e7f7      	b.n	8806 <memcpy+0x6>

00008816 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    8816:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    8818:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    881a:	4402      	add	r2, r0
    881c:	4293      	cmp	r3, r2
    881e:	d100      	bne.n	8822 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    8820:	4770      	bx	lr
		*(d_byte++) = c_byte;
    8822:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    8826:	e7f9      	b.n	881c <memset+0x6>

00008828 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
    8828:	684b      	ldr	r3, [r1, #4]
    882a:	2b01      	cmp	r3, #1
    882c:	dd07      	ble.n	883e <sprintf_out+0x16>
		*(p->ptr) = c;
    882e:	680b      	ldr	r3, [r1, #0]
    8830:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    8832:	680b      	ldr	r3, [r1, #0]
    8834:	3301      	adds	r3, #1
    8836:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    8838:	684b      	ldr	r3, [r1, #4]
    883a:	3b01      	subs	r3, #1
    883c:	604b      	str	r3, [r1, #4]
}
    883e:	2000      	movs	r0, #0
    8840:	4770      	bx	lr

00008842 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    8842:	220c      	movs	r2, #12
    8844:	6903      	ldr	r3, [r0, #16]
    8846:	b2c9      	uxtb	r1, r1
    8848:	fb01 3302 	mla	r3, r1, r2, r3
    884c:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    884e:	f000 0007 	and.w	r0, r0, #7
    8852:	4770      	bx	lr

00008854 <set_on_state>:
	__asm__ volatile(
    8854:	f04f 0320 	mov.w	r3, #32
    8858:	f3ef 8211 	mrs	r2, BASEPRI
    885c:	f383 8812 	msr	BASEPRI_MAX, r3
    8860:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    8864:	6803      	ldr	r3, [r0, #0]
    8866:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    886a:	f043 0302 	orr.w	r3, r3, #2
    886e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    8870:	f382 8811 	msr	BASEPRI, r2
    8874:	f3bf 8f6f 	isb	sy
}
    8878:	4770      	bx	lr

0000887a <stop>:
{
    887a:	b570      	push	{r4, r5, r6, lr}
    887c:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    887e:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    8880:	f04f 0420 	mov.w	r4, #32
    8884:	f3ef 8511 	mrs	r5, BASEPRI
    8888:	f384 8812 	msr	BASEPRI_MAX, r4
    888c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    8890:	260c      	movs	r6, #12
    8892:	fb06 3401 	mla	r4, r6, r1, r3
    8896:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    8898:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    889c:	d008      	beq.n	88b0 <stop+0x36>
    889e:	42a2      	cmp	r2, r4
    88a0:	d006      	beq.n	88b0 <stop+0x36>
	__asm__ volatile(
    88a2:	f385 8811 	msr	BASEPRI, r5
    88a6:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    88aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    88ae:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    88b0:	2201      	movs	r2, #1
    88b2:	4371      	muls	r1, r6
    88b4:	440b      	add	r3, r1
    88b6:	641a      	str	r2, [r3, #64]	; 0x40
    88b8:	f385 8811 	msr	BASEPRI, r5
    88bc:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    88c0:	6843      	ldr	r3, [r0, #4]
    88c2:	440b      	add	r3, r1
    88c4:	685b      	ldr	r3, [r3, #4]
    88c6:	4798      	blx	r3
	return 0;
    88c8:	2000      	movs	r0, #0
    88ca:	e7f0      	b.n	88ae <stop+0x34>

000088cc <api_stop>:
	return stop(dev, subsys, CTX_API);
    88cc:	2280      	movs	r2, #128	; 0x80
    88ce:	f7ff bfd4 	b.w	887a <stop>

000088d2 <async_start>:
{
    88d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    88d4:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    88d6:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    88d8:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    88da:	f04f 0520 	mov.w	r5, #32
    88de:	f3ef 8611 	mrs	r6, BASEPRI
    88e2:	f385 8812 	msr	BASEPRI_MAX, r5
    88e6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    88ea:	250c      	movs	r5, #12
    88ec:	4369      	muls	r1, r5
    88ee:	440c      	add	r4, r1
    88f0:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    88f2:	f005 0c07 	and.w	ip, r5, #7
    88f6:	f1bc 0f01 	cmp.w	ip, #1
    88fa:	d10b      	bne.n	8914 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    88fc:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    88fe:	f386 8811 	msr	BASEPRI, r6
    8902:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    8906:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    890a:	6843      	ldr	r3, [r0, #4]
    890c:	585b      	ldr	r3, [r3, r1]
    890e:	4798      	blx	r3
	return 0;
    8910:	2000      	movs	r0, #0
}
    8912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    8914:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    8918:	42af      	cmp	r7, r5
    891a:	f386 8811 	msr	BASEPRI, r6
    891e:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    8922:	bf0c      	ite	eq
    8924:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    8928:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    892c:	e7f1      	b.n	8912 <async_start+0x40>

0000892e <api_start>:
{
    892e:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    8930:	2480      	movs	r4, #128	; 0x80
    8932:	9400      	str	r4, [sp, #0]
    8934:	f7ff ffcd 	bl	88d2 <async_start>
}
    8938:	b002      	add	sp, #8
    893a:	bd10      	pop	{r4, pc}

0000893c <onoff_started_callback>:
{
    893c:	b410      	push	{r4}
	notify(mgr, 0);
    893e:	241c      	movs	r4, #28
	return &data->mgr[type];
    8940:	6900      	ldr	r0, [r0, #16]
    8942:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    8944:	fb03 0004 	mla	r0, r3, r4, r0
    8948:	2100      	movs	r1, #0
}
    894a:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
    894e:	4710      	bx	r2

00008950 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    8950:	2000      	movs	r0, #0
    8952:	f000 bbdb 	b.w	910c <nrfx_clock_start>

00008956 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    8956:	2000      	movs	r0, #0
    8958:	f000 bc18 	b.w	918c <nrfx_clock_stop>

0000895c <blocking_start_callback>:
{
    895c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    895e:	f7fc be03 	b.w	5568 <z_impl_k_sem_give>

00008962 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8962:	6843      	ldr	r3, [r0, #4]
}
    8964:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8966:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    8968:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    896a:	600b      	str	r3, [r1, #0]
}
    896c:	4770      	bx	lr

0000896e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    896e:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
    8970:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8974:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
    8976:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    897a:	6098      	str	r0, [r3, #8]
}
    897c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    897e:	60d9      	str	r1, [r3, #12]
    8980:	4770      	bx	lr

00008982 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8982:	6843      	ldr	r3, [r0, #4]
}
    8984:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8986:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    8988:	6099      	str	r1, [r3, #8]
}
    898a:	4770      	bx	lr

0000898c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    898c:	6843      	ldr	r3, [r0, #4]
}
    898e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8990:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    8992:	60d9      	str	r1, [r3, #12]
}
    8994:	4770      	bx	lr

00008996 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8996:	6843      	ldr	r3, [r0, #4]
    8998:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    899a:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    899c:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    89a0:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    89a2:	6090      	str	r0, [r2, #8]
}
    89a4:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    89a6:	60d3      	str	r3, [r2, #12]
    89a8:	4770      	bx	lr

000089aa <gpio_nrfx_manage_callback>:
{
    89aa:	b510      	push	{r4, lr}
	return port->data;
    89ac:	6903      	ldr	r3, [r0, #16]
	return list->head;
    89ae:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    89b0:	b1f8      	cbz	r0, 89f2 <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    89b2:	4288      	cmp	r0, r1
    89b4:	d119      	bne.n	89ea <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    89b6:	689c      	ldr	r4, [r3, #8]
	return node->next;
    89b8:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    89ba:	42a1      	cmp	r1, r4
	list->head = node;
    89bc:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    89be:	d100      	bne.n	89c2 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    89c0:	6098      	str	r0, [r3, #8]
	parent->next = child;
    89c2:	2000      	movs	r0, #0
    89c4:	6008      	str	r0, [r1, #0]
	if (set) {
    89c6:	b12a      	cbz	r2, 89d4 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    89c8:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    89ca:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    89cc:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    89ce:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    89d0:	b902      	cbnz	r2, 89d4 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    89d2:	6099      	str	r1, [r3, #8]
	return 0;
    89d4:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    89d6:	e010      	b.n	89fa <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    89d8:	4281      	cmp	r1, r0
    89da:	d106      	bne.n	89ea <gpio_nrfx_manage_callback+0x40>
	return node->next;
    89dc:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    89de:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    89e0:	6898      	ldr	r0, [r3, #8]
    89e2:	4281      	cmp	r1, r0
    89e4:	d1ed      	bne.n	89c2 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    89e6:	609c      	str	r4, [r3, #8]
}
    89e8:	e7eb      	b.n	89c2 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    89ea:	4604      	mov	r4, r0
    89ec:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    89ee:	2800      	cmp	r0, #0
    89f0:	d1f2      	bne.n	89d8 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    89f2:	2a00      	cmp	r2, #0
    89f4:	d1e8      	bne.n	89c8 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    89f6:	f06f 0015 	mvn.w	r0, #21
}
    89fa:	bd10      	pop	{r4, pc}

000089fc <gpio_pin_set_dt>:
{
    89fc:	4603      	mov	r3, r0
    89fe:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    8a00:	7919      	ldrb	r1, [r3, #4]
    8a02:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
    8a04:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    8a06:	fa03 f101 	lsl.w	r1, r3, r1
    8a0a:	6903      	ldr	r3, [r0, #16]
    8a0c:	681b      	ldr	r3, [r3, #0]
    8a0e:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    8a10:	bf18      	it	ne
    8a12:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    8a16:	b112      	cbz	r2, 8a1e <gpio_pin_set_dt+0x22>
	return api->port_set_bits_raw(port, pins);
    8a18:	6883      	ldr	r3, [r0, #8]
    8a1a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    8a1c:	4718      	bx	r3
    8a1e:	6883      	ldr	r3, [r0, #8]
    8a20:	691b      	ldr	r3, [r3, #16]
    8a22:	e7fb      	b.n	8a1c <gpio_pin_set_dt+0x20>

00008a24 <disable_sync>:
{
    8a24:	b530      	push	{r4, r5, lr}
	int rc = onoff_sync_lock(&data->srv, &key);
    8a26:	6904      	ldr	r4, [r0, #16]
{
    8a28:	b085      	sub	sp, #20
	const struct driver_config *cfg = dev->config;
    8a2a:	6845      	ldr	r5, [r0, #4]
	int rc = onoff_sync_lock(&data->srv, &key);
    8a2c:	a903      	add	r1, sp, #12
    8a2e:	4620      	mov	r0, r4
    8a30:	f7ff fb28 	bl	8084 <onoff_sync_lock>
	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    8a34:	7d29      	ldrb	r1, [r5, #20]
	int rc = onoff_sync_lock(&data->srv, &key);
    8a36:	4603      	mov	r3, r0
	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    8a38:	f011 0101 	ands.w	r1, r1, #1
    8a3c:	d114      	bne.n	8a68 <disable_sync+0x44>
	} else if (rc == 1) {
    8a3e:	2801      	cmp	r0, #1
    8a40:	d10c      	bne.n	8a5c <disable_sync+0x38>
		rc = gpio_pin_set_dt(&cfg->enable, false);
    8a42:	f105 000c 	add.w	r0, r5, #12
    8a46:	f7ff ffd9 	bl	89fc <gpio_pin_set_dt>
    8a4a:	4603      	mov	r3, r0
	return onoff_sync_finalize(&data->srv, key, NULL, rc, false);
    8a4c:	2200      	movs	r2, #0
    8a4e:	4620      	mov	r0, r4
    8a50:	9903      	ldr	r1, [sp, #12]
    8a52:	9200      	str	r2, [sp, #0]
    8a54:	f7ff fb21 	bl	809a <onoff_sync_finalize>
}
    8a58:	b005      	add	sp, #20
    8a5a:	bd30      	pop	{r4, r5, pc}
		rc = -EINVAL;
    8a5c:	2800      	cmp	r0, #0
    8a5e:	bf14      	ite	ne
    8a60:	4603      	movne	r3, r0
    8a62:	f06f 0315 	mvneq.w	r3, #21
    8a66:	e7f1      	b.n	8a4c <disable_sync+0x28>
		rc = 0;
    8a68:	2300      	movs	r3, #0
    8a6a:	e7ef      	b.n	8a4c <disable_sync+0x28>

00008a6c <enable_sync>:
{
    8a6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc = onoff_sync_lock(&data->srv, &key);
    8a6e:	6905      	ldr	r5, [r0, #16]
	const struct driver_config *cfg = dev->config;
    8a70:	6846      	ldr	r6, [r0, #4]
{
    8a72:	460c      	mov	r4, r1
	int rc = onoff_sync_lock(&data->srv, &key);
    8a74:	4628      	mov	r0, r5
    8a76:	a903      	add	r1, sp, #12
    8a78:	f7ff fb04 	bl	8084 <onoff_sync_lock>
	if ((rc == 0)
    8a7c:	4603      	mov	r3, r0
    8a7e:	b940      	cbnz	r0, 8a92 <enable_sync+0x26>
	    && ((cfg->options & OPTION_ALWAYS_ON) == 0)) {
    8a80:	7d32      	ldrb	r2, [r6, #20]
    8a82:	07d2      	lsls	r2, r2, #31
    8a84:	d405      	bmi.n	8a92 <enable_sync+0x26>
		rc = gpio_pin_set_dt(&cfg->enable, true);
    8a86:	2101      	movs	r1, #1
    8a88:	f106 000c 	add.w	r0, r6, #12
    8a8c:	f7ff ffb6 	bl	89fc <gpio_pin_set_dt>
    8a90:	4603      	mov	r3, r0
	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
    8a92:	2201      	movs	r2, #1
    8a94:	4628      	mov	r0, r5
    8a96:	9200      	str	r2, [sp, #0]
    8a98:	9903      	ldr	r1, [sp, #12]
    8a9a:	4622      	mov	r2, r4
    8a9c:	f7ff fafd 	bl	809a <onoff_sync_finalize>
}
    8aa0:	b004      	add	sp, #16
    8aa2:	bd70      	pop	{r4, r5, r6, pc}

00008aa4 <is_regular_addr_valid>:
{
    8aa4:	b538      	push	{r3, r4, r5, lr}
    8aa6:	4605      	mov	r5, r0
    8aa8:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
    8aaa:	f000 fb71 	bl	9190 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
    8aae:	2d00      	cmp	r5, #0
    8ab0:	db07      	blt.n	8ac2 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
    8ab2:	42a8      	cmp	r0, r5
    8ab4:	d905      	bls.n	8ac2 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
    8ab6:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
    8ab8:	4284      	cmp	r4, r0
    8aba:	bf8c      	ite	hi
    8abc:	2000      	movhi	r0, #0
    8abe:	2001      	movls	r0, #1
}
    8ac0:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
    8ac2:	2000      	movs	r0, #0
    8ac4:	e7fc      	b.n	8ac0 <is_regular_addr_valid+0x1c>

00008ac6 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
    8ac6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8aca:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
    8acc:	2300      	movs	r3, #0
{
    8ace:	4690      	mov	r8, r2
	const struct flash_driver_api *api = dev->api;
    8ad0:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
    8ad2:	6023      	str	r3, [r4, #0]
	info->index = 0U;
    8ad4:	60a3      	str	r3, [r4, #8]
{
    8ad6:	460d      	mov	r5, r1

	api->page_layout(dev, &layout, &layout_size);
    8ad8:	6913      	ldr	r3, [r2, #16]
    8ada:	4669      	mov	r1, sp
    8adc:	aa01      	add	r2, sp, #4
    8ade:	4798      	blx	r3

	while (layout_size--) {
    8ae0:	9b01      	ldr	r3, [sp, #4]
    8ae2:	1e5a      	subs	r2, r3, #1
    8ae4:	9201      	str	r2, [sp, #4]
    8ae6:	b923      	cbnz	r3, 8af2 <flash_get_page_info+0x2c>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
    8ae8:	f06f 0015 	mvn.w	r0, #21
}
    8aec:	b002      	add	sp, #8
    8aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info->size = layout->pages_size;
    8af2:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
    8af4:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
    8af6:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
    8af8:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
    8afa:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
    8afc:	b985      	cbnz	r5, 8b20 <flash_get_page_info+0x5a>
			index_jmp = index - info->index;
    8afe:	eba8 0302 	sub.w	r3, r8, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
    8b02:	6806      	ldr	r6, [r0, #0]
    8b04:	42b3      	cmp	r3, r6
    8b06:	bf28      	it	cs
    8b08:	4633      	movcs	r3, r6
		info->start_offset += (index_jmp * info->size);
    8b0a:	fb03 1107 	mla	r1, r3, r7, r1
		info->index += index_jmp;
    8b0e:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
    8b10:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
    8b12:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
    8b14:	6802      	ldr	r2, [r0, #0]
    8b16:	429a      	cmp	r2, r3
    8b18:	d806      	bhi.n	8b28 <flash_get_page_info+0x62>
		layout++;
    8b1a:	3008      	adds	r0, #8
    8b1c:	9000      	str	r0, [sp, #0]
    8b1e:	e7df      	b.n	8ae0 <flash_get_page_info+0x1a>
			index_jmp = (offs - info->start_offset) / info->size;
    8b20:	1a6b      	subs	r3, r5, r1
    8b22:	fbb3 f3f7 	udiv	r3, r3, r7
    8b26:	e7ec      	b.n	8b02 <flash_get_page_info+0x3c>
			return 0;
    8b28:	2000      	movs	r0, #0
    8b2a:	e7df      	b.n	8aec <flash_get_page_info+0x26>

00008b2c <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
    8b2c:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
    8b2e:	2200      	movs	r2, #0
    8b30:	f7ff bfc9 	b.w	8ac6 <flash_get_page_info>

00008b34 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    8b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
    8b38:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
    8b3a:	6883      	ldr	r3, [r0, #8]
{
    8b3c:	b086      	sub	sp, #24
    8b3e:	4688      	mov	r8, r1
    8b40:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    8b42:	691b      	ldr	r3, [r3, #16]
    8b44:	aa02      	add	r2, sp, #8
    8b46:	a901      	add	r1, sp, #4
    8b48:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
    8b4a:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    8b4c:	4625      	mov	r5, r4
    8b4e:	9b02      	ldr	r3, [sp, #8]
    8b50:	42ab      	cmp	r3, r5
    8b52:	d802      	bhi.n	8b5a <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    8b54:	b006      	add	sp, #24
    8b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
    8b5a:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
    8b5c:	9f01      	ldr	r7, [sp, #4]
    8b5e:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
    8b62:	687b      	ldr	r3, [r7, #4]
    8b64:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    8b66:	683a      	ldr	r2, [r7, #0]
    8b68:	eb0a 0306 	add.w	r3, sl, r6
    8b6c:	42b2      	cmp	r2, r6
    8b6e:	d802      	bhi.n	8b76 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    8b70:	469a      	mov	sl, r3
    8b72:	3501      	adds	r5, #1
    8b74:	e7eb      	b.n	8b4e <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
    8b76:	4649      	mov	r1, r9
			page_info.start_offset = off;
    8b78:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    8b7a:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    8b7c:	a803      	add	r0, sp, #12
    8b7e:	47c0      	blx	r8
    8b80:	2800      	cmp	r0, #0
    8b82:	d0e7      	beq.n	8b54 <flash_page_foreach+0x20>
			off += page_info.size;
    8b84:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    8b86:	3601      	adds	r6, #1
			off += page_info.size;
    8b88:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    8b8a:	e7ec      	b.n	8b66 <flash_page_foreach+0x32>

00008b8c <uarte_nrfx_config_get>:
{
    8b8c:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
    8b8e:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
    8b90:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    8b94:	e883 0003 	stmia.w	r3, {r0, r1}
}
    8b98:	2000      	movs	r0, #0
    8b9a:	4770      	bx	lr

00008b9c <uarte_nrfx_err_check>:
	return config->uarte_regs;
    8b9c:	6843      	ldr	r3, [r0, #4]
    8b9e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    8ba0:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    8ba4:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    8ba8:	4770      	bx	lr

00008baa <tx_start>:
{
    8baa:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    8bac:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    8bae:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    8bb0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    8bb4:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8bb8:	2200      	movs	r2, #0
    8bba:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    8bbe:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    8bc2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    8bc6:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    8bca:	6862      	ldr	r2, [r4, #4]
    8bcc:	06d2      	lsls	r2, r2, #27
    8bce:	d508      	bpl.n	8be2 <tx_start+0x38>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    8bd0:	2108      	movs	r1, #8
	return config->uarte_regs;
    8bd2:	6842      	ldr	r2, [r0, #4]
    8bd4:	6812      	ldr	r2, [r2, #0]
    8bd6:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    8bda:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    8bde:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8be2:	2201      	movs	r2, #1
    8be4:	609a      	str	r2, [r3, #8]
}
    8be6:	bd10      	pop	{r4, pc}

00008be8 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    8be8:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    8bea:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    8bec:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8bee:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    8bf2:	b150      	cbz	r0, 8c0a <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8bf4:	2000      	movs	r0, #0
	*c = *data->rx_data;
    8bf6:	6992      	ldr	r2, [r2, #24]
    8bf8:	7812      	ldrb	r2, [r2, #0]
    8bfa:	700a      	strb	r2, [r1, #0]
    8bfc:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    8c00:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8c04:	2201      	movs	r2, #1
    8c06:	601a      	str	r2, [r3, #0]
	return 0;
    8c08:	4770      	bx	lr
		return -1;
    8c0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    8c0e:	4770      	bx	lr

00008c10 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    8c10:	2a00      	cmp	r2, #0
{
    8c12:	b510      	push	{r4, lr}
    8c14:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    8c16:	dd10      	ble.n	8c3a <uarte_nrfx_fifo_read+0x2a>
	return config->uarte_regs;
    8c18:	6843      	ldr	r3, [r0, #4]
    8c1a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8c1c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    8c20:	b150      	cbz	r0, 8c38 <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8c22:	2000      	movs	r0, #0
	const struct uarte_nrfx_data *data = dev->data;
    8c24:	6922      	ldr	r2, [r4, #16]
    8c26:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    8c2a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8c2e:	2001      	movs	r0, #1
		rx_data[num_rx++] = *data->rx_data;
    8c30:	6992      	ldr	r2, [r2, #24]
    8c32:	7812      	ldrb	r2, [r2, #0]
    8c34:	700a      	strb	r2, [r1, #0]
    8c36:	6018      	str	r0, [r3, #0]
}
    8c38:	bd10      	pop	{r4, pc}
	int num_rx = 0;
    8c3a:	2000      	movs	r0, #0
    8c3c:	e7fc      	b.n	8c38 <uarte_nrfx_fifo_read+0x28>

00008c3e <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    8c3e:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    8c40:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
    8c42:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    8c44:	f04f 0020 	mov.w	r0, #32
    8c48:	f3ef 8311 	mrs	r3, BASEPRI
    8c4c:	f380 8812 	msr	BASEPRI_MAX, r0
    8c50:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    8c54:	2000      	movs	r0, #0
    8c56:	68c9      	ldr	r1, [r1, #12]
    8c58:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    8c5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    8c5e:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    8c62:	f383 8811 	msr	BASEPRI, r3
    8c66:	f3bf 8f6f 	isb	sy
}
    8c6a:	4770      	bx	lr

00008c6c <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    8c6c:	2201      	movs	r2, #1
    8c6e:	6903      	ldr	r3, [r0, #16]
    8c70:	68db      	ldr	r3, [r3, #12]
    8c72:	739a      	strb	r2, [r3, #14]
}
    8c74:	4770      	bx	lr

00008c76 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    8c76:	6903      	ldr	r3, [r0, #16]
    8c78:	68db      	ldr	r3, [r3, #12]
    8c7a:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    8c7c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    8c80:	b962      	cbnz	r2, 8c9c <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    8c82:	6842      	ldr	r2, [r0, #4]
    8c84:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8c86:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    8c8a:	b140      	cbz	r0, 8c9e <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    8c8c:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    8c90:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    8c94:	d003      	beq.n	8c9e <uarte_nrfx_irq_tx_ready_complete+0x28>
    8c96:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
    8c98:	6119      	str	r1, [r3, #16]
    8c9a:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    8c9c:	2000      	movs	r0, #0
}
    8c9e:	4770      	bx	lr

00008ca0 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    8ca0:	6843      	ldr	r3, [r0, #4]
    8ca2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8ca4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    8ca8:	3800      	subs	r0, #0
    8caa:	bf18      	it	ne
    8cac:	2001      	movne	r0, #1
    8cae:	4770      	bx	lr

00008cb0 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
    8cb0:	2210      	movs	r2, #16
	return config->uarte_regs;
    8cb2:	6843      	ldr	r3, [r0, #4]
    8cb4:	681b      	ldr	r3, [r3, #0]
    8cb6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    8cba:	4770      	bx	lr

00008cbc <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
    8cbc:	2210      	movs	r2, #16
	return config->uarte_regs;
    8cbe:	6843      	ldr	r3, [r0, #4]
    8cc0:	681b      	ldr	r3, [r3, #0]
    8cc2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    8cc6:	4770      	bx	lr

00008cc8 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
    8cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
    8ccc:	6843      	ldr	r3, [r0, #4]
    8cce:	681b      	ldr	r3, [r3, #0]
    8cd0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    8cd4:	4770      	bx	lr

00008cd6 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
    8cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
    8cda:	6843      	ldr	r3, [r0, #4]
    8cdc:	681b      	ldr	r3, [r3, #0]
    8cde:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    8ce2:	4770      	bx	lr

00008ce4 <uarte_nrfx_irq_is_pending>:
{
    8ce4:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    8ce6:	6843      	ldr	r3, [r0, #4]
{
    8ce8:	4604      	mov	r4, r0
	return config->uarte_regs;
    8cea:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    8cec:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    8cf0:	025b      	lsls	r3, r3, #9
    8cf2:	d405      	bmi.n	8d00 <uarte_nrfx_irq_is_pending+0x1c>
    8cf4:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    8cf8:	f010 0010 	ands.w	r0, r0, #16
    8cfc:	d106      	bne.n	8d0c <uarte_nrfx_irq_is_pending+0x28>
}
    8cfe:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    8d00:	f7ff ffb9 	bl	8c76 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    8d04:	2800      	cmp	r0, #0
    8d06:	d0f5      	beq.n	8cf4 <uarte_nrfx_irq_is_pending+0x10>
		||
    8d08:	2001      	movs	r0, #1
    8d0a:	e7f8      	b.n	8cfe <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    8d0c:	4620      	mov	r0, r4
    8d0e:	f7ff ffc7 	bl	8ca0 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    8d12:	3800      	subs	r0, #0
    8d14:	bf18      	it	ne
    8d16:	2001      	movne	r0, #1
    8d18:	e7f1      	b.n	8cfe <uarte_nrfx_irq_is_pending+0x1a>

00008d1a <uarte_nrfx_irq_update>:
}
    8d1a:	2001      	movs	r0, #1
    8d1c:	4770      	bx	lr

00008d1e <uarte_nrfx_irq_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
    8d1e:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
    8d20:	68d8      	ldr	r0, [r3, #12]
    8d22:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
    8d24:	68db      	ldr	r3, [r3, #12]
    8d26:	605a      	str	r2, [r3, #4]
}
    8d28:	4770      	bx	lr

00008d2a <is_tx_ready.isra.0>:
	return config->uarte_regs;
    8d2a:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    8d2c:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8d2e:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    8d32:	b940      	cbnz	r0, 8d46 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    8d34:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    8d36:	079b      	lsls	r3, r3, #30
    8d38:	d406      	bmi.n	8d48 <is_tx_ready.isra.0+0x1e>
    8d3a:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    8d3e:	3800      	subs	r0, #0
    8d40:	bf18      	it	ne
    8d42:	2001      	movne	r0, #1
    8d44:	4770      	bx	lr
    8d46:	2001      	movs	r0, #1
}
    8d48:	4770      	bx	lr

00008d4a <uarte_nrfx_fifo_fill>:
{
    8d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    8d4c:	6906      	ldr	r6, [r0, #16]
{
    8d4e:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
    8d50:	68f3      	ldr	r3, [r6, #12]
    8d52:	899c      	ldrh	r4, [r3, #12]
    8d54:	3310      	adds	r3, #16
    8d56:	4294      	cmp	r4, r2
    8d58:	bfa8      	it	ge
    8d5a:	4614      	movge	r4, r2
    8d5c:	2201      	movs	r2, #1
    8d5e:	e8d3 0fef 	ldaex	r0, [r3]
    8d62:	2800      	cmp	r0, #0
    8d64:	d103      	bne.n	8d6e <uarte_nrfx_fifo_fill+0x24>
    8d66:	e8c3 2fe7 	stlex	r7, r2, [r3]
    8d6a:	2f00      	cmp	r7, #0
    8d6c:	d1f7      	bne.n	8d5e <uarte_nrfx_fifo_fill+0x14>
    8d6e:	bf0c      	ite	eq
    8d70:	4613      	moveq	r3, r2
    8d72:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    8d74:	d11f      	bne.n	8db6 <uarte_nrfx_fifo_fill+0x6c>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
    8d76:	68f3      	ldr	r3, [r6, #12]
    8d78:	4622      	mov	r2, r4
    8d7a:	6898      	ldr	r0, [r3, #8]
    8d7c:	f7ff fd40 	bl	8800 <memcpy>
	__asm__ volatile(
    8d80:	f04f 0320 	mov.w	r3, #32
    8d84:	f3ef 8711 	mrs	r7, BASEPRI
    8d88:	f383 8812 	msr	BASEPRI_MAX, r3
    8d8c:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    8d90:	6868      	ldr	r0, [r5, #4]
    8d92:	f7ff ffca 	bl	8d2a <is_tx_ready.isra.0>
    8d96:	68f3      	ldr	r3, [r6, #12]
    8d98:	b938      	cbnz	r0, 8daa <uarte_nrfx_fifo_fill+0x60>
		len = 0;
    8d9a:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
    8d9c:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
    8d9e:	f387 8811 	msr	BASEPRI, r7
    8da2:	f3bf 8f6f 	isb	sy
}
    8da6:	4620      	mov	r0, r4
    8da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
    8daa:	4622      	mov	r2, r4
    8dac:	4628      	mov	r0, r5
    8dae:	6899      	ldr	r1, [r3, #8]
    8db0:	f7ff fefb 	bl	8baa <tx_start>
    8db4:	e7f3      	b.n	8d9e <uarte_nrfx_fifo_fill+0x54>
		return 0;
    8db6:	461c      	mov	r4, r3
    8db8:	e7f5      	b.n	8da6 <uarte_nrfx_fifo_fill+0x5c>

00008dba <uarte_nrfx_isr_int>:
{
    8dba:	b410      	push	{r4}
	const struct uarte_nrfx_config *config = dev->config;
    8dbc:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    8dbe:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    8dc0:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    8dc4:	05c9      	lsls	r1, r1, #23
    8dc6:	d518      	bpl.n	8dfa <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8dc8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    8dcc:	b1a9      	cbz	r1, 8dfa <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    8dce:	f04f 0420 	mov.w	r4, #32
    8dd2:	f3ef 8111 	mrs	r1, BASEPRI
    8dd6:	f384 8812 	msr	BASEPRI_MAX, r4
    8dda:	f3bf 8f6f 	isb	sy
    8dde:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    8de2:	b134      	cbz	r4, 8df2 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8de4:	2400      	movs	r4, #0
    8de6:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
    8dea:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8dee:	2401      	movs	r4, #1
    8df0:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
    8df2:	f381 8811 	msr	BASEPRI, r1
    8df6:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    8dfa:	6852      	ldr	r2, [r2, #4]
    8dfc:	06d2      	lsls	r2, r2, #27
    8dfe:	d51a      	bpl.n	8e36 <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
    8e00:	f04f 0220 	mov.w	r2, #32
    8e04:	f3ef 8111 	mrs	r1, BASEPRI
    8e08:	f382 8812 	msr	BASEPRI_MAX, r2
    8e0c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8e10:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    8e14:	b112      	cbz	r2, 8e1c <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    8e16:	2200      	movs	r2, #0
    8e18:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    8e1c:	6902      	ldr	r2, [r0, #16]
    8e1e:	68d2      	ldr	r2, [r2, #12]
    8e20:	b10a      	cbz	r2, 8e26 <uarte_nrfx_isr_int+0x6c>
    8e22:	6912      	ldr	r2, [r2, #16]
    8e24:	b91a      	cbnz	r2, 8e2e <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
    8e26:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    8e2a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
    8e2e:	f381 8811 	msr	BASEPRI, r1
    8e32:	f3bf 8f6f 	isb	sy
	struct uarte_nrfx_data *data = dev->data;
    8e36:	6902      	ldr	r2, [r0, #16]
	if (!data->int_driven) {
    8e38:	68d4      	ldr	r4, [r2, #12]
    8e3a:	b16c      	cbz	r4, 8e58 <uarte_nrfx_isr_int+0x9e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8e3c:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    8e40:	b169      	cbz	r1, 8e5e <uarte_nrfx_isr_int+0xa4>
		data->int_driven->fifo_fill_lock = 0;
    8e42:	2100      	movs	r1, #0
    8e44:	6121      	str	r1, [r4, #16]
		if (data->int_driven->disable_tx_irq) {
    8e46:	68d4      	ldr	r4, [r2, #12]
    8e48:	7ba4      	ldrb	r4, [r4, #14]
    8e4a:	b144      	cbz	r4, 8e5e <uarte_nrfx_isr_int+0xa4>
    p_reg->INTENCLR = mask;
    8e4c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    8e50:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    8e54:	68d3      	ldr	r3, [r2, #12]
    8e56:	7399      	strb	r1, [r3, #14]
}
    8e58:	f85d 4b04 	ldr.w	r4, [sp], #4
    8e5c:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8e5e:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    8e62:	b121      	cbz	r1, 8e6e <uarte_nrfx_isr_int+0xb4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8e64:	2100      	movs	r1, #0
    8e66:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    8e6a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    8e6e:	68d2      	ldr	r2, [r2, #12]
    8e70:	6813      	ldr	r3, [r2, #0]
    8e72:	2b00      	cmp	r3, #0
    8e74:	d0f0      	beq.n	8e58 <uarte_nrfx_isr_int+0x9e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    8e76:	6851      	ldr	r1, [r2, #4]
}
    8e78:	f85d 4b04 	ldr.w	r4, [sp], #4
		data->int_driven->cb(dev, data->int_driven->cb_data);
    8e7c:	4718      	bx	r3

00008e7e <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    8e7e:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
	while (*state <= &config->states[config->state_cnt - 1U]) {
    8e80:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
    8e84:	6843      	ldr	r3, [r0, #4]
    8e86:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    8e88:	7a05      	ldrb	r5, [r0, #8]
    8e8a:	6844      	ldr	r4, [r0, #4]
    8e8c:	4435      	add	r5, r6
    8e8e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    8e92:	42a3      	cmp	r3, r4
    8e94:	d902      	bls.n	8e9c <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
    8e96:	f06f 0001 	mvn.w	r0, #1
}
    8e9a:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
    8e9c:	795c      	ldrb	r4, [r3, #5]
    8e9e:	428c      	cmp	r4, r1
    8ea0:	d001      	beq.n	8ea6 <pinctrl_lookup_state+0x28>
		(*state)++;
    8ea2:	3308      	adds	r3, #8
    8ea4:	e7ef      	b.n	8e86 <pinctrl_lookup_state+0x8>
			return 0;
    8ea6:	2000      	movs	r0, #0
    8ea8:	e7f7      	b.n	8e9a <pinctrl_lookup_state+0x1c>

00008eaa <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    8eaa:	f7fd b84f 	b.w	5f4c <nrf_cc3xx_platform_init_no_rng>

00008eae <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    8eae:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    8eb0:	f7f9 f804 	bl	1ebc <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    8eb4:	f7f9 f8d0 	bl	2058 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    8eb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    8ebc:	f7fd b846 	b.w	5f4c <nrf_cc3xx_platform_init_no_rng>

00008ec0 <boot_swap_info_off>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    8ec0:	6880      	ldr	r0, [r0, #8]
    8ec2:	3818      	subs	r0, #24
    8ec4:	f020 0007 	bic.w	r0, r0, #7
}
    8ec8:	3810      	subs	r0, #16
    8eca:	4770      	bx	lr

00008ecc <boot_magic_compatible_check>:
    switch (tbl_val) {
    8ecc:	2804      	cmp	r0, #4
    8ece:	d009      	beq.n	8ee4 <boot_magic_compatible_check+0x18>
    8ed0:	2805      	cmp	r0, #5
    8ed2:	d103      	bne.n	8edc <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    8ed4:	1e48      	subs	r0, r1, #1
    8ed6:	bf18      	it	ne
    8ed8:	2001      	movne	r0, #1
    8eda:	4770      	bx	lr
        return tbl_val == val;
    8edc:	1a43      	subs	r3, r0, r1
    8ede:	4258      	negs	r0, r3
    8ee0:	4158      	adcs	r0, r3
    8ee2:	4770      	bx	lr
    switch (tbl_val) {
    8ee4:	2001      	movs	r0, #1
}
    8ee6:	4770      	bx	lr

00008ee8 <bootutil_buffer_is_erased>:
{
    8ee8:	b538      	push	{r3, r4, r5, lr}
    8eea:	4615      	mov	r5, r2
    if (buffer == NULL || len == 0) {
    8eec:	460c      	mov	r4, r1
    8eee:	b161      	cbz	r1, 8f0a <bootutil_buffer_is_erased+0x22>
    8ef0:	b15a      	cbz	r2, 8f0a <bootutil_buffer_is_erased+0x22>
    erased_val = flash_area_erased_val(area);
    8ef2:	f7ff f966 	bl	81c2 <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    8ef6:	4621      	mov	r1, r4
    8ef8:	4425      	add	r5, r4
        if (u8b[i] != erased_val) {
    8efa:	f811 3b01 	ldrb.w	r3, [r1], #1
    8efe:	4283      	cmp	r3, r0
    8f00:	d103      	bne.n	8f0a <bootutil_buffer_is_erased+0x22>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    8f02:	42a9      	cmp	r1, r5
    8f04:	d1f9      	bne.n	8efa <bootutil_buffer_is_erased+0x12>
    return true;
    8f06:	2001      	movs	r0, #1
}
    8f08:	bd38      	pop	{r3, r4, r5, pc}
        return false;
    8f0a:	2000      	movs	r0, #0
    8f0c:	e7fc      	b.n	8f08 <bootutil_buffer_is_erased+0x20>

00008f0e <boot_read_flag>:
{
    8f0e:	b538      	push	{r3, r4, r5, lr}
    8f10:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    8f12:	2301      	movs	r3, #1
{
    8f14:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    8f16:	4622      	mov	r2, r4
{
    8f18:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    8f1a:	f7ff f90b 	bl	8134 <flash_area_read>
    if (rc < 0) {
    8f1e:	2800      	cmp	r0, #0
    8f20:	db0f      	blt.n	8f42 <boot_read_flag+0x34>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    8f22:	2201      	movs	r2, #1
    8f24:	4621      	mov	r1, r4
    8f26:	4628      	mov	r0, r5
    8f28:	f7ff ffde 	bl	8ee8 <bootutil_buffer_is_erased>
    8f2c:	b938      	cbnz	r0, 8f3e <boot_read_flag+0x30>
    if (flag != BOOT_FLAG_SET) {
    8f2e:	7823      	ldrb	r3, [r4, #0]
    return BOOT_FLAG_SET;
    8f30:	2b01      	cmp	r3, #1
        *flag = boot_flag_decode(*flag);
    8f32:	bf14      	ite	ne
    8f34:	2302      	movne	r3, #2
    8f36:	2301      	moveq	r3, #1
    8f38:	2000      	movs	r0, #0
    8f3a:	7023      	strb	r3, [r4, #0]
}
    8f3c:	bd38      	pop	{r3, r4, r5, pc}
    8f3e:	2303      	movs	r3, #3
    8f40:	e7fa      	b.n	8f38 <boot_read_flag+0x2a>
        return BOOT_EFLASH;
    8f42:	2001      	movs	r0, #1
    8f44:	e7fa      	b.n	8f3c <boot_read_flag+0x2e>

00008f46 <boot_write_trailer>:
{
    8f46:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    8f4a:	461d      	mov	r5, r3
    8f4c:	4606      	mov	r6, r0
    8f4e:	460f      	mov	r7, r1
    8f50:	4690      	mov	r8, r2
    align = flash_area_align(fap);
    8f52:	f7ff f92f 	bl	81b4 <flash_area_align>
    align = ALIGN_UP(inlen, align);
    8f56:	1e6c      	subs	r4, r5, #1
    8f58:	4404      	add	r4, r0
    8f5a:	4240      	negs	r0, r0
    8f5c:	4004      	ands	r4, r0
    if (align > BOOT_MAX_ALIGN) {
    8f5e:	2c08      	cmp	r4, #8
    8f60:	d81a      	bhi.n	8f98 <boot_write_trailer+0x52>
    erased_val = flash_area_erased_val(fap);
    8f62:	4630      	mov	r0, r6
    8f64:	f7ff f92d 	bl	81c2 <flash_area_erased_val>
    8f68:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
    8f6a:	462a      	mov	r2, r5
    8f6c:	4641      	mov	r1, r8
    8f6e:	4668      	mov	r0, sp
    8f70:	f7ff fc46 	bl	8800 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    8f74:	4649      	mov	r1, r9
    8f76:	1b62      	subs	r2, r4, r5
    8f78:	eb0d 0005 	add.w	r0, sp, r5
    8f7c:	f7ff fc4b 	bl	8816 <memset>
    rc = flash_area_write(fap, off, buf, align);
    8f80:	4623      	mov	r3, r4
    8f82:	466a      	mov	r2, sp
    8f84:	4639      	mov	r1, r7
    8f86:	4630      	mov	r0, r6
    8f88:	f7ff f8e9 	bl	815e <flash_area_write>
    if (rc != 0) {
    8f8c:	3800      	subs	r0, #0
    8f8e:	bf18      	it	ne
    8f90:	2001      	movne	r0, #1
}
    8f92:	b003      	add	sp, #12
    8f94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    8f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8f9c:	e7f9      	b.n	8f92 <boot_write_trailer+0x4c>

00008f9e <boot_write_trailer_flag>:
{
    8f9e:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
    8fa0:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
    8fa2:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    8fa6:	aa01      	add	r2, sp, #4
    8fa8:	f7ff ffcd 	bl	8f46 <boot_write_trailer>
}
    8fac:	b003      	add	sp, #12
    8fae:	f85d fb04 	ldr.w	pc, [sp], #4

00008fb2 <boot_write_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    8fb2:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    8fb4:	2201      	movs	r2, #1
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    8fb6:	3918      	subs	r1, #24
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    8fb8:	f021 0107 	bic.w	r1, r1, #7
    8fbc:	f7ff bfef 	b.w	8f9e <boot_write_trailer_flag>

00008fc0 <boot_read_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    8fc0:	6882      	ldr	r2, [r0, #8]
    8fc2:	3a18      	subs	r2, #24
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    8fc4:	f022 0207 	bic.w	r2, r2, #7
    8fc8:	f7ff bfa1 	b.w	8f0e <boot_read_flag>

00008fcc <boot_read_swap_state_by_id>:
{
    8fcc:	b513      	push	{r0, r1, r4, lr}
    8fce:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    8fd0:	b2c0      	uxtb	r0, r0
    8fd2:	a901      	add	r1, sp, #4
    8fd4:	f7f8 ff1a 	bl	1e0c <flash_area_open>
    if (rc != 0) {
    8fd8:	b950      	cbnz	r0, 8ff0 <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    8fda:	4621      	mov	r1, r4
    8fdc:	9801      	ldr	r0, [sp, #4]
    8fde:	f7fb fa6f 	bl	44c0 <boot_read_swap_state>
    8fe2:	4604      	mov	r4, r0
    flash_area_close(fap);
    8fe4:	9801      	ldr	r0, [sp, #4]
    8fe6:	f7ff f8a4 	bl	8132 <flash_area_close>
}
    8fea:	4620      	mov	r0, r4
    8fec:	b002      	add	sp, #8
    8fee:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    8ff0:	2401      	movs	r4, #1
    8ff2:	e7fa      	b.n	8fea <boot_read_swap_state_by_id+0x1e>

00008ff4 <boot_write_swap_info>:
{
    8ff4:	b513      	push	{r0, r1, r4, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    8ff6:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
{
    8ffa:	4604      	mov	r4, r0
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    8ffc:	f88d 1007 	strb.w	r1, [sp, #7]
    off = boot_swap_info_off(fap);
    9000:	f7ff ff5e 	bl	8ec0 <boot_swap_info_off>
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    9004:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
    9006:	4601      	mov	r1, r0
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    9008:	f10d 0207 	add.w	r2, sp, #7
    900c:	4620      	mov	r0, r4
    900e:	f7ff ff9a 	bl	8f46 <boot_write_trailer>
}
    9012:	b002      	add	sp, #8
    9014:	bd10      	pop	{r4, pc}

00009016 <nrf91_errata_14>:
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    9016:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    901a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    901e:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
  __ASM volatile ("dsb 0xF":::"memory");
    9022:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    9026:	2a09      	cmp	r2, #9
    9028:	d103      	bne.n	9032 <nrf91_errata_14+0x1c>
                switch(var2)
    902a:	1e43      	subs	r3, r0, #1
    902c:	4258      	negs	r0, r3
    902e:	4158      	adcs	r0, r3
    9030:	4770      	bx	lr
                        return false;
    9032:	2000      	movs	r0, #0
}
    9034:	4770      	bx	lr

00009036 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    9036:	4700      	bx	r0

00009038 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    9038:	f000 ba15 	b.w	9466 <z_impl_k_busy_wait>

0000903c <clock_stop>:
{
    903c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    903e:	4604      	mov	r4, r0
    9040:	b118      	cbz	r0, 904a <clock_stop+0xe>
    9042:	2801      	cmp	r0, #1
    9044:	d020      	beq.n	9088 <clock_stop+0x4c>
}
    9046:	b003      	add	sp, #12
    9048:	bdf0      	pop	{r4, r5, r6, r7, pc}
    904a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    904e:	2202      	movs	r2, #2
    9050:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9054:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    9058:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    905c:	2201      	movs	r2, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    905e:	4607      	mov	r7, r0
    9060:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    9062:	2301      	movs	r3, #1
    9064:	f242 7510 	movw	r5, #10000	; 0x2710
    9068:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    906c:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
    9070:	b1bc      	cbz	r4, 90a2 <clock_stop+0x66>
    9072:	2c01      	cmp	r4, #1
    9074:	d1e7      	bne.n	9046 <clock_stop+0xa>
            if (p_clk_src != NULL)
    9076:	b38f      	cbz	r7, 90dc <clock_stop+0xa0>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    9078:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    907c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    9080:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    9082:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    9086:	e014      	b.n	90b2 <clock_stop+0x76>
    p_reg->INTENCLR = mask;
    9088:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    908c:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    908e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9092:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    9096:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    909a:	f10d 0707 	add.w	r7, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    909e:	6058      	str	r0, [r3, #4]
    90a0:	e7df      	b.n	9062 <clock_stop+0x26>
            if (p_clk_src != NULL)
    90a2:	b18f      	cbz	r7, 90c8 <clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    90a4:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    90a8:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    90ac:	703b      	strb	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    90ae:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    90b2:	03da      	lsls	r2, r3, #15
    90b4:	d5c7      	bpl.n	9046 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    90b6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    90ba:	2801      	cmp	r0, #1
    90bc:	d1c3      	bne.n	9046 <clock_stop+0xa>
    90be:	f7ff ffbb 	bl	9038 <nrfx_busy_wait>
    90c2:	3d01      	subs	r5, #1
    90c4:	d1d4      	bne.n	9070 <clock_stop+0x34>
    90c6:	e7be      	b.n	9046 <clock_stop+0xa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    90c8:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    90cc:	03d9      	lsls	r1, r3, #15
    90ce:	d5ba      	bpl.n	9046 <clock_stop+0xa>
    90d0:	2001      	movs	r0, #1
    90d2:	f7ff ffb1 	bl	9038 <nrfx_busy_wait>
    90d6:	3d01      	subs	r5, #1
    90d8:	d1f6      	bne.n	90c8 <clock_stop+0x8c>
    90da:	e7b4      	b.n	9046 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    90dc:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    90e0:	03db      	lsls	r3, r3, #15
    90e2:	d5b0      	bpl.n	9046 <clock_stop+0xa>
    90e4:	2001      	movs	r0, #1
    90e6:	f7ff ffa7 	bl	9038 <nrfx_busy_wait>
    90ea:	3d01      	subs	r5, #1
    90ec:	d1f6      	bne.n	90dc <clock_stop+0xa0>
    90ee:	e7aa      	b.n	9046 <clock_stop+0xa>

000090f0 <nrfx_clock_enable>:
{
    90f0:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    90f2:	2005      	movs	r0, #5
    90f4:	f7f9 fdf0 	bl	2cd8 <arch_irq_is_enabled>
    90f8:	b910      	cbnz	r0, 9100 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    90fa:	2005      	movs	r0, #5
    90fc:	f7f9 fdde 	bl	2cbc <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    9100:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9104:	2201      	movs	r2, #1
    9106:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    910a:	bd08      	pop	{r3, pc}

0000910c <nrfx_clock_start>:
{
    910c:	b508      	push	{r3, lr}
    switch (domain)
    910e:	b110      	cbz	r0, 9116 <nrfx_clock_start+0xa>
    9110:	2801      	cmp	r0, #1
    9112:	d030      	beq.n	9176 <nrfx_clock_start+0x6a>
}
    9114:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9116:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    911a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    911e:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    9122:	03c9      	lsls	r1, r1, #15
    9124:	d40e      	bmi.n	9144 <nrfx_clock_start+0x38>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    9126:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    912a:	07db      	lsls	r3, r3, #31
    912c:	d513      	bpl.n	9156 <nrfx_clock_start+0x4a>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    912e:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    9132:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    9136:	3b01      	subs	r3, #1
    9138:	2b01      	cmp	r3, #1
    913a:	d809      	bhi.n	9150 <nrfx_clock_start+0x44>
    p_reg->INTENSET = mask;
    913c:	2302      	movs	r3, #2
    913e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    9142:	e7e7      	b.n	9114 <nrfx_clock_start+0x8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9144:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    9148:	2b02      	cmp	r3, #2
    914a:	d005      	beq.n	9158 <nrfx_clock_start+0x4c>
    914c:	2b01      	cmp	r3, #1
    914e:	d002      	beq.n	9156 <nrfx_clock_start+0x4a>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    9150:	2000      	movs	r0, #0
    9152:	f7ff ff73 	bl	903c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    9156:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    9158:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    915c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9160:	2300      	movs	r3, #0
    9162:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    9166:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    916a:	2302      	movs	r3, #2
    916c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9170:	2301      	movs	r3, #1
    9172:	6093      	str	r3, [r2, #8]
}
    9174:	e7ce      	b.n	9114 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9176:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    917a:	2200      	movs	r2, #0
    917c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    9180:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    9184:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9188:	6018      	str	r0, [r3, #0]
}
    918a:	e7c3      	b.n	9114 <nrfx_clock_start+0x8>

0000918c <nrfx_clock_stop>:
    clock_stop(domain);
    918c:	f7ff bf56 	b.w	903c <clock_stop>

00009190 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    9190:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    9194:	4770      	bx	lr

00009196 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    9196:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    919a:	4770      	bx	lr

0000919c <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    919c:	f44f 7080 	mov.w	r0, #256	; 0x100
    91a0:	4770      	bx	lr

000091a2 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    91a2:	4770      	bx	lr

000091a4 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    91a4:	b140      	cbz	r0, 91b8 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    91a6:	68c3      	ldr	r3, [r0, #12]
    91a8:	7858      	ldrb	r0, [r3, #1]
    91aa:	f010 0001 	ands.w	r0, r0, #1
    91ae:	bf1e      	ittt	ne
    91b0:	7818      	ldrbne	r0, [r3, #0]
    91b2:	fab0 f080 	clzne	r0, r0
    91b6:	0940      	lsrne	r0, r0, #5
}
    91b8:	4770      	bx	lr

000091ba <z_early_memset>:
	(void) memset(dst, c, n);
    91ba:	f7ff bb2c 	b.w	8816 <memset>

000091be <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    91be:	f7ff bb1f 	b.w	8800 <memcpy>

000091c2 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    91c2:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    91c6:	4313      	orrs	r3, r2
    91c8:	f013 0303 	ands.w	r3, r3, #3
    91cc:	d10c      	bne.n	91e8 <create_free_list+0x26>
	slab->free_list = NULL;
    91ce:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    91d0:	6881      	ldr	r1, [r0, #8]
    91d2:	4299      	cmp	r1, r3
    91d4:	d801      	bhi.n	91da <create_free_list+0x18>
	return 0;
    91d6:	2000      	movs	r0, #0
    91d8:	4770      	bx	lr
		*(char **)p = slab->free_list;
    91da:	6941      	ldr	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    91dc:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
    91de:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    91e0:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    91e2:	6142      	str	r2, [r0, #20]
		p += slab->block_size;
    91e4:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    91e6:	e7f3      	b.n	91d0 <create_free_list+0xe>
		return -EINVAL;
    91e8:	f06f 0015 	mvn.w	r0, #21
}
    91ec:	4770      	bx	lr

000091ee <k_mem_slab_init>:
{
    91ee:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    91f0:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
    91f4:	2300      	movs	r3, #0
	slab->buffer = buffer;
    91f6:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    91f8:	6183      	str	r3, [r0, #24]
{
    91fa:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    91fc:	f7ff ffe1 	bl	91c2 <create_free_list>
	if (rc < 0) {
    9200:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
    9202:	bfa8      	it	ge
    9204:	e9c4 4400 	strdge	r4, r4, [r4]
}
    9208:	bd10      	pop	{r4, pc}

0000920a <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    920a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    920c:	4604      	mov	r4, r0
    920e:	460d      	mov	r5, r1
	__asm__ volatile(
    9210:	f04f 0320 	mov.w	r3, #32
    9214:	f3ef 8611 	mrs	r6, BASEPRI
    9218:	f383 8812 	msr	BASEPRI_MAX, r3
    921c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    9220:	6947      	ldr	r7, [r0, #20]
    9222:	b977      	cbnz	r7, 9242 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    9224:	f000 f8b5 	bl	9392 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    9228:	b158      	cbz	r0, 9242 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    922a:	682a      	ldr	r2, [r5, #0]
    922c:	6787      	str	r7, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    922e:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    9230:	f000 f89f 	bl	9372 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    9234:	4631      	mov	r1, r6
    9236:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    923a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    923e:	f7fc bb83 	b.w	5948 <z_reschedule>
	**(char ***) mem = slab->free_list;
    9242:	682b      	ldr	r3, [r5, #0]
    9244:	6962      	ldr	r2, [r4, #20]
    9246:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    9248:	682b      	ldr	r3, [r5, #0]
    924a:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    924c:	69a3      	ldr	r3, [r4, #24]
    924e:	3b01      	subs	r3, #1
    9250:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    9252:	f386 8811 	msr	BASEPRI, r6
    9256:	f3bf 8f6f 	isb	sy
}
    925a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000925c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    925c:	f3ef 8005 	mrs	r0, IPSR
}
    9260:	3800      	subs	r0, #0
    9262:	bf18      	it	ne
    9264:	2001      	movne	r0, #1
    9266:	4770      	bx	lr

00009268 <k_thread_name_get>:
}
    9268:	2000      	movs	r0, #0
    926a:	4770      	bx	lr

0000926c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    926c:	b508      	push	{r3, lr}
	__asm__ volatile(
    926e:	f04f 0220 	mov.w	r2, #32
    9272:	f3ef 8311 	mrs	r3, BASEPRI
    9276:	f382 8812 	msr	BASEPRI_MAX, r2
    927a:	f3bf 8f6f 	isb	sy
	arch_cpu_idle();
    927e:	f7f9 fc9f 	bl	2bc0 <arch_cpu_idle>
    9282:	e7f4      	b.n	926e <idle+0x2>

00009284 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    9284:	f990 300e 	ldrsb.w	r3, [r0, #14]
    9288:	428b      	cmp	r3, r1
    928a:	d001      	beq.n	9290 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    928c:	f7fc bb16 	b.w	58bc <z_set_prio>
}
    9290:	2000      	movs	r0, #0
    9292:	4770      	bx	lr

00009294 <z_impl_k_mutex_init>:
{
    9294:	4603      	mov	r3, r0
	mutex->owner = NULL;
    9296:	2000      	movs	r0, #0
    9298:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    929c:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    92a0:	4770      	bx	lr

000092a2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    92a2:	b13a      	cbz	r2, 92b4 <z_impl_k_sem_init+0x12>
    92a4:	428a      	cmp	r2, r1
    92a6:	d305      	bcc.n	92b4 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    92a8:	e9c0 1202 	strd	r1, r2, [r0, #8]
    92ac:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    92b0:	2000      	movs	r0, #0
    92b2:	4770      	bx	lr
		return -EINVAL;
    92b4:	f06f 0015 	mvn.w	r0, #21
}
    92b8:	4770      	bx	lr

000092ba <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    92ba:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    92be:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    92c0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    92c2:	2300      	movs	r3, #0
	node->prev = NULL;
    92c4:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    92c8:	4770      	bx	lr

000092ca <unpend_thread_no_timeout>:
{
    92ca:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    92cc:	f7ff fff5 	bl	92ba <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    92d0:	7b43      	ldrb	r3, [r0, #13]
    92d2:	f023 0302 	bic.w	r3, r3, #2
    92d6:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    92d8:	2300      	movs	r3, #0
    92da:	6083      	str	r3, [r0, #8]
}
    92dc:	bd08      	pop	{r3, pc}

000092de <z_thread_timeout>:
{
    92de:	4601      	mov	r1, r0
    92e0:	b510      	push	{r4, lr}
    92e2:	f04f 0320 	mov.w	r3, #32
    92e6:	f3ef 8411 	mrs	r4, BASEPRI
    92ea:	f383 8812 	msr	BASEPRI_MAX, r3
    92ee:	f3bf 8f6f 	isb	sy
		if (!killed) {
    92f2:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    92f6:	f013 0f28 	tst.w	r3, #40	; 0x28
    92fa:	d10d      	bne.n	9318 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    92fc:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    9300:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    9302:	b10b      	cbz	r3, 9308 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    9304:	f7ff ffe1 	bl	92ca <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    9308:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    930c:	f023 0314 	bic.w	r3, r3, #20
    9310:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    9314:	f7fc f9dc 	bl	56d0 <ready_thread>
	__asm__ volatile(
    9318:	f384 8811 	msr	BASEPRI, r4
    931c:	f3bf 8f6f 	isb	sy
}
    9320:	bd10      	pop	{r4, pc}

00009322 <add_to_waitq_locked>:
{
    9322:	b538      	push	{r3, r4, r5, lr}
    9324:	4604      	mov	r4, r0
    9326:	460d      	mov	r5, r1
	unready_thread(thread);
    9328:	f7fc fa06 	bl	5738 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    932c:	7b63      	ldrb	r3, [r4, #13]
    932e:	f043 0302 	orr.w	r3, r3, #2
    9332:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    9334:	b1e5      	cbz	r5, 9370 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    9336:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    9338:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    933a:	429d      	cmp	r5, r3
    933c:	d109      	bne.n	9352 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    933e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    9340:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    9344:	601c      	str	r4, [r3, #0]
	list->tail = node;
    9346:	606c      	str	r4, [r5, #4]
}
    9348:	e012      	b.n	9370 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    934a:	686a      	ldr	r2, [r5, #4]
    934c:	4293      	cmp	r3, r2
    934e:	d0f6      	beq.n	933e <add_to_waitq_locked+0x1c>
    9350:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9352:	2b00      	cmp	r3, #0
    9354:	d0f3      	beq.n	933e <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    9356:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    935a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    935e:	428a      	cmp	r2, r1
    9360:	d0f3      	beq.n	934a <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    9362:	4291      	cmp	r1, r2
    9364:	ddf1      	ble.n	934a <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    9366:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    9368:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    936c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    936e:	605c      	str	r4, [r3, #4]
}
    9370:	bd38      	pop	{r3, r4, r5, pc}

00009372 <z_ready_thread>:
{
    9372:	b510      	push	{r4, lr}
	__asm__ volatile(
    9374:	f04f 0320 	mov.w	r3, #32
    9378:	f3ef 8411 	mrs	r4, BASEPRI
    937c:	f383 8812 	msr	BASEPRI_MAX, r3
    9380:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    9384:	f7fc f9a4 	bl	56d0 <ready_thread>
	__asm__ volatile(
    9388:	f384 8811 	msr	BASEPRI, r4
    938c:	f3bf 8f6f 	isb	sy
}
    9390:	bd10      	pop	{r4, pc}

00009392 <z_unpend_first_thread>:
{
    9392:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    9394:	f04f 0320 	mov.w	r3, #32
    9398:	f3ef 8511 	mrs	r5, BASEPRI
    939c:	f383 8812 	msr	BASEPRI_MAX, r3
    93a0:	f3bf 8f6f 	isb	sy
	return list->head == list;
    93a4:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    93a6:	42a0      	cmp	r0, r4
    93a8:	d00d      	beq.n	93c6 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    93aa:	b134      	cbz	r4, 93ba <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    93ac:	4620      	mov	r0, r4
    93ae:	f7ff ff8c 	bl	92ca <unpend_thread_no_timeout>
    93b2:	f104 0018 	add.w	r0, r4, #24
    93b6:	f000 f81e 	bl	93f6 <z_abort_timeout>
	__asm__ volatile(
    93ba:	f385 8811 	msr	BASEPRI, r5
    93be:	f3bf 8f6f 	isb	sy
}
    93c2:	4620      	mov	r0, r4
    93c4:	bd38      	pop	{r3, r4, r5, pc}
    93c6:	2400      	movs	r4, #0
    93c8:	e7f7      	b.n	93ba <z_unpend_first_thread+0x28>

000093ca <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    93ca:	4603      	mov	r3, r0
    93cc:	b920      	cbnz	r0, 93d8 <z_reschedule_irqlock+0xe>
    93ce:	f3ef 8205 	mrs	r2, IPSR
    93d2:	b90a      	cbnz	r2, 93d8 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    93d4:	f7f9 bcd6 	b.w	2d84 <arch_swap>
    93d8:	f383 8811 	msr	BASEPRI, r3
    93dc:	f3bf 8f6f 	isb	sy
}
    93e0:	4770      	bx	lr

000093e2 <z_reschedule_unlocked>:
	__asm__ volatile(
    93e2:	f04f 0320 	mov.w	r3, #32
    93e6:	f3ef 8011 	mrs	r0, BASEPRI
    93ea:	f383 8812 	msr	BASEPRI_MAX, r3
    93ee:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    93f2:	f7ff bfea 	b.w	93ca <z_reschedule_irqlock>

000093f6 <z_abort_timeout>:
{
    93f6:	b510      	push	{r4, lr}
    93f8:	f04f 0220 	mov.w	r2, #32
    93fc:	f3ef 8411 	mrs	r4, BASEPRI
    9400:	f382 8812 	msr	BASEPRI_MAX, r2
    9404:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    9408:	6803      	ldr	r3, [r0, #0]
    940a:	b13b      	cbz	r3, 941c <z_abort_timeout+0x26>
			remove_timeout(to);
    940c:	f7fc fc88 	bl	5d20 <remove_timeout>
			ret = 0;
    9410:	2000      	movs	r0, #0
	__asm__ volatile(
    9412:	f384 8811 	msr	BASEPRI, r4
    9416:	f3bf 8f6f 	isb	sy
}
    941a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    941c:	f06f 0015 	mvn.w	r0, #21
    9420:	e7f7      	b.n	9412 <z_abort_timeout+0x1c>

00009422 <z_set_timeout_expiry>:
{
    9422:	b570      	push	{r4, r5, r6, lr}
    9424:	4604      	mov	r4, r0
    9426:	460d      	mov	r5, r1
	__asm__ volatile(
    9428:	f04f 0320 	mov.w	r3, #32
    942c:	f3ef 8611 	mrs	r6, BASEPRI
    9430:	f383 8812 	msr	BASEPRI_MAX, r3
    9434:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    9438:	f7fc fc4a 	bl	5cd0 <next_timeout>
			      || (ticks <= next_to);
    943c:	2801      	cmp	r0, #1
    943e:	dd07      	ble.n	9450 <z_set_timeout_expiry+0x2e>
    9440:	42a0      	cmp	r0, r4
    9442:	db05      	blt.n	9450 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    9444:	42a0      	cmp	r0, r4
    9446:	4629      	mov	r1, r5
    9448:	bfa8      	it	ge
    944a:	4620      	movge	r0, r4
    944c:	f7fa ff32 	bl	42b4 <sys_clock_set_timeout>
	__asm__ volatile(
    9450:	f386 8811 	msr	BASEPRI, r6
    9454:	f3bf 8f6f 	isb	sy
}
    9458:	bd70      	pop	{r4, r5, r6, pc}

0000945a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    945a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    945c:	f7fc fd56 	bl	5f0c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    9460:	bd08      	pop	{r3, pc}

00009462 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    9462:	f7fc bd53 	b.w	5f0c <sys_clock_tick_get>

00009466 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    9466:	b108      	cbz	r0, 946c <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    9468:	f7f8 bcc4 	b.w	1df4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    946c:	4770      	bx	lr

0000946e <nrf_cc310_bl_ecdsa_verify_secp256r1>:
    946e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9472:	9f06      	ldr	r7, [sp, #24]
    9474:	4604      	mov	r4, r0
    9476:	4615      	mov	r5, r2
    9478:	461e      	mov	r6, r3
    947a:	f7fc ff71 	bl	6360 <nrf_cc310_bl_ecdsa_verify_init_secp256r1>
    947e:	b938      	cbnz	r0, 9490 <nrf_cc310_bl_ecdsa_verify_secp256r1+0x22>
    9480:	463b      	mov	r3, r7
    9482:	4632      	mov	r2, r6
    9484:	4629      	mov	r1, r5
    9486:	4620      	mov	r0, r4
    9488:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    948c:	f7fc bf8e 	b.w	63ac <nrf_cc310_bl_ecdsa_verify_hash_secp256r1>
    9490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009494 <PkaInitAndMutexLock>:
    9494:	460a      	mov	r2, r1
    9496:	2100      	movs	r1, #0
    9498:	f7fd ba14 	b.w	68c4 <PkaInitPka>

0000949c <SaSi_PalMemCopy>:
    949c:	f7ff b9b0 	b.w	8800 <memcpy>

000094a0 <SaSi_PalMemSet>:
    94a0:	f7ff b9b9 	b.w	8816 <memset>

000094a4 <SaSi_PalMemSetZero>:
    94a4:	460a      	mov	r2, r1
    94a6:	2100      	movs	r1, #0
    94a8:	f7ff b9b5 	b.w	8816 <memset>

000094ac <CRYS_COMMON_ReverseMemcpy32>:
    94ac:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    94b0:	3804      	subs	r0, #4
    94b2:	428a      	cmp	r2, r1
    94b4:	d101      	bne.n	94ba <CRYS_COMMON_ReverseMemcpy32+0xe>
    94b6:	2000      	movs	r0, #0
    94b8:	4770      	bx	lr
    94ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    94be:	ba1b      	rev	r3, r3
    94c0:	f840 3f04 	str.w	r3, [r0, #4]!
    94c4:	e7f5      	b.n	94b2 <CRYS_COMMON_ReverseMemcpy32+0x6>
	...
